{"version":3,"file":"scene-graph-spec.js","sourceRoot":"","sources":["../../../src/test/features/scene-graph-spec.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAIH,OAAO,EAAC,YAAY,EAAuB,eAAe,EAAC,MAAM,+BAA+B,CAAC;AACjG,OAAO,EAAC,eAAe,EAAC,MAAM,qCAAqC,CAAC;AACpE,OAAO,EAAC,mBAAmB,EAAgB,MAAM,oDAAoD,CAAC;AACtG,OAAO,sBAAsB,EAAE,EAAC,MAAM,EAAC,MAAM,4BAA4B,CAAC;AAE1E,OAAO,EAAC,YAAY,EAAC,MAAM,oBAAoB,CAAC;AAChD,OAAO,EAAC,SAAS,EAAE,SAAS,EAAC,MAAM,eAAe,CAAC;AACnD,OAAO,EAAC,iBAAiB,EAAC,MAAM,iBAAiB,CAAC;AAKlD,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAE3B,MAAM,kBAAkB,GAAG,SAAS,CAAC,sBAAsB,CAAC,CAAC;AAC7D,MAAM,cAAc,GAAG,SAAS,CAAC,kBAAkB,CAAC,CAAC;AACrD,MAAM,cAAc,GAAG,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAE,eAAe;AACvE,MAAM,wBAAwB,GAAG,SAAS,CAAC,mCAAmC,CAAC,CAAC,CAAC,eAAe;AAChG,MAAM,aAAa,GAAG,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAAI,gBAAgB;AACxE,MAAM,gBAAgB,GAAG,SAAS,CAAC,wCAAwC,CAAC,CAAC;AAC7E,MAAM,qBAAqB,GAAG,SAAS,CACnC,yEAAyE,CAAC,CAAC;AAE/E,SAAS,WAAW,CAAC,KAAiB,EAAE,mBAAmB,GAAG,KAAK;IACjE,qEAAqE;IACrE,qEAAqE;IACrE,qEAAqE;IACrE,OAAO,mBAAmB,CAAC,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC/G,CAAC;AAED,KAAK,CAAC,6CAA6C,EAAE,GAAG,EAAE;IACxD,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,IAAI,OAAe,CAAC;IACpB,IAAI,kBACuD,CAAC;IAC5D,IAAI,OAAgD,CAAC;IAErD,KAAK,CAAC,GAAG,EAAE;QACT,OAAO,GAAG,4BAA4B,MAAM,EAAE,EAAE,CAAC;QACjD,kBAAkB,GAAG,KAAM,SAAQ,eAAe,CACjD,sBAAsB,CAAC;YACtB,MAAM,KAAK,EAAE;gBACX,OAAO,OAAO,CAAC;YACjB,CAAC;SACF,CAAC;QACF,cAAc,CAAC,MAAM,CAAC,OAAO,EAAE,kBAAkB,CAAC,CAAC;QAEnD,OAAO,GAAG,IAAI,kBAAkB,EAAE,CAAC;QACnC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,GAAG,EAAE;QACZ,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,iBAAiB,CAAC,GAAG,EAAE,CAAC,kBAAkB,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC;IAE3D,KAAK,CAAC,cAAc,EAAE,GAAG,EAAE;QACzB,KAAK,CAAC,qBAAqB,EAAE,GAAG,EAAE;YAChC,KAAK,CAAC,KAAK,IAAI,EAAE;gBACf,OAAO,CAAC,GAAG,GAAG,cAAc,CAAC;gBAE7B,MAAM,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBACpC,MAAM,SAAS,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;gBAClD,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,EAAC,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC;gBAC5D,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC;gBACrC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;gBACjD,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC;gBAC3D,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC;gBACrC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,cAAc,EAAE,GAAG,EAAE;gBACxB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,WAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;qBACxD,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACjB,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC9C,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACxE,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC1E,CAAC,CAAC,CAAC;YAEH,IAAI,CACA;iDACuC,EACvC,KAAK,IAAI,EAAE;gBACT,IAAI,aAAa,GAAuB,IAAI,CAAA;gBAC5C,sDAAsD;gBACtD,KAAK,MAAM,SAAS,IAAI,OAAO,CAAC,KAAM,CAAC,eAAe,CAAC,EAAE;oBACvD,IAAI,SAAS,CAAC,WAAW,IAAI,IAAI;wBAC7B,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE;wBACvC,aAAa,GAAG,SAAS,CAAC;wBAC1B,OAAO;qBACR;iBACF;gBAED,MAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC;gBAErC,6BAA6B;gBAC7B,OAAO,CAAC,WAAW,GAAG,YAAY,CAAC;gBACnC,MAAM,YAAY,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;gBAC/C,MAAM,CAAE,aAAc,CAAC,IAAI,CAAC,QAAiC,CAAC,IAAI,CAAC;qBAC9D,KAAK,CAAC,KAAK,CAAC,CAAC;gBAElB,4BAA4B;gBAC5B,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;gBAC3B,MAAM,YAAY,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;gBAC/C,MAAM,CAAE,aAAc,CAAC,IAAI,CAAC,QAAiC,CAAC,IAAI,CAAC;qBAC9D,KAAK,CAAC,QAAQ,CAAC,CAAC;YACvB,CAAC,CAAC,CAAC;YAEP,IAAI,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;gBAChE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC;gBAC3D,MAAM,GAAG,GAAG,GAAG,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;gBAC1C,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;gBAClB,MAAM,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBACpC,MAAM,SAAS,EAAE,CAAC;gBAElB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,WAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;qBACxD,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACjB,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;gBACpD,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACxE,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC1E,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,gEAAgE,EAAE,GAAG,EAAE;YAC3E,KAAK,CAAC,KAAK,IAAI,EAAE;gBACf,OAAO,CAAC,GAAG,GAAG,wBAAwB,CAAC;gBAEvC,MAAM,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBACpC,MAAM,SAAS,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,cAAc,EAAE,GAAG,EAAE;gBACxB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,WAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;qBACxD,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACjB,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC9C,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACpF,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACpF,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACtF,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC;iDACsC,EAAE,KAAK,IAAI,EAAE;gBACtD,IAAI,aAAa,GAAuB,IAAI,CAAA;gBAC5C,sDAAsD;gBACtD,KAAK,MAAM,SAAS,IAAI,OAAO,CAAC,KAAM,CAAC,eAAe,CAAC,EAAE;oBACvD,IAAI,SAAS,CAAC,WAAW,IAAI,IAAI;wBAC7B,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE;wBACvC,aAAa,GAAG,SAAS,CAAC;wBAC1B,OAAO;qBACR;iBACF;gBAED,MAAM,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC;gBAErC,6BAA6B;gBAC7B,OAAO,CAAC,WAAW,GAAG,SAAS,CAAC;gBAChC,MAAM,YAAY,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;gBAC/C,MAAM,CAAE,aAAc,CAAC,IAAI,CAAC,QAAiC,CAAC,IAAI,CAAC;qBAC9D,KAAK,CAAC,aAAa,CAAC,CAAC;gBAE1B,4BAA4B;gBAC5B,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;gBAC3B,MAAM,YAAY,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;gBAC/C,MAAM,CAAE,aAAc,CAAC,IAAI,CAAC,QAAiC,CAAC,IAAI,CAAC;qBAC9D,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;gBAChE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC;gBAC3D,MAAM,GAAG,GAAG,GAAG,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;gBAC1C,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;gBAClB,MAAM,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBACpC,MAAM,SAAS,EAAE,CAAC;gBAElB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,WAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;qBACxD,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAEjB,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;gBACpD,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACpF,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACpF,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACtF,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CACA,gFAAgF,EAChF,KAAK,IAAI,EAAE;YACT,OAAO,CAAC,GAAG,GAAG,aAAa,CAAC;YAC5B,MAAM,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YACpC,MAAM,SAAS,EAAE,CAAC;YAElB,MAAM,GAAG,GAAG,SAAS,CACjB,qEAAqE,CAAC,CAAC;YAC3E,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;YAClD,MAAM,SAAS,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAC5C,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,aAAa,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;YAErE,OAAO,CAAC,KAAM,CAAC,SAAS,CAAC,CAAC,CAAC;iBACtB,oBAAoB,CAAC,gBAAgB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAE/D,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC;YAC3D,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC;YACrC,mEAAmE;YACnE,uDAAuD;YACvD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAC/C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACT,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACtC,IAAI,QAA8B,CAAC;QAEnC,KAAK,CAAC,KAAK,IAAI,EAAE;YACf,OAAO,CAAC,GAAG,GAAG,kBAAkB,CAAC;YAEjC,MAAM,YAAY,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;YAEjD,QAAQ;gBACH,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAC5D;qBACD,QAAgC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,OAAO,CAAC,KAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,kBAAkB,CACrE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAElB,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC;YAEtD,MAAM,KAAK,GACP,OAAO,CAAC,KAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,eAAe,CAAC;YAErE,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,OAAO,CAAC,KAAM,CAAC,SAAS,CAAC,CAAC,CAAC;iBAC5B,oBAAoB,CAAC,gBAAiB,CAAC,OAAQ,CAAC,MAAO,CAAC,MAAM,CAC3D,gBAAgB,CAAC,CAAC;YAE1B,MAAM,GAAG,GACL,OAAO,CAAC,KAAM,CAAC,SAAS,CAAC,CAAC,CAAC;iBACtB,oBAAoB,CAAC,gBAAiB,CAAC,OAAQ,CAAC,MAAO,CAAC,GAAG,CAAC;YAErE,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,wBAAwB,EAAE,GAAG,EAAE;YACnC,IAAI,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;gBAChD,MAAM,KAAK,GACP,OAAO,CAAC,KAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,eAAe,CAAC;gBAErE,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;gBAE5C,OAAO,CAAC,GAAG,GAAG,cAAc,CAAC;gBAE7B,MAAM,YAAY,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;gBAEjD,MAAM,SAAS,GACX,OAAO,CAAC,KAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,eAAe,CAAC;gBAErE,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;gBAC1D,OAAO,CAAC,GAAG,GAAG,cAAc,CAAC;gBAE7B,MAAM,YAAY,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;gBAEjD,MAAM,OAAO,CAAC,KAAM,CAAC,SAAS,CAAC,CAAC,CAAC;qBAC5B,oBAAoB,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAE3D,MAAM,KAAK,GACP,OAAO,CAAC,KAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,eAAe,CAAC;gBAErE,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAEtC,MAAM,WAAW,GACZ,OAAO,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAU;qBAC3D,QAAgC,CAAC;gBAE1C,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,CAAC,CAAC;YAC3D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,oCAAoC,EAAE,GAAG,EAAE;YAC/C,IAAI,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;gBACvD,OAAO,CAAC,GAAG,GAAG,qBAAqB,CAAC;gBAEpC,MAAM,YAAY,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;gBAEjD,MAAM,IAAI,GAAI,OAAe,CAAC,YAAY,CAA4B,CAAC;gBAEvE,KAAK,MAAM,SAAS,IAAI,OAAO,CAAC,KAAM,CAAC,eAAe,CAAC,EAAE;oBACvD,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;yBAC/D,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;iBACf;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Mesh, MeshStandardMaterial} from 'three';\n\nimport {$currentGLTF, SceneGraphInterface, SceneGraphMixin} from '../../features/scene-graph.js';\nimport {$primitivesList} from '../../features/scene-graph/model.js';\nimport {$initialMaterialIdx, PrimitiveNode} from '../../features/scene-graph/nodes/primitive-node.js';\nimport ModelViewerElementBase, {$scene} from '../../model-viewer-base.js';\nimport {ModelViewerGLTFInstance} from '../../three-components/gltf-instance/ModelViewerGLTFInstance.js';\nimport {waitForEvent} from '../../utilities.js';\nimport {assetPath, rafPasses} from '../helpers.js';\nimport {BasicSpecTemplate} from '../templates.js';\nimport {ModelScene} from \"../../three-components/ModelScene\";\n\n\n\nconst expect = chai.expect;\n\nconst ASTRONAUT_GLB_PATH = assetPath('models/Astronaut.glb');\nconst HORSE_GLB_PATH = assetPath('models/Horse.glb');\nconst CUBES_GLB_PATH = assetPath('models/cubes.gltf');  // has variants\nconst MESH_PRIMITIVES_GLB_PATH = assetPath('models/MeshPrimitivesVariants.glb'); // has variants\nconst CUBE_GLB_PATH = assetPath('models/cube.gltf');    // has UV coords\nconst SUNRISE_IMG_PATH = assetPath('environments/spruit_sunrise_1k_LDR.jpg');\nconst RIGGEDFIGURE_GLB_PATH = assetPath(\n    'models/glTF-Sample-Models/2.0/RiggedFigure/glTF-Binary/RiggedFigure.glb');\n\nfunction getGLTFRoot(scene: ModelScene, hasBeenExportedOnce = false) {\n  // TODO: export is putting in an extra node layer, because the loader\n  // gives us a Group, but if the exporter doesn't get a Scene, then it\n  // wraps everything in an \"AuxScene\" node. Feels like a three.js bug.\n  return hasBeenExportedOnce ? scene.modelContainer.children[0].children[0] : scene.modelContainer.children[0];\n}\n\nsuite('ModelViewerElementBase with SceneGraphMixin', () => {\n  let nextId = 0;\n  let tagName: string;\n  let ModelViewerElement:\n      Constructor<ModelViewerElementBase&SceneGraphInterface>;\n  let element: InstanceType<typeof ModelViewerElement>;\n\n  setup(() => {\n    tagName = `model-viewer-scene-graph-${nextId++}`;\n    ModelViewerElement = class extends SceneGraphMixin\n    (ModelViewerElementBase) {\n      static get is() {\n        return tagName;\n      }\n    };\n    customElements.define(tagName, ModelViewerElement);\n\n    element = new ModelViewerElement();\n    document.body.insertBefore(element, document.body.firstChild);\n  });\n\n  teardown(() => {\n    document.body.removeChild(element);\n  });\n\n  BasicSpecTemplate(() => ModelViewerElement, () => tagName);\n\n  suite('scene export', () => {\n    suite('with a loaded model', () => {\n      setup(async () => {\n        element.src = CUBES_GLB_PATH;\n\n        await waitForEvent(element, 'load');\n        await rafPasses();\n      });\n\n      test('exports the loaded model to GLTF', async () => {\n        const exported = await element.exportScene({binary: false});\n        expect(exported).to.be.not.undefined;\n        expect(exported.size).to.be.greaterThan(500);\n      });\n\n      test('exports the loaded model to GLB', async () => {\n        const exported = await element.exportScene({binary: true});\n        expect(exported).to.be.not.undefined;\n        expect(exported.size).to.be.greaterThan(500);\n      });\n\n      test('has variants', () => {\n        expect(element[$scene].currentGLTF!.userData.variants.length)\n            .to.be.eq(3);\n        const gltfRoot = getGLTFRoot(element[$scene]);\n        expect(gltfRoot.children[0].userData.variantMaterials.size).to.be.eq(3);\n        expect(gltfRoot.children[1].userData.variantMaterials.size).to.be.eq(3);\n      });\n\n      test(\n          `Setting variantName to null results in primitive\n           reverting to default/initial material`,\n          async () => {\n            let primitiveNode: PrimitiveNode|null = null\n            // Finds the first primitive with material 0 assigned.\n            for (const primitive of element.model![$primitivesList]) {\n              if (primitive.variantInfo != null &&\n                  primitive[$initialMaterialIdx] == 0) {\n                primitiveNode = primitive;\n                return;\n              }\n            }\n\n            expect(primitiveNode).to.not.be.null;\n\n            // Switches to a new variant.\n            element.variantName = 'Yellow Red';\n            await waitForEvent(element, 'variant-applied');\n            expect((primitiveNode!.mesh.material as MeshStandardMaterial).name)\n                .equal('red');\n\n            // Switches to null variant.\n            element.variantName = null;\n            await waitForEvent(element, 'variant-applied');\n            expect((primitiveNode!.mesh.material as MeshStandardMaterial).name)\n                .equal('purple');\n          });\n\n      test('exports and re-imports the model with variants', async () => {\n        const exported = await element.exportScene({binary: true});\n        const url = URL.createObjectURL(exported);\n        element.src = url;\n        await waitForEvent(element, 'load');\n        await rafPasses();\n\n        expect(element[$scene].currentGLTF!.userData.variants.length)\n            .to.be.eq(3);\n        const gltfRoot = getGLTFRoot(element[$scene], true);\n        expect(gltfRoot.children[0].userData.variantMaterials.size).to.be.eq(3);\n        expect(gltfRoot.children[1].userData.variantMaterials.size).to.be.eq(3);\n      });\n    });\n\n    suite('with a loaded model containing a mesh with multiple primitives', () => {\n      setup(async () => {\n        element.src = MESH_PRIMITIVES_GLB_PATH;\n\n        await waitForEvent(element, 'load');\n        await rafPasses();\n      });\n\n      test('has variants', () => {\n        expect(element[$scene].currentGLTF!.userData.variants.length)\n            .to.be.eq(2);\n        const gltfRoot = getGLTFRoot(element[$scene]);\n        expect(gltfRoot.children[0].children[0].userData.variantMaterials.size).to.be.eq(2);\n        expect(gltfRoot.children[0].children[1].userData.variantMaterials.size).to.be.eq(2);\n        expect(gltfRoot.children[0].children[2].userData.variantMaterials.size).to.be.eq(2);\n      });\n\n      test(`Setting variantName to null results in primitive\n           reverting to default/initial material`, async () => {\n        let primitiveNode: PrimitiveNode|null = null\n        // Finds the first primitive with material 0 assigned.\n        for (const primitive of element.model![$primitivesList]) {\n          if (primitive.variantInfo != null &&\n              primitive[$initialMaterialIdx] == 0) {\n            primitiveNode = primitive;\n            return;\n          }\n        }\n\n        expect(primitiveNode).to.not.be.null;\n\n        // Switches to a new variant.\n        element.variantName = 'Inverse';\n        await waitForEvent(element, 'variant-applied');\n        expect((primitiveNode!.mesh.material as MeshStandardMaterial).name)\n            .equal('STEEL RED X');\n\n        // Switches to null variant.\n        element.variantName = null;\n        await waitForEvent(element, 'variant-applied');\n        expect((primitiveNode!.mesh.material as MeshStandardMaterial).name)\n            .equal('STEEL METALLIC');\n      });\n\n      test('exports and re-imports the model with variants', async () => {\n        const exported = await element.exportScene({binary: true});\n        const url = URL.createObjectURL(exported);\n        element.src = url;\n        await waitForEvent(element, 'load');\n        await rafPasses();\n\n        expect(element[$scene].currentGLTF!.userData.variants.length)\n            .to.be.eq(2);\n\n        const gltfRoot = getGLTFRoot(element[$scene], true);\n        expect(gltfRoot.children[0].children[0].userData.variantMaterials.size).to.be.eq(2);\n        expect(gltfRoot.children[0].children[1].userData.variantMaterials.size).to.be.eq(2);\n        expect(gltfRoot.children[0].children[2].userData.variantMaterials.size).to.be.eq(2);\n      });\n    });\n\n    test(\n        'When loading a new JPEG texture from an ObjectURL, the GLB does not export PNG',\n        async () => {\n          element.src = CUBE_GLB_PATH;\n          await waitForEvent(element, 'load');\n          await rafPasses();\n\n          const url = assetPath(\n              'models/glTF-Sample-Models/2.0/DamagedHelmet/glTF/Default_albedo.jpg');\n          const blob = await fetch(url).then(r => r.blob());\n          const objectUrl = URL.createObjectURL(blob);\n          const texture = await element.createTexture(objectUrl, 'image/jpeg');\n\n          element.model!.materials[0]\n              .pbrMetallicRoughness.baseColorTexture.setTexture(texture);\n\n          const exported = await element.exportScene({binary: true});\n          expect(exported).to.be.not.undefined;\n          // The JPEG is ~1 Mb and the equivalent PNG is about ~6 Mb, so this\n          // just checks we saved an image and it wasn't too big.\n          expect(exported.size).to.be.greaterThan(0.5e6);\n          expect(exported.size).to.be.lessThan(1.5e6);\n        });\n  });\n\n  suite('with a loaded scene graph', () => {\n    let material: MeshStandardMaterial;\n\n    setup(async () => {\n      element.src = ASTRONAUT_GLB_PATH;\n\n      await waitForEvent(element, 'scene-graph-ready');\n\n      material =\n          (element[$scene].modelContainer.children[0].children[0].children[0] as\n           Mesh)\n              .material as MeshStandardMaterial;\n    });\n\n    test('allows the scene graph to be manipulated', async () => {\n      await element.model!.materials[0].pbrMetallicRoughness.setBaseColorFactor(\n          [1, 0, 0, 1]);\n\n      expect(material.color).to.include({r: 1, g: 0, b: 0});\n\n      const color =\n          element.model!.materials[0].pbrMetallicRoughness.baseColorFactor;\n\n      expect(color).to.be.eql([1, 0, 0, 1]);\n    });\n\n    test('image.setURI sets the appropriate texture', async () => {\n      await element.model!.materials[0]\n          .pbrMetallicRoughness.baseColorTexture!.texture!.source!.setURI(\n              SUNRISE_IMG_PATH);\n\n      const uri =\n          element.model!.materials[0]\n              .pbrMetallicRoughness.baseColorTexture!.texture!.source!.uri;\n\n      expect(uri).to.be.eql(SUNRISE_IMG_PATH);\n    });\n\n    suite('when the model changes', () => {\n      test('updates when the model changes', async () => {\n        const color =\n            element.model!.materials[0].pbrMetallicRoughness.baseColorFactor;\n\n        expect(color).to.be.eql([0.5, 0.5, 0.5, 1]);\n\n        element.src = HORSE_GLB_PATH;\n\n        await waitForEvent(element, 'scene-graph-ready');\n\n        const nextColor =\n            element.model!.materials[0].pbrMetallicRoughness.baseColorFactor;\n\n        expect(nextColor).to.be.eql([1, 1, 1, 1]);\n      });\n\n      test('allows the scene graph to be manipulated', async () => {\n        element.src = HORSE_GLB_PATH;\n\n        await waitForEvent(element, 'scene-graph-ready');\n\n        await element.model!.materials[0]\n            .pbrMetallicRoughness.setBaseColorFactor([1, 0, 0, 1]);\n\n        const color =\n            element.model!.materials[0].pbrMetallicRoughness.baseColorFactor;\n\n        expect(color).to.be.eql([1, 0, 0, 1]);\n\n        const newMaterial =\n            (element[$scene].modelContainer.children[0].children[0] as Mesh)\n                .material as MeshStandardMaterial;\n\n        expect(newMaterial.color).to.include({r: 1, g: 0, b: 0});\n      });\n    });\n\n    suite('Scene-graph gltf-to-three mappings', () => {\n      test('has a mapping for each primitive mesh', async () => {\n        element.src = RIGGEDFIGURE_GLB_PATH;\n\n        await waitForEvent(element, 'scene-graph-ready');\n\n        const gltf = (element as any)[$currentGLTF] as ModelViewerGLTFInstance;\n\n        for (const primitive of element.model![$primitivesList]) {\n          expect(gltf.correlatedSceneGraph.threeObjectMap.get(primitive.mesh))\n              .to.be.ok;\n        }\n      });\n    });\n  });\n});\n"]}