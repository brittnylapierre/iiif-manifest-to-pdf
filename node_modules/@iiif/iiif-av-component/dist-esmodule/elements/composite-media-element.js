var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { Logger } from '../helpers/logger';
var CompositeMediaElement = /** @class */ (function () {
    function CompositeMediaElement(mediaElements) {
        var _this = this;
        this.elements = [];
        this.playing = false;
        this.canvasMap = {};
        this._onPlay = [];
        this._onPause = [];
        Logger.log('Composite media element', mediaElements);
        // Add all elements.
        this.elements = mediaElements;
        var _loop_1 = function (el) {
            var canvasId = el.getCanvasId();
            this_1.canvasMap[canvasId] = this_1.canvasMap[canvasId] ? this_1.canvasMap[canvasId] : [];
            this_1.canvasMap[canvasId].push(el);
            // Attach events.
            el.element.addEventListener('play', function () {
                _this._onPlay.forEach(function (fn) { return fn(canvasId, el.element.currentTime, el); });
            });
            el.element.addEventListener('pause', function () {
                _this._onPause.forEach(function (fn) { return fn(canvasId, el.element.currentTime, el); });
            });
        };
        var this_1 = this;
        for (var _i = 0, mediaElements_1 = mediaElements; _i < mediaElements_1.length; _i++) {
            var el = mediaElements_1[_i];
            _loop_1(el);
        }
        this.activeElement = mediaElements[0];
    }
    CompositeMediaElement.prototype.syncClock = function (time) {
        Logger.group('CompositeMediaElement.syncClock');
        Logger.log("syncClock: " + time);
        Logger.log({
            fromTime: time,
            toTime: time,
            instance: this,
        });
        if (this.activeElement) {
            this.activeElement.syncClock(time);
        }
        Logger.groupEnd();
    };
    CompositeMediaElement.prototype.onPlay = function (func) {
        this._onPlay.push(func);
    };
    CompositeMediaElement.prototype.onPause = function (func) {
        this._onPause.push(func);
    };
    CompositeMediaElement.prototype.findElementInRange = function (canvasId, time) {
        if (!this.canvasMap[canvasId]) {
            return undefined;
        }
        for (var _i = 0, _a = this.canvasMap[canvasId]; _i < _a.length; _i++) {
            var el = _a[_i];
            if (el.isWithinRange(time)) {
                return el;
            }
        }
        return undefined;
    };
    CompositeMediaElement.prototype.appendTo = function ($element) {
        Logger.log('Appending...', this.elements.map(function (media) { return media.element; }));
        $element.append(this.elements.map(function (media) { return media.element; }));
    };
    CompositeMediaElement.prototype.load = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(this.elements.map(function (element) { return element.load(); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CompositeMediaElement.prototype.seekToMediaTime = function (realTime) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.activeElement) return [3 /*break*/, 3];
                        if (!this.playing) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.activeElement.play(realTime)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        this.activeElement.syncClock(realTime);
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    CompositeMediaElement.prototype.seekTo = function (canvasId, time) {
        return __awaiter(this, void 0, void 0, function () {
            var newElement;
            return __generator(this, function (_a) {
                newElement = this.findElementInRange(canvasId, time);
                Logger.log("CompositeMediaElement.seekTo(canvasId: " + canvasId + ", time: " + time + ")", {
                    canvasId: newElement ? newElement.source.canvasId : null,
                    newElement: newElement,
                });
                if (this.activeElement && newElement && newElement !== this.activeElement) {
                    // Moving track.
                    // Stop the current track.
                    this.activeElement.stop();
                    // Set new current track.
                    this.activeElement = newElement;
                }
                return [2 /*return*/, this.seekToMediaTime(time)];
            });
        });
    };
    CompositeMediaElement.prototype.play = function (canvasId, time) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.playing = true;
                        if (!(canvasId && typeof time !== 'undefined')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.seekTo(canvasId, time)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (this.activeElement) {
                            return [2 /*return*/, this.activeElement.play(time)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    CompositeMediaElement.prototype.pause = function () {
        this.playing = false;
        if (this.activeElement) {
            this.activeElement.pause();
        }
    };
    CompositeMediaElement.prototype.setVolume = function (volume) {
        for (var _i = 0, _a = this.elements; _i < _a.length; _i++) {
            var el = _a[_i];
            el.element.volume = volume;
        }
    };
    CompositeMediaElement.prototype.isBuffering = function () {
        return this.activeElement ? this.activeElement.isBuffering() : false;
    };
    return CompositeMediaElement;
}());
export { CompositeMediaElement };
//# sourceMappingURL=composite-media-element.js.map