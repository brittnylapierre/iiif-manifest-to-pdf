import { h } from "@stencil/core";
export const OrbitCamera = ({ animating, aspect, cb, controlPosition, controlTarget, dampingFactor, enabled, far, fov, graphEnabled, maxDistance, maxPolarAngle, minDistance, minPolarAngle, near, panSpeed, rotateSpeed, zoomSpeed }, _children) => (() => {
    if (graphEnabled) {
        return (h("al-a-camera", { fov: fov, near: near, aspect: aspect, "look-controls": "enabled: false", far: far, id: "mainCamera", raycaster: "objects: [data-raycastable]", "al-cursor": "rayOrigin: mouse", "al-orbit-control": `
            minDistance: ${minDistance};
            minPolarAngle: ${minPolarAngle};
            maxDistance: ${maxDistance};
            maxPolarAngle: ${maxPolarAngle};
            screenSpacePanning: true;
            rotateSpeed: ${rotateSpeed};
            zoomSpeed: ${zoomSpeed};
            enableDamping: true;
            dampingFactor: ${dampingFactor};
            controlTarget: ${controlTarget};
            controlPosition: ${controlPosition};
            enabled: ${enabled};
            animating: ${animating};
            panSpeed: ${panSpeed}
          `, "al-control-lights": true, ref: ref => cb(ref) }));
    }
    else {
        return (h("al-a-camera", { fov: fov, near: near, aspect: aspect, "look-controls": "enabled: false", far: far, id: "mainCamera", "al-orbit-control": `
            minDistance: ${minDistance};
            minPolarAngle: ${minPolarAngle};
            maxDistance: ${maxDistance};
            maxPolarAngle: ${maxPolarAngle};
            screenSpacePanning: true;
            rotateSpeed: ${rotateSpeed};
            zoomSpeed: ${zoomSpeed};
            enableDamping: true;
            dampingFactor: ${dampingFactor};
            controlTarget: ${controlTarget};
            controlPosition: ${controlPosition};
            enabled: ${enabled};
            animating: ${animating};
            panSpeed: ${panSpeed}
          `, "al-control-lights": true, ref: ref => cb(ref) }));
    }
})();
