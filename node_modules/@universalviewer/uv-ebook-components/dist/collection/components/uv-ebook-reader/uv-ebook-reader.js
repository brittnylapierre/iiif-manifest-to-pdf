import { h } from "@stencil/core";
import ePub from "@universalviewer/epubjs";
import { Direction } from "./Direction";
import { waitFor } from "../../utils/utils";
export class UvEbookReader {
    constructor() {
        this._book = null;
        this._rendition = null;
        this._href = null;
        this._bookReady = false;
        this._prevEnabled = true;
        this._mobile = false;
        this._nextEnabled = true;
        this._showDivider = false;
        this.width = "100%";
        this.height = "100%";
        this.mobileWidth = 300;
        this.minSpreadWidth = 800;
    }
    async load(url) {
        if (this._book) {
            this._book.destroy();
            this._book = null;
            this._rendition = null;
            this._bookReady = false;
            this._href = null;
        }
        this._bookPath = url;
    }
    async resize() {
        if (this._bookReady) {
            this._rendition.resize(this._viewer.clientWidth, this._viewer.clientHeight);
        }
    }
    async display(href) {
        if (this._href !== href) {
            waitFor(() => {
                return this._bookReady;
            }, () => {
                this._href = href;
                try {
                    this._rendition.display(href);
                }
                catch (e) {
                    console.warn("unable to display", href);
                }
            });
        }
    }
    async getBook() {
        if (!this._bookReady)
            throw "Book is not ready yet.";
        return this._book;
    }
    handleKeyDown(ev) {
        switch (ev.key) {
            case "ArrowLeft":
                this._prev();
                break;
            case "ArrowRight":
                this._next();
                break;
        }
    }
    _prev() {
        if (!this._bookReady) {
            return;
        }
        if (this._book.package.metadata.direction === Direction.RTL) {
            this._rendition.next();
        }
        else {
            this._rendition.prev();
        }
    }
    _next() {
        if (!this._bookReady) {
            return;
        }
        if (this._book.package.metadata.direction === Direction.RTL) {
            this._rendition.prev();
        }
        else {
            this._rendition.next();
        }
    }
    _prevButtonClickedHandler(e) {
        this._prev();
        e.preventDefault();
    }
    _nextButtonClickedHandler(e) {
        this._next();
        e.preventDefault();
    }
    render() {
        return (h("div", { id: "main" },
            h("div", { id: "titlebar" }),
            h("div", { id: "divider", class: {
                    show: this._bookReady && this._showDivider
                } }),
            h("div", { id: "prev", class: {
                    arrow: true,
                    disabled: !this._prevEnabled && !this._bookReady,
                    small: this._mobile
                }, onClick: e => this._prevButtonClickedHandler(e) }, "<"),
            h("div", { id: "viewer", class: {
                    twoup: this._showDivider
                }, ref: el => (this._viewer = el) }),
            this._nextEnabled ? (h("div", { id: "next", class: {
                    arrow: true,
                    disabled: !this._nextEnabled && !this._bookReady,
                    small: this._mobile
                }, onClick: e => this._nextButtonClickedHandler(e) }, ">")) : null,
            !this._bookReady && (h("div", { id: "spinner" },
                h("div", { class: "square" })))));
    }
    componentDidUpdate() {
        if (this._bookPath && !this._rendition) {
            this._book = ePub(this._bookPath);
            this._rendition = this._book.renderTo("viewer", {
                width: this.width,
                height: this.height,
                minSpreadWidth: this.minSpreadWidth
            });
            this._rendition.display();
            this._rendition.on("attached", () => {
                this.renditionAttached.emit();
            });
            this._rendition.on("layout", () => {
                if (this._viewer.clientWidth >= this.minSpreadWidth) {
                    this._showDivider = true;
                }
                else {
                    this._showDivider = false;
                }
                this._mobile = this._viewer.clientWidth <= this.mobileWidth;
            });
            this._rendition.on("relocated", location => {
                this._prevEnabled = !location.atStart;
                this._nextEnabled = !location.atEnd;
                this.relocated.emit(location);
            });
            this._book.ready.then(() => {
                this._bookReady = true;
                this.bookReady.emit(this._bookPath);
            });
            this._book.loaded.metadata.then(metadata => {
                this.loadedBookMetadata.emit(metadata);
            });
            this._book.loaded.navigation.then(navigation => {
                this.loadedNavigation.emit(navigation);
            });
        }
    }
    static get is() { return "uv-ebook-reader"; }
    static get originalStyleUrls() { return {
        "$": ["uv-ebook-reader.css"]
    }; }
    static get styleUrls() { return {
        "$": ["uv-ebook-reader.css"]
    }; }
    static get assetsDirs() { return ["assets"]; }
    static get properties() { return {
        "width": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "width",
            "reflect": false,
            "defaultValue": "\"100%\""
        },
        "height": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "height",
            "reflect": false,
            "defaultValue": "\"100%\""
        },
        "mobileWidth": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "mobile-width",
            "reflect": false,
            "defaultValue": "300"
        },
        "minSpreadWidth": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "min-spread-width",
            "reflect": false,
            "defaultValue": "800"
        }
    }; }
    static get states() { return {
        "_bookPath": {},
        "_bookReady": {},
        "_prevEnabled": {},
        "_mobile": {},
        "_nextEnabled": {},
        "_showDivider": {}
    }; }
    static get events() { return [{
            "method": "bookReady",
            "name": "bookReady",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "loadedBookMetadata",
            "name": "loadedBookMetadata",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "loadedNavigation",
            "name": "loadedNavigation",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "relocated",
            "name": "relocated",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "renditionAttached",
            "name": "renditionAttached",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "load": {
            "complexType": {
                "signature": "(url: string) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        },
        "resize": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        },
        "display": {
            "complexType": {
                "signature": "(href: string) => Promise<void>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        },
        "getBook": {
            "complexType": {
                "signature": "() => Promise<any>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<any>"
            },
            "docs": {
                "text": "",
                "tags": []
            }
        }
    }; }
    static get elementRef() { return "el"; }
    static get listeners() { return [{
            "name": "keydown",
            "method": "handleKeyDown",
            "target": "window",
            "capture": false,
            "passive": false
        }]; }
}
