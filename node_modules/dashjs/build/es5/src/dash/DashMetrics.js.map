{"version":3,"sources":["../../../../src/dash/DashMetrics.js"],"names":[],"mappings":"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","file":"DashMetrics.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport {HTTPRequest} from '../streaming/vo/metrics/HTTPRequest';\nimport FactoryMaker from '../core/FactoryMaker';\nimport MetricsConstants from '../streaming/constants/MetricsConstants';\nimport { round10 } from 'round10';\n\n/**\n * @module DashMetrics\n * @param {object} config configuration passed to DashMetrics\n */\nfunction DashMetrics(config) {\n\n    config = config || {};\n    let instance;\n    let dashManifestModel = config.dashManifestModel;\n    let manifestModel = config.manifestModel;\n\n    function getBandwidthForRepresentation(representationId, periodId) {\n        let representation;\n        const manifest = manifestModel.getValue();\n        let period = manifest.Period_asArray[periodId];\n\n        representation = findRepresentation(period, representationId);\n\n        if (representation === null) {\n            return null;\n        }\n\n        return representation.bandwidth;\n    }\n\n\n    /**\n     *\n     * @param {string} representationId\n     * @param {number} periodIdx\n     * @returns {*}\n     */\n    function getIndexForRepresentation(representationId, periodIdx) {\n        let representationIndex;\n        const manifest = manifestModel.getValue();\n        let period = manifest.Period_asArray[periodIdx];\n\n        representationIndex = findRepresentationIndex(period, representationId);\n        return representationIndex;\n    }\n\n    /**\n     * This method returns the current max index based on what is defined in the MPD.\n     *\n     * @param {string} bufferType - String 'audio' or 'video',\n     * @param {number} periodIdx - Make sure this is the period index not id\n     * @return {number}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getMaxIndexForBufferType(bufferType, periodIdx) {\n        let maxIndex;\n        const manifest = manifestModel.getValue();\n        let period = manifest.Period_asArray[periodIdx];\n\n        maxIndex = findMaxBufferIndex(period, bufferType);\n        return maxIndex;\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentRepresentationSwitch(metrics) {\n        return getCurrent(metrics, MetricsConstants.TRACK_SWITCH);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestBufferLevelVO(metrics) {\n        return getCurrent(metrics, MetricsConstants.BUFFER_LEVEL);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {number}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentBufferLevel(metrics) {\n        const vo = getLatestBufferLevelVO(metrics);\n\n        if (vo) {\n            return round10(vo.level / 1000, -3);\n        }\n\n        return 0;\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {null|*|vo}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getRequestsQueue(metrics) {\n        return metrics ? metrics.RequestsQueue : null;\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentHttpRequest(metrics) {\n        if (!metrics) {\n            return null;\n        }\n\n        const httpList = metrics.HttpList;\n        let currentHttpList = null;\n\n        let httpListLength,\n            httpListLastIndex;\n\n        if (!httpList || httpList.length <= 0) {\n            return null;\n        }\n\n        httpListLength = httpList.length;\n        httpListLastIndex = httpListLength - 1;\n\n        while (httpListLastIndex >= 0) {\n            if (httpList[httpListLastIndex].responsecode) {\n                currentHttpList = httpList[httpListLastIndex];\n                break;\n            }\n            httpListLastIndex--;\n        }\n        return currentHttpList;\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getHttpRequests(metrics) {\n        if (!metrics) {\n            return [];\n        }\n\n        return !!metrics.HttpList ? metrics.HttpList : [];\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @param {string} metricName\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrent(metrics, metricName) {\n        if (!metrics) {\n            return null;\n        }\n\n        const list = metrics[metricName];\n\n        if (!list) {\n            return null;\n        }\n\n        const length = list.length;\n\n        if (length <= 0) {\n            return null;\n        }\n\n        return list[length - 1];\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentDroppedFrames(metrics) {\n        return getCurrent(metrics, MetricsConstants.DROPPED_FRAMES);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentSchedulingInfo(metrics) {\n        return getCurrent(metrics, MetricsConstants.SCHEDULING_INFO);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentManifestUpdate(metrics) {\n        return getCurrent(metrics, MetricsConstants.MANIFEST_UPDATE);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentDVRInfo(metrics) {\n        return getCurrent(metrics, MetricsConstants.DVR_INFO);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @param {string} id\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestMPDRequestHeaderValueByID(metrics, id) {\n        let headers = {};\n        let httpRequestList,\n            httpRequest,\n            i;\n\n        httpRequestList = getHttpRequests(metrics);\n\n        for (i = httpRequestList.length - 1; i >= 0; i--) {\n            httpRequest = httpRequestList[i];\n\n            if (httpRequest.type === HTTPRequest.MPD_TYPE) {\n                headers = parseResponseHeaders(httpRequest._responseHeaders);\n                break;\n            }\n        }\n\n        return headers[id] === undefined ? null :  headers[id];\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @param {string} id\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestFragmentRequestHeaderValueByID(metrics, id) {\n        let headers = {};\n        let httpRequest = getCurrentHttpRequest(metrics);\n        if (httpRequest) {\n            headers = parseResponseHeaders(httpRequest._responseHeaders);\n        }\n        return headers[id] === undefined ? null :  headers[id];\n    }\n\n    function parseResponseHeaders(headerStr) {\n        let headers = {};\n        if (!headerStr) {\n            return headers;\n        }\n\n        // Trim headerStr to fix a MS Edge bug with xhr.getAllResponseHeaders method\n        // which send a string starting with a \"\\n\" character\n        let headerPairs = headerStr.trim().split('\\u000d\\u000a');\n        for (let i = 0, ilen = headerPairs.length; i < ilen; i++) {\n            let headerPair = headerPairs[i];\n            let index = headerPair.indexOf('\\u003a\\u0020');\n            if (index > 0) {\n                headers[headerPair.substring(0, index)] = headerPair.substring(index + 2);\n            }\n        }\n        return headers;\n    }\n\n    function findRepresentationIndex(period, representationId) {\n        const index = findRepresentation(period, representationId, true);\n\n        if (index !== null) {\n            return index;\n        }\n\n        return -1;\n    }\n\n    function findRepresentation(period, representationId, returnIndex) {\n        let adaptationSet,\n            adaptationSetArray,\n            representation,\n            representationArray,\n            adaptationSetArrayIndex,\n            representationArrayIndex;\n\n        if (period) {\n            adaptationSetArray = period.AdaptationSet_asArray;\n            for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {\n                adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\n                representationArray = adaptationSet.Representation_asArray;\n                for (representationArrayIndex = 0; representationArrayIndex < representationArray.length; representationArrayIndex = representationArrayIndex + 1) {\n                    representation = representationArray[representationArrayIndex];\n                    if (representationId === representation.id) {\n                        if (returnIndex) {\n                            return representationArrayIndex;\n                        } else {\n                            return representation;\n                        }\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function adaptationIsType(adaptation, bufferType) {\n        return dashManifestModel.getIsTypeOf(adaptation, bufferType);\n    }\n\n    function findMaxBufferIndex(period, bufferType) {\n        let adaptationSet,\n            adaptationSetArray,\n            representationArray,\n            adaptationSetArrayIndex;\n\n        if (!period || !bufferType) return -1;\n\n        adaptationSetArray = period.AdaptationSet_asArray;\n        for (adaptationSetArrayIndex = 0; adaptationSetArrayIndex < adaptationSetArray.length; adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {\n            adaptationSet = adaptationSetArray[adaptationSetArrayIndex];\n            representationArray = adaptationSet.Representation_asArray;\n            if (adaptationIsType(adaptationSet, bufferType)) {\n                return representationArray.length;\n            }\n        }\n\n        return -1;\n    }\n\n    instance = {\n        getBandwidthForRepresentation: getBandwidthForRepresentation,\n        getIndexForRepresentation: getIndexForRepresentation,\n        getMaxIndexForBufferType: getMaxIndexForBufferType,\n        getCurrentRepresentationSwitch: getCurrentRepresentationSwitch,\n        getLatestBufferLevelVO: getLatestBufferLevelVO,\n        getCurrentBufferLevel: getCurrentBufferLevel,\n        getCurrentHttpRequest: getCurrentHttpRequest,\n        getHttpRequests: getHttpRequests,\n        getCurrentDroppedFrames: getCurrentDroppedFrames,\n        getCurrentSchedulingInfo: getCurrentSchedulingInfo,\n        getCurrentDVRInfo: getCurrentDVRInfo,\n        getCurrentManifestUpdate: getCurrentManifestUpdate,\n        getLatestFragmentRequestHeaderValueByID: getLatestFragmentRequestHeaderValueByID,\n        getLatestMPDRequestHeaderValueByID: getLatestMPDRequestHeaderValueByID,\n        getRequestsQueue: getRequestsQueue\n    };\n\n    return instance;\n}\n\nDashMetrics.__dashjs_factory_name = 'DashMetrics';\nexport default FactoryMaker.getSingletonFactory(DashMetrics);\n"]}