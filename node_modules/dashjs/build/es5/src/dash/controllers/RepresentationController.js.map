{"version":3,"sources":["../../../../../src/dash/controllers/RepresentationController.js"],"names":[],"mappings":"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","file":"RepresentationController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../../streaming/constants/Constants';\nimport DashConstants from '../constants/DashConstants';\nimport DashJSError from '../../streaming/vo/DashJSError';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Representation from '../vo/Representation';\n\nfunction RepresentationController() {\n\n    const SEGMENTS_UPDATE_FAILED_ERROR_CODE = 1;\n\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n\n    let instance,\n        realAdaptation,\n        realAdaptationIndex,\n        updating,\n        voAvailableRepresentations,\n        currentVoRepresentation,\n        abrController,\n        indexHandler,\n        playbackController,\n        metricsModel,\n        domStorage,\n        timelineConverter,\n        dashManifestModel,\n        dashMetrics,\n        streamProcessor,\n        manifestModel;\n\n    function setup() {\n        resetInitialSettings();\n\n        eventBus.on(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\n        eventBus.on(Events.REPRESENTATION_UPDATED, onRepresentationUpdated, instance);\n        eventBus.on(Events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);\n        eventBus.on(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\n        eventBus.on(Events.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);\n    }\n\n    function setConfig(config) {\n        // allow the abrController created in setup to be overidden\n        if (config.abrController) {\n            abrController = config.abrController;\n        }\n        if (config.domStorage) {\n            domStorage = config.domStorage;\n        }\n        if (config.metricsModel) {\n            metricsModel = config.metricsModel;\n        }\n        if (config.dashMetrics) {\n            dashMetrics = config.dashMetrics;\n        }\n        if (config.dashManifestModel) {\n            dashManifestModel = config.dashManifestModel;\n        }\n        if (config.playbackController) {\n            playbackController = config.playbackController;\n        }\n        if (config.timelineConverter) {\n            timelineConverter = config.timelineConverter;\n        }\n        if (config.manifestModel) {\n            manifestModel = config.manifestModel;\n        }\n        if (config.streamProcessor) {\n            streamProcessor = config.streamProcessor;\n        }\n    }\n\n    function initialize() {\n        indexHandler = streamProcessor.getIndexHandler();\n    }\n\n    function getStreamProcessor() {\n        return streamProcessor;\n    }\n\n    function getData() {\n        return realAdaptation;\n    }\n\n    function getDataIndex() {\n        return realAdaptationIndex;\n    }\n\n    function isUpdating() {\n        return updating;\n    }\n\n    function getCurrentRepresentation() {\n        return currentVoRepresentation;\n    }\n\n    function resetInitialSettings() {\n        realAdaptation = null;\n        realAdaptationIndex = -1;\n        updating = true;\n        voAvailableRepresentations = [];\n        abrController = null;\n        playbackController = null;\n        metricsModel = null;\n        domStorage = null;\n        timelineConverter = null;\n        dashManifestModel = null;\n        dashMetrics = null;\n    }\n\n    function reset() {\n\n        eventBus.off(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\n        eventBus.off(Events.REPRESENTATION_UPDATED, onRepresentationUpdated, instance);\n        eventBus.off(Events.WALLCLOCK_TIME_UPDATED, onWallclockTimeUpdated, instance);\n        eventBus.off(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\n        eventBus.off(Events.MANIFEST_VALIDITY_CHANGED, onManifestValidityChanged, instance);\n\n        resetInitialSettings();\n    }\n\n    function updateData(newRealAdaptation, voAdaptation, type) {\n        const streamInfo = streamProcessor.getStreamInfo();\n        const maxQuality = abrController.getTopQualityIndexFor(type, streamInfo.id);\n        const minIdx = abrController.getMinAllowedIndexFor(type);\n\n        let quality,\n            averageThroughput;\n        let bitrate = null;\n\n        updating = true;\n        eventBus.trigger(Events.DATA_UPDATE_STARTED, {sender: this});\n\n        voAvailableRepresentations = updateRepresentations(voAdaptation);\n\n        if ((realAdaptation === null || (realAdaptation.id != newRealAdaptation.id)) && type !== Constants.FRAGMENTED_TEXT) {\n            averageThroughput = abrController.getThroughputHistory().getAverageThroughput(type);\n            bitrate = averageThroughput || abrController.getInitialBitrateFor(type, streamInfo);\n            quality = abrController.getQualityForBitrate(streamProcessor.getMediaInfo(), bitrate);\n        } else {\n            quality = abrController.getQualityFor(type, streamInfo);\n        }\n\n        if (minIdx !== undefined && quality < minIdx) {\n            quality = minIdx;\n        }\n        if (quality > maxQuality) {\n            quality = maxQuality;\n        }\n\n        currentVoRepresentation = getRepresentationForQuality(quality);\n        realAdaptation = newRealAdaptation;\n\n        if (type !== Constants.VIDEO && type !== Constants.AUDIO && type !== Constants.FRAGMENTED_TEXT) {\n            updating = false;\n            eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: this, data: realAdaptation, currentRepresentation: currentVoRepresentation});\n            return;\n        }\n\n        for (let i = 0; i < voAvailableRepresentations.length; i++) {\n            indexHandler.updateRepresentation(voAvailableRepresentations[i], true);\n        }\n    }\n\n    function addRepresentationSwitch() {\n        let now = new Date();\n        let currentRepresentation = getCurrentRepresentation();\n        let currentVideoTimeMs = playbackController.getTime() * 1000;\n\n        metricsModel.addRepresentationSwitch(currentRepresentation.adaptation.type, now, currentVideoTimeMs, currentRepresentation.id);\n    }\n\n    function addDVRMetric() {\n        let streamInfo = streamProcessor.getStreamInfo();\n        let manifestInfo = streamInfo ? streamInfo.manifestInfo : null;\n        let isDynamic = manifestInfo ? manifestInfo.isDynamic : null;\n        let range = timelineConverter.calcSegmentAvailabilityRange(currentVoRepresentation, isDynamic);\n        metricsModel.addDVRInfo(streamProcessor.getType(), playbackController.getTime(), manifestInfo, range);\n    }\n\n    function getRepresentationForQuality(quality) {\n        return voAvailableRepresentations[quality];\n    }\n\n    function getQualityForRepresentation(voRepresentation) {\n        return voAvailableRepresentations.indexOf(voRepresentation);\n    }\n\n    function isAllRepresentationsUpdated() {\n        for (let i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {\n            let segmentInfoType = voAvailableRepresentations[i].segmentInfoType;\n            if (voAvailableRepresentations[i].segmentAvailabilityRange === null || !Representation.hasInitialization(voAvailableRepresentations[i]) ||\n                ((segmentInfoType === DashConstants.SEGMENT_BASE || segmentInfoType === DashConstants.BASE_URL) && !voAvailableRepresentations[i].segments)\n            ) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function updateRepresentations(voAdaptation) {\n        let voReps;\n\n        realAdaptationIndex = dashManifestModel.getIndexForAdaptation(realAdaptation, voAdaptation.period.mpd.manifest, voAdaptation.period.index);\n        voReps = dashManifestModel.getRepresentationsForAdaptation(voAdaptation);\n\n        return voReps;\n    }\n\n    function updateAvailabilityWindow(isDynamic) {\n        let voRepresentation;\n\n        for (let i = 0, ln = voAvailableRepresentations.length; i < ln; i++) {\n            voRepresentation = voAvailableRepresentations[i];\n            voRepresentation.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(voRepresentation, isDynamic);\n        }\n    }\n\n    function resetAvailabilityWindow() {\n        voAvailableRepresentations.forEach(rep => {\n            rep.segmentAvailabilityRange = null;\n        });\n    }\n\n    function postponeUpdate(postponeTimePeriod) {\n        let delay = postponeTimePeriod;\n        let update = function () {\n            if (isUpdating()) return;\n\n            updating = true;\n            eventBus.trigger(Events.DATA_UPDATE_STARTED, { sender: instance });\n\n            // clear the segmentAvailabilityRange for all reps.\n            // this ensures all are updated before the live edge search starts\n            resetAvailabilityWindow();\n\n            for (let i = 0; i < voAvailableRepresentations.length; i++) {\n                indexHandler.updateRepresentation(voAvailableRepresentations[i], true);\n            }\n        };\n\n        updating = false;\n        eventBus.trigger(Events.AST_IN_FUTURE, { delay: delay });\n        setTimeout(update, delay);\n    }\n\n    function onRepresentationUpdated(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor || !isUpdating()) return;\n\n        let r = e.representation;\n        let streamMetrics = metricsModel.getMetricsFor(Constants.STREAM);\n        var metrics = metricsModel.getMetricsFor(getCurrentRepresentation().adaptation.type);\n        let manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(streamMetrics);\n        let alreadyAdded = false;\n        let postponeTimePeriod = 0;\n        let repInfo,\n            err,\n            repSwitch;\n\n        if (r.adaptation.period.mpd.manifest.type === DashConstants.DYNAMIC && !r.adaptation.period.mpd.manifest.ignorePostponeTimePeriod)\n        {\n            let segmentAvailabilityTimePeriod = r.segmentAvailabilityRange.end - r.segmentAvailabilityRange.start;\n            // We must put things to sleep unless till e.g. the startTime calculation in ScheduleController.onLiveEdgeSearchCompleted fall after the segmentAvailabilityRange.start\n            let liveDelay = playbackController.computeLiveDelay(currentVoRepresentation.segmentDuration, streamProcessor.getStreamInfo().manifestInfo.DVRWindowSize);\n            postponeTimePeriod = (liveDelay - segmentAvailabilityTimePeriod) * 1000;\n        }\n\n        if (postponeTimePeriod > 0) {\n            addDVRMetric();\n            postponeUpdate(postponeTimePeriod);\n            err = new DashJSError(SEGMENTS_UPDATE_FAILED_ERROR_CODE, 'Segments update failed', null);\n            eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: this, data: realAdaptation, currentRepresentation: currentVoRepresentation, error: err});\n\n            return;\n        }\n\n        if (manifestUpdateInfo) {\n            for (let i = 0; i < manifestUpdateInfo.representationInfo.length; i++) {\n                repInfo = manifestUpdateInfo.representationInfo[i];\n                if (repInfo.index === r.index && repInfo.mediaType === streamProcessor.getType()) {\n                    alreadyAdded = true;\n                    break;\n                }\n            }\n\n            if (!alreadyAdded) {\n                metricsModel.addManifestUpdateRepresentationInfo(manifestUpdateInfo, r.id, r.index, r.adaptation.period.index,\n                        streamProcessor.getType(),r.presentationTimeOffset, r.startNumber, r.segmentInfoType);\n            }\n        }\n\n        if (isAllRepresentationsUpdated()) {\n            updating = false;\n            abrController.setPlaybackQuality(streamProcessor.getType(), streamProcessor.getStreamInfo(), getQualityForRepresentation(currentVoRepresentation));\n            metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {latency: currentVoRepresentation.segmentAvailabilityRange.end - playbackController.getTime()});\n\n            repSwitch = dashMetrics.getCurrentRepresentationSwitch(metrics);\n\n            if (!repSwitch) {\n                addRepresentationSwitch();\n            }\n\n            eventBus.trigger(Events.DATA_UPDATE_COMPLETED, {sender: this, data: realAdaptation, currentRepresentation: currentVoRepresentation});\n        }\n    }\n\n    function onWallclockTimeUpdated(e) {\n        if (e.isDynamic) {\n            updateAvailabilityWindow(e.isDynamic);\n        }\n    }\n\n    function onBufferLevelUpdated(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) return;\n        let manifest = manifestModel.getValue();\n        if (!manifest.doNotUpdateDVRWindowOnBufferUpdated) {\n            addDVRMetric();\n        }\n    }\n\n    function onQualityChanged(e) {\n        if (e.mediaType !== streamProcessor.getType() || streamProcessor.getStreamInfo().id !== e.streamInfo.id) return;\n\n        if (e.oldQuality !== e.newQuality) {\n            currentVoRepresentation = getRepresentationForQuality(e.newQuality);\n            const bitrate = abrController.getThroughputHistory().getAverageThroughput(e.mediaType);\n            if (!isNaN(bitrate)) {\n                domStorage.setSavedBitrateSettings(e.mediaType, bitrate);\n            }\n            addRepresentationSwitch();\n        }\n    }\n\n    function onManifestValidityChanged(e) {\n        if (e.newDuration) {\n            const representation = getCurrentRepresentation();\n            if (representation && representation.adaptation.period) {\n                const period = representation.adaptation.period;\n                period.duration = e.newDuration;\n            }\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        setConfig: setConfig,\n        getData: getData,\n        getDataIndex: getDataIndex,\n        isUpdating: isUpdating,\n        updateData: updateData,\n        getStreamProcessor: getStreamProcessor,\n        getCurrentRepresentation: getCurrentRepresentation,\n        getRepresentationForQuality: getRepresentationForQuality,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nRepresentationController.__dashjs_factory_name = 'RepresentationController';\nexport default FactoryMaker.getClassFactory(RepresentationController);\n"]}