{"version":3,"sources":["../../../../../src/dash/parser/DashParser.js"],"names":[],"mappings":"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","file":"DashParser.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport ObjectIron from '../../../externals/objectiron';\nimport X2JS from '../../../externals/xml2json';\nimport StringMatcher from './matchers/StringMatcher';\nimport DurationMatcher from './matchers/DurationMatcher';\nimport DateTimeMatcher from './matchers/DateTimeMatcher';\nimport NumericMatcher from './matchers/NumericMatcher';\nimport RepresentationBaseValuesMap from './maps/RepresentationBaseValuesMap';\nimport SegmentValuesMap from './maps/SegmentValuesMap';\n\nfunction DashParser(config) {\n\n    config = config || {};\n    const context = this.context;\n    const log = Debug(context).getInstance().log;\n    const errorHandler = config.errorHandler;\n\n    let instance,\n        matchers,\n        converter,\n        objectIron;\n\n    function setup() {\n        matchers = [\n            new DurationMatcher(),\n            new DateTimeMatcher(),\n            new NumericMatcher(),\n            new StringMatcher()   // last in list to take precedence over NumericMatcher\n        ];\n\n        converter = new X2JS({\n            escapeMode:         false,\n            attributePrefix:    '',\n            arrayAccessForm:    'property',\n            emptyNodeForm:      'object',\n            stripWhitespaces:   false,\n            enableToStringFunc: false,\n            ignoreRoot:         true,\n            matchers:           matchers\n        });\n\n        objectIron = new ObjectIron([\n            new RepresentationBaseValuesMap(),\n            new SegmentValuesMap()\n        ]);\n    }\n\n    function checkConfig() {\n        if (!errorHandler || !errorHandler.hasOwnProperty('manifestError')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getMatchers() {\n        return matchers;\n    }\n\n    function getIron() {\n        return objectIron;\n    }\n\n    function parse(data) {\n        let manifest;\n\n        checkConfig();\n\n        try {\n            const startTime = window.performance.now();\n\n            manifest = converter.xml_str2json(data);\n\n            if (!manifest) {\n                throw new Error('parser error');\n            }\n\n            const jsonTime = window.performance.now();\n\n            objectIron.run(manifest);\n\n            const ironedTime = window.performance.now();\n\n            log('Parsing complete: ( xml2json: ' + (jsonTime - startTime).toPrecision(3) + 'ms, objectiron: ' + (ironedTime - jsonTime).toPrecision(3) + 'ms, total: ' + ((ironedTime - startTime) / 1000).toPrecision(3) + 's)');\n        } catch (err) {\n            errorHandler.manifestError('parsing the manifest failed', 'parse', data, err);\n            return null;\n        }\n\n        return manifest;\n    }\n\n    instance = {\n        parse: parse,\n        getMatchers: getMatchers,\n        getIron: getIron\n    };\n\n    setup();\n\n    return instance;\n}\n\nDashParser.__dashjs_factory_name = 'DashParser';\nexport default FactoryMaker.getClassFactory(DashParser);\n"]}