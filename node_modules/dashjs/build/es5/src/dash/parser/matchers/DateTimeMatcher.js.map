{"version":3,"sources":["../../../../../../src/dash/parser/matchers/DateTimeMatcher.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;42CAiCwB,eAAe,0DAEvC,IAAM,cAAc,CAAG,EAAE,CAAC,AAC1B,IAAM,eAAe,CAAG,EAAE,CAAC,AAC3B,IAAM,uBAAuB,CAAG,IAAI,CAAC,AAErC,IAAM,aAAa,CAAG,uHAAuH,CAAC,IAExI,eAAe,mCAAf,eAAe,eACN,SADT,eAAe,EACH,sBADZ,eAAe,EAEb,2BAFF,eAAe,0CAGT,SAAA,IAAI,SAAI,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAA,CACtC,SAAA,GAAG,CAAI,CACH,IAAM,KAAK,CAAG,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,AACtC,IAAI,OAAO,UAAA,CAAC;;;AAKZ,OAAO,GAAG,IAAI,CAAC,GAAG,CACd,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,EAAE,CAAC,CACtB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,EAAE,CAAC,GAAG,CAAC;AAC1B,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,EAAE,CAAC,CACtB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,EAAE,CAAC,CACtB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,EAAE,CAAC,CACrB,KAAK,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,EAAE,CAAC,IAAI,CAAC,CACxC,AAAC,KAAK,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,uBAAuB,IAAK,CAAC,CAAC,CAAC;AAGvE,GAAI,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC,CAAE,CACvB,IAAM,cAAc,CAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,EAAE,CAAC,GAAG,eAAe,GAAG,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAE,EAAE,CAAC,CAAC,AAC1F,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,CAAG,CAAC,CAAC,CAAG,CAAC,CAAC,CAAA,GAAI,cAAc,GAAG,cAAc,GAAG,uBAAuB,CAAC,CACvG,AAED,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAC5B,EACH,CACL,OA7BC,eAAe,mDAgCN,eAAe","file":"DateTimeMatcher.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc matches and converts xs:datetime to Date\n */\nimport BaseMatcher from './BaseMatcher';\n\nconst SECONDS_IN_MIN = 60;\nconst MINUTES_IN_HOUR = 60;\nconst MILLISECONDS_IN_SECONDS = 1000;\n\nconst datetimeRegex = /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\\.[0-9]*)?)?(?:([+-])([0-9]{2})(?::?)([0-9]{2}))?/;\n\nclass DateTimeMatcher extends BaseMatcher {\n    constructor() {\n        super(\n            attr => datetimeRegex.test(attr.value),\n            str => {\n                const match = datetimeRegex.exec(str);\n                let utcDate;\n\n                // If the string does not contain a timezone offset different browsers can interpret it either\n                // as UTC or as a local time so we have to parse the string manually to normalize the given date value for\n                // all browsers\n                utcDate = Date.UTC(\n                    parseInt(match[1], 10),\n                    parseInt(match[2], 10) - 1, // months start from zero\n                    parseInt(match[3], 10),\n                    parseInt(match[4], 10),\n                    parseInt(match[5], 10),\n                    (match[6] && parseInt(match[6], 10) || 0),\n                    (match[7] && parseFloat(match[7]) * MILLISECONDS_IN_SECONDS) || 0);\n\n                // If the date has timezone offset take it into account as well\n                if (match[9] && match[10]) {\n                    const timezoneOffset = parseInt(match[9], 10) * MINUTES_IN_HOUR + parseInt(match[10], 10);\n                    utcDate += (match[8] === '+' ? -1 : +1) * timezoneOffset * SECONDS_IN_MIN * MILLISECONDS_IN_SECONDS;\n                }\n\n                return new Date(utcDate);\n            }\n        );\n    }\n}\n\nexport default DateTimeMatcher;\n"]}