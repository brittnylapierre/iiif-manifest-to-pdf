{"version":3,"sources":["../../../../../src/dash/utils/FragmentedTextBoxParser.js"],"names":[],"mappings":"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","file":"FragmentedTextBoxParser.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\n\nfunction FragmentedTextBoxParser() {\n\n    let instance,\n        boxParser;\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.boxParser) {\n            boxParser = config.boxParser;\n        }\n    }\n\n    function getSamplesInfo(ab) {\n        if (!boxParser) {\n            throw new Error('boxParser is undefined');\n        }\n\n        if (!ab) {\n            return {sampleList: [], lastSequenceNumber: NaN, totalDuration: NaN, numSequences: NaN};\n        }\n        let isoFile = boxParser.parse(ab);\n        // zero or more moofs\n        let moofBoxes = isoFile.getBoxes('moof');\n        // exactly one mfhd per moof\n        let mfhdBoxes = isoFile.getBoxes('mfhd');\n\n        let sampleDuration,\n            sampleCompositionTimeOffset,\n            sampleCount,\n            sampleSize,\n            sampleDts,\n            sampleList,\n            sample,\n            i, j, k, l, m, n,\n            dataOffset,\n            lastSequenceNumber,\n            numSequences,\n            totalDuration;\n\n        numSequences = isoFile.getBoxes('moof').length;\n        lastSequenceNumber = mfhdBoxes[mfhdBoxes.length - 1].sequence_number;\n        sampleCount = 0;\n\n        sampleList = [];\n        let subsIndex = -1;\n        let nextSubsSample = -1;\n        for (l = 0; l < moofBoxes.length; l++) {\n            let moofBox = moofBoxes[l];\n            // zero or more trafs per moof\n            let trafBoxes = moofBox.getChildBoxes('traf');\n            for (j = 0; j < trafBoxes.length; j++) {\n                let trafBox = trafBoxes[j];\n                // exactly one tfhd per traf\n                let tfhdBox = trafBox.getChildBox('tfhd');\n                // zero or one tfdt per traf\n                let tfdtBox = trafBox.getChildBox('tfdt');\n                sampleDts = tfdtBox.baseMediaDecodeTime;\n                // zero or more truns per traf\n                let trunBoxes = trafBox.getChildBoxes('trun');\n                // zero or more subs per traf\n                let subsBoxes = trafBox.getChildBoxes('subs');\n                for (k = 0; k < trunBoxes.length; k++) {\n                    let trunBox = trunBoxes[k];\n                    sampleCount = trunBox.sample_count;\n                    dataOffset = (tfhdBox.base_data_offset || 0) + (trunBox.data_offset || 0);\n\n                    for (i = 0; i < sampleCount; i++) {\n                        sample = trunBox.samples[i];\n                        sampleDuration = (sample.sample_duration !== undefined) ? sample.sample_duration : tfhdBox.default_sample_duration;\n                        sampleSize = (sample.sample_size !== undefined) ? sample.sample_size : tfhdBox.default_sample_size;\n                        sampleCompositionTimeOffset = (sample.sample_composition_time_offset !== undefined) ? sample.sample_composition_time_offset : 0;\n                        let sampleData = {\n                            'dts': sampleDts,\n                            'cts': (sampleDts + sampleCompositionTimeOffset),\n                            'duration': sampleDuration,\n                            'offset': moofBox.offset + dataOffset,\n                            'size': sampleSize,\n                            'subSizes': [sampleSize]\n                        };\n                        if (subsBoxes) {\n                            for (m = 0; m < subsBoxes.length; m++) {\n                                let subsBox = subsBoxes[m];\n                                if (subsIndex < subsBox.entry_count && i > nextSubsSample) {\n                                    subsIndex++;\n                                    nextSubsSample += subsBox.entries[subsIndex].sample_delta;\n                                }\n                                if (i == nextSubsSample) {\n                                    sampleData.subSizes = [];\n                                    let entry = subsBox.entries[subsIndex];\n                                    for (n = 0; n < entry.subsample_count; n++) {\n                                        sampleData.subSizes.push(entry.subsamples[n].subsample_size);\n                                    }\n                                }\n                            }\n                        }\n                        sampleList.push(sampleData);\n                        dataOffset += sampleSize;\n                        sampleDts += sampleDuration;\n                    }\n                }\n                totalDuration = sampleDts - tfdtBox.baseMediaDecodeTime;\n            }\n        }\n        return {sampleList: sampleList, lastSequenceNumber: lastSequenceNumber, totalDuration: totalDuration, numSequences: numSequences};\n    }\n\n    function getMediaTimescaleFromMoov(ab) {\n        if (!boxParser) {\n            throw new Error('boxParser is undefined');\n        }\n\n        let isoFile = boxParser.parse(ab);\n        let mdhdBox = isoFile ? isoFile.getBox('mdhd') : undefined;\n\n        return mdhdBox ? mdhdBox.timescale : NaN;\n    }\n\n    instance = {\n        getSamplesInfo: getSamplesInfo,\n        getMediaTimescaleFromMoov: getMediaTimescaleFromMoov,\n        setConfig: setConfig\n    };\n\n    return instance;\n}\n\nFragmentedTextBoxParser.__dashjs_factory_name = 'FragmentedTextBoxParser';\nexport default FactoryMaker.getSingletonFactory(FragmentedTextBoxParser);\n"]}