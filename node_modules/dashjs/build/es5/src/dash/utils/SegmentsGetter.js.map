{"version":3,"sources":["../../../../../src/dash/utils/SegmentsGetter.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;oMA8B0B,4BAA4B,6GAC7B,yBAAyB,uGACf,0BAA0B,mHAC1B,0BAA0B,+GAC9B,sBAAsB,uEAErD,SAAS,cAAc,CAAC,MAAM,CAAE,SAAS,CAAE,CAEvC,IAAM,OAAO,CAAG,IAAI,CAAC,OAAO,CAAC,AAE7B,IAAI,QAAQ,UAAA,CACR,sBAAsB,UAAA,CACtB,sBAAsB,UAAA,CACtB,kBAAkB,UAAA,CAAC,AAEvB,SAAS,KAAK,EAAG,CACb,sBAAsB,GAAG,wCAAuB,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAE,SAAS,CAAC,CAAC,AACnF,sBAAsB,GAAG,wCAAuB,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAE,SAAS,CAAC,CAAC,AACnF,kBAAkB,GAAG,oCAAmB,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAE,SAAS,CAAC,CAAC,CAC9E;;AAID,SAAS,WAAW,CAAC,cAAc,CAAE,aAAa,CAAE,KAAK,CAAE,4BAA4B,CAAE,sBAAsB,CAAE,CAC7G,IAAI,QAAQ,UAAA,CAAC,AACb,IAAM,IAAI,CAAG,cAAc,CAAC,eAAe,CAAC;AAG5C,GAAI,IAAI,KAAK,oCAAc,YAAY,IAAI,IAAI,KAAK,oCAAc,QAAQ,IAAI,CAAC,2BAA2B,CAAC,cAAc,CAAE,KAAK,CAAC,CAAE,CAC/H,QAAQ,GAAG,cAAc,CAAC,QAAQ,CAAC,CACtC,KAAM,CACH,GAAI,IAAI,KAAK,oCAAc,gBAAgB,CAAE,CACzC,QAAQ,GAAG,sBAAsB,CAAC,WAAW,CAAC,cAAc,CAAE,aAAa,CAAE,KAAK,CAAE,sBAAsB,CAAC,CAAC,CAC/G,KAAM,GAAI,IAAI,KAAK,oCAAc,gBAAgB,CAAE,CAChD,QAAQ,GAAG,sBAAsB,CAAC,WAAW,CAAC,cAAc,CAAE,aAAa,CAAE,KAAK,CAAE,sBAAsB,CAAC,CAAC,CAC/G,KAAM,GAAI,IAAI,KAAK,oCAAc,YAAY,CAAE,CAC5C,QAAQ,GAAG,kBAAkB,CAAC,WAAW,CAAC,cAAc,CAAE,aAAa,CAAE,KAAK,CAAE,sBAAsB,CAAC,CAAC,CAC3G,AAED,GAAI,4BAA4B,CAAE,CAC9B,4BAA4B,CAAC,cAAc,CAAE,QAAQ,CAAC,CAAC,CAC1D,CACJ,CACJ,AAED,SAAS,2BAA2B,CAAC,cAAc,CAAE,KAAK,CAAE,CACxD,IAAM,QAAQ,CAAG,cAAc,CAAC,QAAQ,CAAC,AACzC,IAAI,cAAc,CAAG,KAAK,CAAC,AAE3B,IAAI,QAAQ,UAAA,CACR,QAAQ,UAAA,CAAC,AAEb,GAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAE,CACpC,cAAc,GAAG,IAAI,CAAC,CACzB,KAAM,CACH,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,AACvC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,eAAe,CAAC,AACzD,cAAc,GAAG,AAAC,KAAK,GAAG,QAAQ,IAAM,KAAK,GAAG,QAAQ,AAAC,CAAC,CAC7D,AAED,OAAO,cAAc,CAAC,CACzB,AAED,QAAQ,GAAG,CACP,WAAW,CAAE,WAAW,CAC3B,CAAC,AAEF,KAAK,EAAE,CAAC,AAER,OAAO,QAAQ,CAAC,CACnB,AAED,cAAc,CAAC,qBAAqB,GAAG,gBAAgB,CAAC,AACxD,IAAM,OAAO,CAAG,8BAAa,eAAe,CAAC,cAAc,CAAC,CAAC,qBAC9C,OAAO","file":"SegmentsGetter.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport DashConstants from '../constants/DashConstants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport TimelineSegmentsGetter from './TimelineSegmentsGetter';\nimport TemplateSegmentsGetter from './TemplateSegmentsGetter';\nimport ListSegmentsGetter from './ListSegmentsGetter';\n\nfunction SegmentsGetter(config, isDynamic) {\n\n    const context = this.context;\n\n    let instance,\n        timelineSegmentsGetter,\n        templateSegmentsGetter,\n        listSegmentsGetter;\n\n    function setup() {\n        timelineSegmentsGetter = TimelineSegmentsGetter(context).create(config, isDynamic);\n        templateSegmentsGetter = TemplateSegmentsGetter(context).create(config, isDynamic);\n        listSegmentsGetter = ListSegmentsGetter(context).create(config, isDynamic);\n    }\n\n    // availabilityUpperLimit parameter is not used directly by any dash.js function, but it is needed as a helper\n    // for other developments that extend dash.js, and provide their own transport layers (ex: P2P transport)\n    function getSegments(representation, requestedTime, index, onSegmentListUpdatedCallback, availabilityUpperLimit) {\n        let segments;\n        const type = representation.segmentInfoType;\n\n        // Already figure out the segments.\n        if (type === DashConstants.SEGMENT_BASE || type === DashConstants.BASE_URL || !isSegmentListUpdateRequired(representation, index)) {\n            segments = representation.segments;\n        } else {\n            if (type === DashConstants.SEGMENT_TIMELINE) {\n                segments = timelineSegmentsGetter.getSegments(representation, requestedTime, index, availabilityUpperLimit);\n            } else if (type === DashConstants.SEGMENT_TEMPLATE) {\n                segments = templateSegmentsGetter.getSegments(representation, requestedTime, index, availabilityUpperLimit);\n            } else if (type === DashConstants.SEGMENT_LIST) {\n                segments = listSegmentsGetter.getSegments(representation, requestedTime, index, availabilityUpperLimit);\n            }\n\n            if (onSegmentListUpdatedCallback) {\n                onSegmentListUpdatedCallback(representation, segments);\n            }\n        }\n    }\n\n    function isSegmentListUpdateRequired(representation, index) {\n        const segments = representation.segments;\n        let updateRequired = false;\n\n        let upperIdx,\n            lowerIdx;\n\n        if (!segments || segments.length === 0) {\n            updateRequired = true;\n        } else {\n            lowerIdx = segments[0].availabilityIdx;\n            upperIdx = segments[segments.length - 1].availabilityIdx;\n            updateRequired = (index < lowerIdx) || (index > upperIdx);\n        }\n\n        return updateRequired;\n    }\n\n    instance = {\n        getSegments: getSegments\n    };\n\n    setup();\n\n    return instance;\n}\n\nSegmentsGetter.__dashjs_factory_name = 'SegmentsGetter';\nconst factory = FactoryMaker.getClassFactory(SegmentsGetter);\nexport default factory;\n"]}