{"version":3,"sources":["../../../../../src/dash/utils/TimelineSegmentsGetter.js"],"names":[],"mappings":"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","file":"TimelineSegmentsGetter.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\n\nimport {getTimeBasedSegment} from './SegmentsUtils';\n\nfunction TimelineSegmentsGetter(config, isDynamic) {\n\n    config = config || {};\n    const timelineConverter = config.timelineConverter;\n\n    let instance;\n\n    function checkConfig() {\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcMediaTimeFromPresentationTime') || !timelineConverter.hasOwnProperty('calcSegmentAvailabilityRange') ||\n            !timelineConverter.hasOwnProperty('calcMediaTimeFromPresentationTime')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getSegmentsFromTimeline(representation, requestedTime, index, availabilityUpperLimit) {\n        checkConfig();\n\n        if (!representation) {\n            throw new Error('no representation');\n        }\n\n        if (requestedTime === undefined) {\n            requestedTime = null;\n        }\n\n        const base = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate ||\n            representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList;\n        const timeline = base.SegmentTimeline;\n        const list = base.SegmentURL_asArray;\n        const isAvailableSegmentNumberCalculated = representation.availableSegmentsNumber > 0;\n\n        let maxSegmentsAhead;\n\n        if (availabilityUpperLimit) {\n            maxSegmentsAhead = availabilityUpperLimit;\n        } else {\n            maxSegmentsAhead = (index > -1 || requestedTime !== null) ? 10 : Infinity;\n        }\n\n        let time = 0;\n        let scaledTime = 0;\n        let availabilityIdx = -1;\n        const segments = [];\n        let requiredMediaTime = null;\n\n        let fragments,\n            frag,\n            i,\n            len,\n            j,\n            repeat,\n            repeatEndTime,\n            nextFrag,\n            hasEnoughSegments,\n            startIdx,\n            fTimescale;\n\n        let createSegment = function (s, i) {\n            let media = base.media;\n            let mediaRange = s.mediaRange;\n\n            if (list) {\n                media = list[i].media || '';\n                mediaRange = list[i].mediaRange;\n            }\n\n            return getTimeBasedSegment(\n                timelineConverter,\n                isDynamic,\n                representation,\n                time,\n                s.d,\n                fTimescale,\n                media,\n                mediaRange,\n                availabilityIdx,\n                s.tManifest);\n        };\n\n        fTimescale = representation.timescale;\n\n        fragments = timeline.S_asArray;\n\n        startIdx = index;\n\n        if (requestedTime !== null) {\n            requiredMediaTime = timelineConverter.calcMediaTimeFromPresentationTime(requestedTime, representation);\n        }\n\n        for (i = 0, len = fragments.length; i < len; i++) {\n            frag = fragments[i];\n            repeat = 0;\n            if (frag.hasOwnProperty('r')) {\n                repeat = frag.r;\n            }\n\n            // For a repeated S element, t belongs only to the first segment\n            if (frag.hasOwnProperty('t')) {\n                time = frag.t;\n                scaledTime = time / fTimescale;\n            }\n\n            // This is a special case: \"A negative value of the @r attribute of the S element indicates that the duration indicated in @d attribute repeats until the start of the next S element, the end of the Period or until the\n            // next MPD update.\"\n            if (repeat < 0) {\n                nextFrag = fragments[i + 1];\n\n                if (nextFrag && nextFrag.hasOwnProperty('t')) {\n                    repeatEndTime = nextFrag.t / fTimescale;\n                } else {\n                    const availabilityEnd = representation.segmentAvailabilityRange ? representation.segmentAvailabilityRange.end : (timelineConverter.calcSegmentAvailabilityRange(representation, isDynamic).end);\n                    repeatEndTime = timelineConverter.calcMediaTimeFromPresentationTime(availabilityEnd, representation);\n                    representation.segmentDuration = frag.d / fTimescale;\n                }\n\n                repeat = Math.ceil((repeatEndTime - scaledTime) / (frag.d / fTimescale)) - 1;\n            }\n\n            // if we have enough segments in the list, but we have not calculated the total number of the segments yet we\n            // should continue the loop and calc the number. Once it is calculated, we can break the loop.\n            if (hasEnoughSegments) {\n                if (isAvailableSegmentNumberCalculated) break;\n                availabilityIdx += repeat + 1;\n                continue;\n            }\n\n            for (j = 0; j <= repeat; j++) {\n                availabilityIdx++;\n\n                if (segments.length > maxSegmentsAhead) {\n                    hasEnoughSegments = true;\n                    if (isAvailableSegmentNumberCalculated) break;\n                    continue;\n                }\n\n                if (requiredMediaTime !== null) {\n                    // In some cases when requiredMediaTime = actual end time of the last segment\n                    // it is possible that this time a bit exceeds the declared end time of the last segment.\n                    // in this case we still need to include the last segment in the segment list. to do this we\n                    // use a correction factor = 1.5. This number is used because the largest possible deviation is\n                    // is 50% of segment duration.\n                    if (scaledTime >= (requiredMediaTime - (frag.d / fTimescale) * 1.5)) {\n                        segments.push(createSegment(frag, availabilityIdx));\n                    }\n                } else if (availabilityIdx >= startIdx) {\n                    segments.push(createSegment(frag, availabilityIdx));\n                }\n\n                time += frag.d;\n                scaledTime = time / fTimescale;\n            }\n        }\n\n        if (!isAvailableSegmentNumberCalculated) {\n            representation.availableSegmentsNumber = availabilityIdx + 1;\n        }\n\n        return segments;\n    }\n\n    instance = {\n        getSegments: getSegmentsFromTimeline\n    };\n\n    return instance;\n}\n\nTimelineSegmentsGetter.__dashjs_factory_name = 'TimelineSegmentsGetter';\nconst factory = FactoryMaker.getClassFactory(TimelineSegmentsGetter);\nexport default factory;\n"]}