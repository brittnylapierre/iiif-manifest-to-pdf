{"version":3,"sources":["../../../../src/mss/MssFragmentMoovProcessor.js"],"names":[],"mappings":"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","file":"MssFragmentMoovProcessor.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @module MssFragmentMoovProcessor\n * @param {Object} config object\n */\nfunction MssFragmentMoovProcessor(config) {\n    config = config || {};\n    const TIME_SCALE = 10000000;\n    const NALUTYPE_SPS = 7;\n    const NALUTYPE_PPS = 8;\n    const constants = config.constants;\n    const ISOBoxer = config.ISOBoxer;\n\n    let protectionController = config.protectionController;\n    let instance,\n        period,\n        adaptationSet,\n        representation,\n        contentProtection,\n        trackId;\n\n    function createFtypBox(isoFile) {\n        let ftyp = ISOBoxer.createBox('ftyp', isoFile);\n        ftyp.major_brand = 'iso6';\n        ftyp.minor_version = 1; // is an informative integer for the minor version of the major brand\n        ftyp.compatible_brands = []; //is a list, to the end of the box, of brands isom, iso6 and msdh\n        ftyp.compatible_brands[0] = 'isom'; // => decimal ASCII value for isom\n        ftyp.compatible_brands[1] = 'iso6'; // => decimal ASCII value for iso6\n        ftyp.compatible_brands[2] = 'msdh'; // => decimal ASCII value for msdh\n\n        return ftyp;\n    }\n\n    function createMoovBox(isoFile) {\n\n        // moov box\n        let moov = ISOBoxer.createBox('moov', isoFile);\n\n        // moov/mvhd\n        createMvhdBox(moov);\n\n        // moov/trak\n        let trak = ISOBoxer.createBox('trak', moov);\n\n        // moov/trak/tkhd\n        createTkhdBox(trak);\n\n        // moov/trak/mdia\n        let mdia = ISOBoxer.createBox('mdia', trak);\n\n        // moov/trak/mdia/mdhd\n        createMdhdBox(mdia);\n\n        // moov/trak/mdia/hdlr\n        createHdlrBox(mdia);\n\n        // moov/trak/mdia/minf\n        let minf = ISOBoxer.createBox('minf', mdia);\n\n        switch (adaptationSet.type) {\n            case constants.VIDEO:\n                // moov/trak/mdia/minf/vmhd\n                createVmhdBox(minf);\n                break;\n            case constants.AUDIO:\n                // moov/trak/mdia/minf/smhd\n                createSmhdBox(minf);\n                break;\n            default:\n                break;\n        }\n\n        // moov/trak/mdia/minf/dinf\n        let dinf = ISOBoxer.createBox('dinf', minf);\n\n        // moov/trak/mdia/minf/dinf/dref\n        createDrefBox(dinf);\n\n        // moov/trak/mdia/minf/stbl\n        let stbl = ISOBoxer.createBox('stbl', minf);\n\n        // Create empty stts, stsc, stco and stsz boxes\n        // Use data field as for codem-isoboxer unknown boxes for setting fields value\n\n        // moov/trak/mdia/minf/stbl/stts\n        let stts = ISOBoxer.createFullBox('stts', stbl);\n        stts._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\n\n        // moov/trak/mdia/minf/stbl/stsc\n        let stsc = ISOBoxer.createFullBox('stsc', stbl);\n        stsc._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\n\n        // moov/trak/mdia/minf/stbl/stco\n        let stco = ISOBoxer.createFullBox('stco', stbl);\n        stco._data = [0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, entry_count = 0\n\n        // moov/trak/mdia/minf/stbl/stsz\n        let stsz = ISOBoxer.createFullBox('stsz', stbl);\n        stsz._data = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // version = 0, flags = 0, sample_size = 0, sample_count = 0\n\n        // moov/trak/mdia/minf/stbl/stsd\n        createStsdBox(stbl);\n\n        // moov/mvex\n        let mvex = ISOBoxer.createBox('mvex', moov);\n\n        // moov/mvex/trex\n        createTrexBox(mvex);\n\n        if (contentProtection && protectionController) {\n            let supportedKS = protectionController.getSupportedKeySystemsFromContentProtection(contentProtection);\n            createProtectionSystemSpecificHeaderBox(moov, supportedKS);\n        }\n    }\n\n    function createMvhdBox(moov) {\n\n        let mvhd = ISOBoxer.createFullBox('mvhd', moov);\n\n        mvhd.version = 1; // version = 1  in order to have 64bits duration value\n\n        mvhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n        mvhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n        mvhd.timescale = TIME_SCALE; // the time-scale for the entire presentation => 10000000 for MSS\n        mvhd.duration = Math.round(period.duration * TIME_SCALE); // the length of the presentation (in the indicated timescale) =>  take duration of period\n        mvhd.rate = 1.0; // 16.16 number, '1.0' = normal playback\n        mvhd.volume = 1.0; // 8.8 number, '1.0' = full volume\n        mvhd.reserved1 = 0;\n        mvhd.reserved2 = [0x0, 0x0];\n        mvhd.matrix = [\n            1, 0, 0, // provides a transformation matrix for the video;\n            0, 1, 0, // (u,v,w) are restricted here to (0,0,1)\n            0, 0, 16384\n        ];\n        mvhd.pre_defined = [0, 0, 0, 0, 0, 0];\n        mvhd.next_track_ID = trackId + 1; // indicates a value to use for the track ID of the next track to be added to this presentation\n\n        return mvhd;\n    }\n\n    function createTkhdBox(trak) {\n\n        let tkhd = ISOBoxer.createFullBox('tkhd', trak);\n\n        tkhd.version = 1; // version = 1  in order to have 64bits duration value\n        tkhd.flags = 0x1 | // Track_enabled (0x000001): Indicates that the track is enabled\n            0x2 | // Track_in_movie (0x000002):  Indicates that the track is used in the presentation\n            0x4; // Track_in_preview (0x000004):  Indicates that the track is used when previewing the presentation\n\n        tkhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n        tkhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n        tkhd.track_ID = trackId; // uniquely identifies this track over the entire life-time of this presentation\n        tkhd.reserved1 = 0;\n        tkhd.duration = Math.round(period.duration * TIME_SCALE); // the duration of this track (in the timescale indicated in the Movie Header Box) =>  take duration of period\n        tkhd.reserved2 = [0x0, 0x0];\n        tkhd.layer = 0; // specifies the front-to-back ordering of video tracks; tracks with lower numbers are closer to the viewer => 0 since only one video track\n        tkhd.alternate_group = 0; // specifies a group or collection of tracks => ignore\n        tkhd.volume = 1.0; // '1.0' = full volume\n        tkhd.reserved3 = 0;\n        tkhd.matrix = [\n            1, 0, 0, // provides a transformation matrix for the video;\n            0, 1, 0, // (u,v,w) are restricted here to (0,0,1)\n            0, 0, 16384\n        ];\n        tkhd.width = representation.width; // visual presentation width\n        tkhd.height = representation.height; // visual presentation height\n\n        return tkhd;\n    }\n\n    function createMdhdBox(mdia) {\n\n        let mdhd = ISOBoxer.createFullBox('mdhd', mdia);\n\n        mdhd.version = 1; // version = 1  in order to have 64bits duration value\n\n        mdhd.creation_time = 0; // the creation time of the presentation => ignore (set to 0)\n        mdhd.modification_time = 0; // the most recent time the presentation was modified => ignore (set to 0)\n        mdhd.timescale = TIME_SCALE; // the time-scale for the entire presentation\n        mdhd.duration = Math.round(period.duration * TIME_SCALE); // the duration of this media (in the scale of the timescale). If the duration cannot be determined then duration is set to all 1s.\n        mdhd.language = adaptationSet.lang || 'und'; // declares the language code for this media (see getLanguageCode())\n        mdhd.pre_defined = 0;\n\n        return mdhd;\n    }\n\n    function createHdlrBox(mdia) {\n\n        let hdlr = ISOBoxer.createFullBox('hdlr', mdia);\n\n        hdlr.pre_defined = 0;\n        switch (adaptationSet.type) {\n            case constants.VIDEO:\n                hdlr.handler_type = 'vide';\n                break;\n            case constants.AUDIO:\n                hdlr.handler_type = 'soun';\n                break;\n            default:\n                hdlr.handler_type = 'meta';\n                break;\n        }\n        hdlr.name = representation.id;\n        hdlr.reserved = [0, 0, 0];\n\n        return hdlr;\n    }\n\n    function createVmhdBox(minf) {\n\n        let vmhd = ISOBoxer.createFullBox('vmhd', minf);\n\n        vmhd.flags = 1;\n\n        vmhd.graphicsmode = 0; // specifies a composition mode for this video track, from the following enumerated set, which may be extended by derived specifications: copy = 0 copy over the existing image\n        vmhd.opcolor = [0, 0, 0]; // is a set of 3 colour values (red, green, blue) available for use by graphics modes\n\n        return vmhd;\n    }\n\n    function createSmhdBox(minf) {\n\n        let smhd = ISOBoxer.createFullBox('smhd', minf);\n\n        smhd.flags = 1;\n\n        smhd.balance = 0; // is a fixed-point 8.8 number that places mono audio tracks in a stereo space; 0 is centre (the normal value); full left is -1.0 and full right is 1.0.\n        smhd.reserved = 0;\n\n        return smhd;\n    }\n\n    function createDrefBox(dinf) {\n\n        let dref = ISOBoxer.createFullBox('dref', dinf);\n\n        dref.entry_count = 1;\n        dref.entries = [];\n\n        let url = ISOBoxer.createFullBox('url ', dref, false);\n        url.location = '';\n        url.flags = 1;\n\n        dref.entries.push(url);\n\n        return dref;\n    }\n\n    function createStsdBox(stbl) {\n\n        let stsd = ISOBoxer.createFullBox('stsd', stbl);\n\n        stsd.entries = [];\n        switch (adaptationSet.type) {\n            case constants.VIDEO:\n            case constants.AUDIO:\n                stsd.entries.push(createSampleEntry(stsd));\n                break;\n            default:\n                break;\n        }\n\n        stsd.entry_count = stsd.entries.length; // is an integer that counts the actual entries\n        return stsd;\n    }\n\n    function createSampleEntry(stsd) {\n        let codec = representation.codecs.substring(0, representation.codecs.indexOf('.'));\n\n        switch (codec) {\n            case 'avc1':\n                return createAVCVisualSampleEntry(stsd, codec);\n            case 'mp4a':\n                return createMP4AudioSampleEntry(stsd, codec);\n            default:\n                throw {\n                    name: 'Unsupported codec',\n                    message: 'Unsupported codec',\n                    data: {\n                        codec: codec\n                    }\n                };\n        }\n    }\n\n    function createAVCVisualSampleEntry(stsd, codec) {\n        let avc1;\n\n        if (contentProtection) {\n            avc1 = ISOBoxer.createBox('encv', stsd, false);\n        } else {\n            avc1 = ISOBoxer.createBox('avc1', stsd, false);\n        }\n\n        // SampleEntry fields\n        avc1.reserved1 = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n        avc1.data_reference_index = 1;\n\n        // VisualSampleEntry fields\n        avc1.pre_defined1 = 0;\n        avc1.reserved2 = 0;\n        avc1.pre_defined2 = [0, 0, 0];\n        avc1.height = representation.height;\n        avc1.width = representation.width;\n        avc1.horizresolution = 72; // 72 dpi\n        avc1.vertresolution = 72; // 72 dpi\n        avc1.reserved3 = 0;\n        avc1.frame_count = 1; // 1 compressed video frame per sample\n        avc1.compressorname = [\n            0x0A, 0x41, 0x56, 0x43, 0x20, 0x43, 0x6F, 0x64, // = 'AVC Coding';\n            0x69, 0x6E, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n        ];\n        avc1.depth = 0x0018; // 0x0018 – images are in colour with no alpha.\n        avc1.pre_defined3 = 65535;\n        avc1.config = createAVC1ConfigurationRecord();\n        if (contentProtection) {\n            // Create and add Protection Scheme Info Box\n            let sinf = ISOBoxer.createBox('sinf', avc1);\n\n            // Create and add Original Format Box => indicate codec type of the encrypted content\n            createOriginalFormatBox(sinf, codec);\n\n            // Create and add Scheme Type box\n            createSchemeTypeBox(sinf);\n\n            // Create and add Scheme Information Box\n            createSchemeInformationBox(sinf);\n        }\n\n        return avc1;\n    }\n\n    function createAVC1ConfigurationRecord() {\n\n        let avcC = null;\n        let avcCLength = 15; // length = 15 by default (0 SPS and 0 PPS)\n\n        // First get all SPS and PPS from codecPrivateData\n        let sps = [];\n        let pps = [];\n        let AVCProfileIndication = 0;\n        let AVCLevelIndication = 0;\n        let profile_compatibility = 0;\n\n\n        let nalus = representation.codecPrivateData.split('00000001').slice(1);\n        let naluBytes, naluType;\n\n        for (let i = 0; i < nalus.length; i++) {\n            naluBytes = hexStringtoBuffer(nalus[i]);\n\n            naluType = naluBytes[0] & 0x1F;\n\n            switch (naluType) {\n                case NALUTYPE_SPS:\n                    sps.push(naluBytes);\n                    avcCLength += naluBytes.length + 2; // 2 = sequenceParameterSetLength field length\n                    break;\n                case NALUTYPE_PPS:\n                    pps.push(naluBytes);\n                    avcCLength += naluBytes.length + 2; // 2 = pictureParameterSetLength field length\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        // Get profile and level from SPS\n        if (sps.length > 0) {\n            AVCProfileIndication = sps[0][1];\n            profile_compatibility = sps[0][2];\n            AVCLevelIndication = sps[0][3];\n        }\n\n        // Generate avcC buffer\n        avcC = new Uint8Array(avcCLength);\n\n        let i = 0;\n        // length\n        avcC[i++] = (avcCLength & 0xFF000000) >> 24;\n        avcC[i++] = (avcCLength & 0x00FF0000) >> 16;\n        avcC[i++] = (avcCLength & 0x0000FF00) >> 8;\n        avcC[i++] = (avcCLength & 0x000000FF);\n        avcC.set([0x61, 0x76, 0x63, 0x43], i); // type = 'avcC'\n        i += 4;\n        avcC[i++] = 1; // configurationVersion = 1\n        avcC[i++] = AVCProfileIndication;\n        avcC[i++] = profile_compatibility;\n        avcC[i++] = AVCLevelIndication;\n        avcC[i++] = 0xFF; // '11111' + lengthSizeMinusOne = 3\n        avcC[i++] = 0xE0 | sps.length; // '111' + numOfSequenceParameterSets\n        for (let n = 0; n < sps.length; n++) {\n            avcC[i++] = (sps[n].length & 0xFF00) >> 8;\n            avcC[i++] = (sps[n].length & 0x00FF);\n            avcC.set(sps[n], i);\n            i += sps[n].length;\n        }\n        avcC[i++] = pps.length; // numOfPictureParameterSets\n        for (let n = 0; n < pps.length; n++) {\n            avcC[i++] = (pps[n].length & 0xFF00) >> 8;\n            avcC[i++] = (pps[n].length & 0x00FF);\n            avcC.set(pps[n], i);\n            i += pps[n].length;\n        }\n\n        return avcC;\n    }\n\n    function createMP4AudioSampleEntry(stsd, codec) {\n        let mp4a;\n\n        if (contentProtection) {\n            mp4a = ISOBoxer.createBox('enca', stsd, false);\n        } else {\n            mp4a = ISOBoxer.createBox('mp4a', stsd, false);\n        }\n\n        // SampleEntry fields\n        mp4a.reserved1 = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n        mp4a.data_reference_index = 1;\n\n        // AudioSampleEntry fields\n        mp4a.reserved2 = [0x0, 0x0];\n        mp4a.channelcount = representation.audioChannels;\n        mp4a.samplesize = 16;\n        mp4a.pre_defined = 0;\n        mp4a.reserved_3 = 0;\n        mp4a.samplerate = representation.audioSamplingRate << 16;\n\n        mp4a.esds = createMPEG4AACESDescriptor();\n\n        if (contentProtection) {\n            // Create and add Protection Scheme Info Box\n            let sinf = ISOBoxer.createBox('sinf', mp4a);\n\n            // Create and add Original Format Box => indicate codec type of the encrypted content\n            createOriginalFormatBox(sinf, codec);\n\n            // Create and add Scheme Type box\n            createSchemeTypeBox(sinf);\n\n            // Create and add Scheme Information Box\n            createSchemeInformationBox(sinf);\n        }\n\n        return mp4a;\n    }\n\n    function createMPEG4AACESDescriptor() {\n\n        // AudioSpecificConfig (see ISO/IEC 14496-3, subpart 1) => corresponds to hex bytes contained in 'codecPrivateData' field\n        let audioSpecificConfig = hexStringtoBuffer(representation.codecPrivateData);\n\n        // ESDS length = esds box header length (= 12) +\n        //               ES_Descriptor header length (= 5) +\n        //               DecoderConfigDescriptor header length (= 15) +\n        //               decoderSpecificInfo header length (= 2) +\n        //               AudioSpecificConfig length (= codecPrivateData length)\n        let esdsLength = 34 + audioSpecificConfig.length;\n        let esds = new Uint8Array(esdsLength);\n\n        let i = 0;\n        // esds box\n        esds[i++] = (esdsLength & 0xFF000000) >> 24; // esds box length\n        esds[i++] = (esdsLength & 0x00FF0000) >> 16; // ''\n        esds[i++] = (esdsLength & 0x0000FF00) >> 8; // ''\n        esds[i++] = (esdsLength & 0x000000FF); // ''\n        esds.set([0x65, 0x73, 0x64, 0x73], i); // type = 'esds'\n        i += 4;\n        esds.set([0, 0, 0, 0], i); // version = 0, flags = 0\n        i += 4;\n        // ES_Descriptor (see ISO/IEC 14496-1 (Systems))\n        esds[i++] = 0x03; // tag = 0x03 (ES_DescrTag)\n        esds[i++] = 20 + audioSpecificConfig.length; // size\n        esds[i++] = (trackId & 0xFF00) >> 8; // ES_ID = track_id\n        esds[i++] = (trackId & 0x00FF); // ''\n        esds[i++] = 0; // flags and streamPriority\n\n        // DecoderConfigDescriptor (see ISO/IEC 14496-1 (Systems))\n        esds[i++] = 0x04; // tag = 0x04 (DecoderConfigDescrTag)\n        esds[i++] = 15 + audioSpecificConfig.length; // size\n        esds[i++] = 0x40; // objectTypeIndication = 0x40 (MPEG-4 AAC)\n        esds[i] = 0x05 << 2; // streamType = 0x05 (Audiostream)\n        esds[i] |= 0 << 1; // upStream = 0\n        esds[i++] |= 1; // reserved = 1\n        esds[i++] = 0xFF; // buffersizeDB = undefined\n        esds[i++] = 0xFF; // ''\n        esds[i++] = 0xFF; // ''\n        esds[i++] = (representation.bandwidth & 0xFF000000) >> 24; // maxBitrate\n        esds[i++] = (representation.bandwidth & 0x00FF0000) >> 16; // ''\n        esds[i++] = (representation.bandwidth & 0x0000FF00) >> 8; // ''\n        esds[i++] = (representation.bandwidth & 0x000000FF); // ''\n        esds[i++] = (representation.bandwidth & 0xFF000000) >> 24; // avgbitrate\n        esds[i++] = (representation.bandwidth & 0x00FF0000) >> 16; // ''\n        esds[i++] = (representation.bandwidth & 0x0000FF00) >> 8; // ''\n        esds[i++] = (representation.bandwidth & 0x000000FF); // ''\n\n        // DecoderSpecificInfo (see ISO/IEC 14496-1 (Systems))\n        esds[i++] = 0x05; // tag = 0x05 (DecSpecificInfoTag)\n        esds[i++] = audioSpecificConfig.length; // size\n        esds.set(audioSpecificConfig, i); // AudioSpecificConfig bytes\n\n        return esds;\n    }\n\n    function createOriginalFormatBox(sinf, codec) {\n        let frma = ISOBoxer.createBox('frma', sinf);\n        frma.data_format = stringToCharCode(codec);\n    }\n\n    function createSchemeTypeBox(sinf) {\n        let schm = ISOBoxer.createFullBox('schm', sinf);\n\n        schm.flags = 0;\n        schm.version = 0;\n        schm.scheme_type = 0x63656E63; // 'cenc' => common encryption\n        schm.scheme_version = 0x00010000; // version set to 0x00010000 (Major version 1, Minor version 0)\n    }\n\n    function createSchemeInformationBox(sinf) {\n        let schi = ISOBoxer.createBox('schi', sinf);\n\n        // Create and add Track Encryption Box\n        createTrackEncryptionBox(schi);\n    }\n\n    function createProtectionSystemSpecificHeaderBox(moov, keySystems) {\n        let pssh_bytes;\n        let pssh;\n        let i;\n        let parsedBuffer;\n\n        for (i = 0; i < keySystems.length; i += 1) {\n            pssh_bytes = keySystems[i].initData;\n            parsedBuffer = ISOBoxer.parseBuffer(pssh_bytes);\n            pssh = parsedBuffer.fetch('pssh');\n            if (pssh) {\n                ISOBoxer.Utils.appendBox(moov, pssh);\n            }\n        }\n    }\n\n    function createTrackEncryptionBox(schi) {\n        let tenc = ISOBoxer.createFullBox('tenc', schi);\n\n        tenc.flags = 0;\n        tenc.version = 0;\n\n        tenc.default_IsEncrypted = 0x1;\n        tenc.default_IV_size = 8;\n        tenc.default_KID = (contentProtection && (contentProtection.length) > 0 && contentProtection[0]['cenc:default_KID']) ?\n            contentProtection[0]['cenc:default_KID'] : [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0];\n    }\n\n    function createTrexBox(moov) {\n\n        let trex = ISOBoxer.createFullBox('trex', moov);\n\n        trex.track_ID = trackId;\n        trex.default_sample_description_index = 1;\n        trex.default_sample_duration = 0;\n        trex.default_sample_size = 0;\n        trex.default_sample_flags = 0;\n\n        return trex;\n    }\n\n    function hexStringtoBuffer(str) {\n        let buf = new Uint8Array(str.length / 2);\n        let i;\n\n        for (i = 0; i < str.length / 2; i += 1) {\n            buf[i] = parseInt('' + str[i * 2] + str[i * 2 + 1], 16);\n        }\n        return buf;\n    }\n\n    function stringToCharCode(str) {\n        let code = 0;\n        let i;\n\n        for (i = 0; i < str.length; i += 1) {\n            code |= str.charCodeAt(i) << ((str.length - i - 1) * 8);\n        }\n        return code;\n    }\n\n    function generateMoov(rep) {\n        if (!rep || !rep.adaptation) {\n            return;\n        }\n\n        let isoFile,\n            arrayBuffer;\n\n        representation = rep;\n        adaptationSet = representation.adaptation;\n\n        period = adaptationSet.period;\n        trackId = adaptationSet.index + 1;\n        contentProtection = period.mpd.manifest.Period_asArray[period.index].AdaptationSet_asArray[adaptationSet.index].ContentProtection;\n\n        isoFile = ISOBoxer.createFile();\n        createFtypBox(isoFile);\n        createMoovBox(isoFile);\n\n        arrayBuffer = isoFile.write();\n\n        return arrayBuffer;\n    }\n\n    instance = {\n        generateMoov: generateMoov\n    };\n\n    return instance;\n}\n\nMssFragmentMoovProcessor.__dashjs_factory_name = 'MssFragmentMoovProcessor';\nexport default dashjs.FactoryMaker.getClassFactory(MssFragmentMoovProcessor); /* jshint ignore:line */"]}