{"version":3,"sources":["../../../../src/mss/MssHandler.js"],"names":[],"mappings":"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","file":"MssHandler.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DataChunk from '../streaming/vo/DataChunk';\nimport FragmentRequest from '../streaming/vo/FragmentRequest';\nimport MssFragmentInfoController from './MssFragmentInfoController';\nimport MssFragmentProcessor from './MssFragmentProcessor';\nimport MssParser from './parser/MssParser';\n\nfunction MssHandler(config) {\n\n    config = config || {};\n    let context = this.context;\n    let eventBus = config.eventBus;\n    const events = config.events;\n    const constants = config.constants;\n    const initSegmentType = config.initSegmentType;\n    let metricsModel = config.metricsModel;\n    let playbackController = config.playbackController;\n    let protectionController = config.protectionController;\n    let mssFragmentProcessor = MssFragmentProcessor(context).create({\n        metricsModel: metricsModel,\n        playbackController: playbackController,\n        protectionController: protectionController,\n        eventBus: eventBus,\n        constants: constants,\n        ISOBoxer: config.ISOBoxer,\n        log: config.log\n    });\n    let mssParser;\n\n    let instance;\n\n    function setup() {}\n\n    function onInitializationRequested(e) {\n        let streamProcessor = e.sender.getStreamProcessor();\n        let request = new FragmentRequest();\n        let representationController = streamProcessor.getRepresentationController();\n        let representation = representationController.getCurrentRepresentation();\n        let period,\n            presentationStartTime;\n\n        period = representation.adaptation.period;\n\n        request.mediaType = representation.adaptation.type;\n        request.type = initSegmentType;\n        request.range = representation.range;\n        presentationStartTime = period.start;\n        //request.availabilityStartTime = timelineConverter.calcAvailabilityStartTimeFromPresentationTime(presentationStartTime, representation.adaptation.period.mpd, isDynamic);\n        //request.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationStartTime + period.duration, period.mpd, isDynamic);\n        request.quality = representation.index;\n        request.mediaInfo = streamProcessor.getMediaInfo();\n        request.representationId = representation.id;\n\n        const chunk = createDataChunk(request, streamProcessor.getStreamInfo().id);\n\n        // Generate initialization segment (moov)\n        chunk.bytes = mssFragmentProcessor.generateMoov(representation);\n\n        eventBus.trigger(events.INIT_FRAGMENT_LOADED, {\n            chunk: chunk,\n            fragmentModel: streamProcessor.getFragmentModel()\n        });\n\n        // Change the sender value to stop event to be propagated\n        e.sender = null;\n    }\n\n    function createDataChunk(request, streamId) {\n        const chunk = new DataChunk();\n\n        chunk.streamId = streamId;\n        chunk.mediaInfo = request.mediaInfo;\n        chunk.segmentType = request.type;\n        chunk.start = request.startTime;\n        chunk.duration = request.duration;\n        chunk.end = chunk.start + chunk.duration;\n        chunk.index = request.index;\n        chunk.quality = request.quality;\n        chunk.representationId = request.representationId;\n\n        return chunk;\n    }\n\n    function onSegmentMediaLoaded(e) {\n        // Process moof to transcode it from MSS to DASH\n        let streamProcessor = e.sender.getStreamProcessor();\n        mssFragmentProcessor.processFragment(e, streamProcessor);\n    }\n\n    function onPlaybackSeekAsked() {\n        if (playbackController.getIsDynamic() && playbackController.getTime() !== 0) {\n\n            //create fragment info controllers for each stream processors of active stream (only for audio, video or fragmentedText)\n            let streamController = playbackController.getStreamController();\n            if (streamController) {\n                let processors = streamController.getActiveStreamProcessors();\n                processors.forEach(function (processor) {\n                    if (processor.getType() === constants.VIDEO ||\n                        processor.getType() === constants.AUDIO ||\n                        processor.getType() === constants.FRAGMENTED_TEXT) {\n\n                        // check that there is no fragment info controller registered to processor\n                        let i;\n                        let alreadyRegistered = false;\n                        let externalControllers = processor.getExternalControllers();\n                        for (i = 0; i < externalControllers.length; i++) {\n                            if (externalControllers[i].controllerType &&\n                                externalControllers[i].controllerType === 'MssFragmentInfoController') {\n                                alreadyRegistered = true;\n                            }\n                        }\n\n                        if (!alreadyRegistered) {\n                            let fragmentInfoController = MssFragmentInfoController(context).create({\n                                streamProcessor: processor,\n                                eventBus: eventBus,\n                                metricsModel: metricsModel,\n                                playbackController: playbackController,\n                                ISOBoxer: config.ISOBoxer,\n                                log: config.log\n                            });\n                            fragmentInfoController.initialize();\n                            fragmentInfoController.start();\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    function registerEvents() {\n        eventBus.on(events.INIT_REQUESTED, onInitializationRequested, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n        eventBus.on(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, instance, dashjs.FactoryMaker.getSingletonFactoryByName(eventBus.getClassName()).EVENT_PRIORITY_HIGH); /* jshint ignore:line */\n    }\n\n    function reset() {\n        eventBus.off(events.INIT_REQUESTED, onInitializationRequested, this);\n        eventBus.off(events.PLAYBACK_SEEK_ASKED, onPlaybackSeekAsked, this);\n        eventBus.off(events.FRAGMENT_LOADING_COMPLETED, onSegmentMediaLoaded, this);\n    }\n\n    function createMssParser() {\n        mssParser = MssParser(context).create(config);\n        return mssParser;\n    }\n\n    instance = {\n        reset: reset,\n        createMssParser: createMssParser,\n        registerEvents: registerEvents\n    };\n\n    setup();\n\n    return instance;\n}\n\nMssHandler.__dashjs_factory_name = 'MssHandler';\nexport default dashjs.FactoryMaker.getClassFactory(MssHandler); /* jshint ignore:line */\n"]}