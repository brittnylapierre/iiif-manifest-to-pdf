{"version":3,"sources":["../../../../src/streaming/ManifestLoader.js"],"names":[],"mappings":"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","file":"ManifestLoader.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from './constants/Constants';\nimport XlinkController from './controllers/XlinkController';\nimport XHRLoader from './XHRLoader';\nimport URLUtils from './utils/URLUtils';\nimport TextRequest from './vo/TextRequest';\nimport DashJSError from './vo/DashJSError';\nimport {HTTPRequest} from './vo/metrics/HTTPRequest';\nimport EventBus from '../core/EventBus';\nimport Events from '../core/events/Events';\nimport FactoryMaker from '../core/FactoryMaker';\nimport DashParser from '../dash/parser/DashParser';\nimport Debug from '../core/Debug';\n\nconst MANIFEST_LOADER_ERROR_PARSING_FAILURE = 1;\nconst MANIFEST_LOADER_ERROR_LOADING_FAILURE = 2;\nconst MANIFEST_LOADER_MESSAGE_PARSING_FAILURE = 'parsing failed';\n\nfunction ManifestLoader(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    const urlUtils = URLUtils(context).getInstance();\n    const debug = Debug(context).getInstance();\n    const log = debug.log;\n\n    let instance,\n        xhrLoader,\n        xlinkController,\n        parser;\n    let mssHandler = config.mssHandler;\n    let errHandler = config.errHandler;\n\n    function setup() {\n        eventBus.on(Events.XLINK_READY, onXlinkReady, instance);\n\n        xhrLoader = XHRLoader(context).create({\n            errHandler: errHandler,\n            metricsModel: config.metricsModel,\n            mediaPlayerModel: config.mediaPlayerModel,\n            requestModifier: config.requestModifier\n        });\n\n        xlinkController = XlinkController(context).create({\n            errHandler: errHandler,\n            metricsModel: config.metricsModel,\n            mediaPlayerModel: config.mediaPlayerModel,\n            requestModifier: config.requestModifier\n        });\n\n        parser = null;\n    }\n\n    function onXlinkReady(event) {\n        eventBus.trigger(\n            Events.INTERNAL_MANIFEST_LOADED, {\n                manifest: event.manifest\n            }\n        );\n    }\n\n    function createParser(data) {\n        let parser = null;\n        // Analyze manifest content to detect protocol and select appropriate parser\n        if (data.indexOf('SmoothStreamingMedia') > -1) {\n            //do some business to transform it into a Dash Manifest\n            if (mssHandler) {\n                parser = mssHandler.createMssParser();\n                mssHandler.registerEvents();\n            }else {\n                errHandler.manifestError('manifest type unsupported', 'createParser');\n            }\n            return parser;\n        } else if (data.indexOf('MPD') > -1) {\n            return DashParser(context).create({\n                errorHandler: errHandler\n            });\n        } else {\n            return parser;\n        }\n    }\n\n    function load(url) {\n        const request = new TextRequest(url, HTTPRequest.MPD_TYPE);\n\n        xhrLoader.load({\n            request: request,\n            success: function (data, textStatus, xhr) {\n                let actualUrl,\n                    baseUri;\n\n                // Handle redirects for the MPD - as per RFC3986 Section 5.1.3\n                // also handily resolves relative MPD URLs to absolute\n                if (xhr.responseURL && xhr.responseURL !== url) {\n                    baseUri = urlUtils.parseBaseUrl(xhr.responseURL);\n                    actualUrl = xhr.responseURL;\n                } else {\n                    // usually this case will be caught and resolved by\n                    // xhr.responseURL above but it is not available for IE11 and Edge/12 and Edge/13\n                    // baseUri must be absolute for BaseURL resolution later\n                    if (urlUtils.isRelative(url)) {\n                        url = urlUtils.resolve(url, window.location.href);\n                    }\n\n                    baseUri = urlUtils.parseBaseUrl(url);\n                }\n\n                // Create parser according to manifest type\n                if (parser === null) {\n                    parser = createParser(data);\n                }\n\n                if (parser === null) {\n                    eventBus.trigger(\n                        Events.INTERNAL_MANIFEST_LOADED, {\n                            manifest: null,\n                            error: new DashJSError(\n                                MANIFEST_LOADER_ERROR_PARSING_FAILURE,\n                                `Failed detecting manifest type: ${url}`\n                            )\n                        }\n                    );\n                    return;\n                }\n\n                // init xlinkcontroller with matchers and iron object from created parser\n                xlinkController.setMatchers(parser.getMatchers());\n                xlinkController.setIron(parser.getIron());\n\n                const manifest = parser.parse(data);\n\n                if (manifest) {\n                    manifest.url = actualUrl || url;\n\n                    // URL from which the MPD was originally retrieved (MPD updates will not change this value)\n                    if (!manifest.originalUrl) {\n                        manifest.originalUrl = manifest.url;\n                    }\n\n                    // In the following, we only use the first Location entry even if many are available\n                    // Compare with ManifestUpdater/DashManifestModel\n                    if (manifest.hasOwnProperty(Constants.LOCATION)) {\n                        baseUri = urlUtils.parseBaseUrl(manifest.Location_asArray[0]);\n                        log('BaseURI set by Location to: ' + baseUri);\n                    }\n\n                    manifest.baseUri = baseUri;\n                    manifest.loadedTime = new Date();\n                    xlinkController.resolveManifestOnLoad(manifest);\n                } else {\n                    eventBus.trigger(\n                        Events.INTERNAL_MANIFEST_LOADED, {\n                            manifest: null,\n                            error: new DashJSError(\n                                MANIFEST_LOADER_ERROR_PARSING_FAILURE,\n                                MANIFEST_LOADER_MESSAGE_PARSING_FAILURE\n                            )\n                        }\n                    );\n                }\n            },\n            error: function (xhr, statusText, errorText) {\n                eventBus.trigger(\n                    Events.INTERNAL_MANIFEST_LOADED, {\n                        manifest: null,\n                        error: new DashJSError(\n                            MANIFEST_LOADER_ERROR_LOADING_FAILURE,\n                            `Failed loading manifest: ${url}, ${errorText}`\n                        )\n                    }\n                );\n            }\n        });\n    }\n\n    function reset() {\n        eventBus.off(Events.XLINK_READY, onXlinkReady, instance);\n\n        if (xlinkController) {\n            xlinkController.reset();\n            xlinkController = null;\n        }\n\n        if (xhrLoader) {\n            xhrLoader.abort();\n            xhrLoader = null;\n        }\n\n        if (mssHandler) {\n            mssHandler.reset();\n        }\n    }\n\n    instance = {\n        load: load,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nManifestLoader.__dashjs_factory_name = 'ManifestLoader';\n\nconst factory = FactoryMaker.getClassFactory(ManifestLoader);\nfactory.MANIFEST_LOADER_ERROR_PARSING_FAILURE = MANIFEST_LOADER_ERROR_PARSING_FAILURE;\nfactory.MANIFEST_LOADER_ERROR_LOADING_FAILURE = MANIFEST_LOADER_ERROR_LOADING_FAILURE;\nFactoryMaker.updateClassFactory(ManifestLoader.__dashjs_factory_name, factory);\nexport default factory;\n"]}