{"version":3,"sources":["../../../../../src/streaming/controllers/EventController.js"],"names":[],"mappings":"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","file":"EventController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\n\nfunction EventController() {\n\n    const MPD_RELOAD_SCHEME = 'urn:mpeg:dash:event:2012';\n    const MPD_RELOAD_VALUE = 1;\n\n    let context = this.context;\n    let log = Debug(context).getInstance().log;\n    let eventBus = EventBus(context).getInstance();\n\n    let instance,\n        inlineEvents, // Holds all Inline Events not triggered yet\n        inbandEvents, // Holds all Inband Events not triggered yet\n        activeEvents, // Holds all Events currently running\n        eventInterval, // variable holding the setInterval\n        refreshDelay, // refreshTime for the setInterval\n        presentationTimeThreshold,\n        manifestModel,\n        manifestUpdater,\n        playbackController,\n        isStarted;\n\n    function setup() {\n        resetInitialSettings();\n    }\n\n    function resetInitialSettings() {\n        isStarted = false;\n        inlineEvents = {};\n        inbandEvents = {};\n        activeEvents = {};\n        eventInterval = null;\n        refreshDelay = 100;\n        presentationTimeThreshold = refreshDelay / 1000;\n    }\n\n    function checkSetConfigCall() {\n        if (!manifestModel || !manifestUpdater || !playbackController) {\n            throw new Error('setConfig function has to be called previously');\n        }\n    }\n\n    function stop() {\n        if (eventInterval !== null && isStarted) {\n            clearInterval(eventInterval);\n            eventInterval = null;\n            isStarted = false;\n        }\n    }\n\n    function start() {\n        checkSetConfigCall();\n        log('Start Event Controller');\n        if (!isStarted && !isNaN(refreshDelay)) {\n            isStarted = true;\n            eventInterval = setInterval(onEventTimer, refreshDelay);\n        }\n    }\n\n    /**\n     * Add events to the eventList. Events that are not in the mpd anymore but not triggered yet will still be deleted\n     * @param {Array.<Object>} values\n     */\n    function addInlineEvents(values) {\n        checkSetConfigCall();\n\n        inlineEvents = {};\n\n        if (values) {\n            for (var i = 0; i < values.length; i++) {\n                var event = values[i];\n                inlineEvents[event.id] = event;\n                log('Add inline event with id ' + event.id);\n            }\n        }\n        log('Added ' + values.length + ' inline events');\n    }\n\n    /**\n     * i.e. processing of any one event message box with the same id is sufficient\n     * @param {Array.<Object>} values\n     */\n    function addInbandEvents(values) {\n        checkSetConfigCall();\n\n        for (var i = 0; i < values.length; i++) {\n            var event = values[i];\n            if (!(event.id in inbandEvents)) {\n                if (event.eventStream.schemeIdUri === MPD_RELOAD_SCHEME && inbandEvents[event.id] === undefined) {\n                    handleManifestReloadEvent(event);\n                }\n                inbandEvents[event.id] = event;\n                log('Add inband event with id ' + event.id);\n            } else {\n                log('Repeated event with id ' + event.id);\n            }\n        }\n    }\n\n    function handleManifestReloadEvent(event) {\n        if (event.eventStream.value == MPD_RELOAD_VALUE) {\n            const timescale = event.eventStream.timescale || 1;\n            const validUntil = event.presentationTime / timescale;\n            let newDuration;\n            if (event.presentationTime == 0xFFFFFFFF) {//0xFF... means remaining duration unknown\n                newDuration = NaN;\n            } else {\n                newDuration = (event.presentationTime + event.duration) / timescale;\n            }\n            log('Manifest validity changed: Valid until: ' + validUntil + '; remaining duration: ' + newDuration);\n            eventBus.trigger(Events.MANIFEST_VALIDITY_CHANGED, {\n                id: event.id,\n                validUntil: validUntil,\n                newDuration: newDuration,\n                newManifestValidAfter: NaN //event.message_data - this is an arraybuffer with a timestring in it, but not used yet\n            });\n        }\n    }\n\n    /**\n     * Remove events which are over from the list\n     */\n    function removeEvents() {\n        if (activeEvents) {\n            var currentVideoTime = playbackController.getTime();\n            var eventIds = Object.keys(activeEvents);\n\n            for (var i = 0; i < eventIds.length; i++) {\n                var eventId = eventIds[i];\n                var curr = activeEvents[eventId];\n                if (curr !== null && (curr.duration + curr.presentationTime) / curr.eventStream.timescale < currentVideoTime) {\n                    log('Remove Event ' + eventId + ' at time ' + currentVideoTime);\n                    curr = null;\n                    delete activeEvents[eventId];\n                }\n            }\n        }\n    }\n\n    /**\n     * Iterate through the eventList and trigger/remove the events\n     */\n    function onEventTimer() {\n        triggerEvents(inbandEvents);\n        triggerEvents(inlineEvents);\n        removeEvents();\n    }\n\n    function refreshManifest() {\n        checkSetConfigCall();\n        manifestUpdater.refreshManifest();\n    }\n\n    function triggerEvents(events) {\n        var currentVideoTime = playbackController.getTime();\n        var presentationTime;\n\n        /* == Trigger events that are ready == */\n        if (events) {\n            var eventIds = Object.keys(events);\n            for (var i = 0; i < eventIds.length; i++) {\n                var eventId = eventIds[i];\n                var curr = events[eventId];\n\n                if (curr !== undefined) {\n                    presentationTime = curr.presentationTime / curr.eventStream.timescale;\n                    if (presentationTime === 0 || (presentationTime <= currentVideoTime && presentationTime + presentationTimeThreshold > currentVideoTime)) {\n                        log('Start Event ' + eventId + ' at ' + currentVideoTime);\n                        if (curr.duration > 0) {\n                            activeEvents[eventId] = curr;\n                        }\n                        if (curr.eventStream.schemeIdUri == MPD_RELOAD_SCHEME && curr.eventStream.value == MPD_RELOAD_VALUE) {\n                            if (curr.duration !== 0 || curr.presentationTimeDelta !== 0) { //If both are set to zero, it indicates the media is over at this point. Don't reload the manifest.\n                                refreshManifest();\n                            }\n                        } else {\n                            eventBus.trigger(curr.eventStream.schemeIdUri, {event: curr});\n                        }\n                        delete events[eventId];\n                    }\n                }\n            }\n        }\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.manifestModel) {\n            manifestModel = config.manifestModel;\n        }\n\n        if (config.manifestUpdater) {\n            manifestUpdater = config.manifestUpdater;\n        }\n\n        if (config.playbackController) {\n            playbackController = config.playbackController;\n        }\n    }\n\n    function reset() {\n        stop();\n        resetInitialSettings();\n    }\n\n    instance = {\n        addInlineEvents: addInlineEvents,\n        addInbandEvents: addInbandEvents,\n        stop: stop,\n        start: start,\n        setConfig: setConfig,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nEventController.__dashjs_factory_name = 'EventController';\nexport default FactoryMaker.getClassFactory(EventController);\n"]}