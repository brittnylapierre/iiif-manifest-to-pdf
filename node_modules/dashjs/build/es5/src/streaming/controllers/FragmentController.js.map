{"version":3,"sources":["../../../../../src/streaming/controllers/FragmentController.js"],"names":[],"mappings":"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","file":"FragmentController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\nimport DataChunk from '../vo/DataChunk';\nimport FragmentModel from '../models/FragmentModel';\nimport FragmentLoader from '../FragmentLoader';\nimport RequestModifier from '../utils/RequestModifier';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\n\nfunction FragmentController( config ) {\n\n    config = config || {};\n    const context = this.context;\n    const log = Debug(context).getInstance().log;\n    const eventBus = EventBus(context).getInstance();\n\n    const errHandler = config.errHandler;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const metricsModel = config.metricsModel;\n\n    let instance,\n        fragmentModels;\n\n    function setup() {\n        resetInitialSettings();\n        eventBus.on(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);\n    }\n\n    function getModel(type) {\n        let model = fragmentModels[type];\n        if (!model) {\n            model = FragmentModel(context).create({\n                metricsModel: metricsModel,\n                fragmentLoader: FragmentLoader(context).create({\n                    metricsModel: metricsModel,\n                    mediaPlayerModel: mediaPlayerModel,\n                    errHandler: errHandler,\n                    requestModifier: RequestModifier(context).getInstance()\n                })\n            });\n\n            fragmentModels[type] = model;\n        }\n\n        return model;\n    }\n\n    function isInitializationRequest(request) {\n        return (request && request.type && request.type === HTTPRequest.INIT_SEGMENT_TYPE);\n    }\n\n    function resetInitialSettings() {\n        for (let model in fragmentModels) {\n            fragmentModels[model].reset();\n        }\n        fragmentModels = {};\n    }\n\n    function reset() {\n        eventBus.off(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n        resetInitialSettings();\n    }\n\n    function createDataChunk(bytes, request, streamId) {\n        const chunk = new DataChunk();\n\n        chunk.streamId = streamId;\n        chunk.mediaInfo = request.mediaInfo;\n        chunk.segmentType = request.type;\n        chunk.start = request.startTime;\n        chunk.duration = request.duration;\n        chunk.end = chunk.start + chunk.duration;\n        chunk.bytes = bytes;\n        chunk.index = request.index;\n        chunk.quality = request.quality;\n        chunk.representationId = request.representationId;\n\n        return chunk;\n    }\n\n    function onFragmentLoadingCompleted(e) {\n        if (fragmentModels[e.request.mediaType] !== e.sender) {\n            return;\n        }\n\n        const request = e.request;\n        const bytes = e.response;\n        const isInit = isInitializationRequest(request);\n        const streamInfo = request.mediaInfo.streamInfo;\n\n        if (e.error ) {\n            if (e.request.mediaType === Constants.AUDIO || e.request.mediaType === Constants.VIDEO) {\n                // add service location to blacklist controller - only for audio or video. text should not set errors\n                eventBus.trigger(Events.SERVICE_LOCATION_BLACKLIST_ADD, {entry: e.request.serviceLocation});\n            }\n        }\n\n        if (!bytes || !streamInfo) {\n            log('No ' + request.mediaType + ' bytes to push or stream is inactive.');\n            return;\n        }\n\n        const chunk = createDataChunk(bytes, request, streamInfo.id);\n        eventBus.trigger(isInit ? Events.INIT_FRAGMENT_LOADED : Events.MEDIA_FRAGMENT_LOADED, {\n            chunk: chunk,\n            fragmentModel: e.sender\n        });\n    }\n\n    instance = {\n        getModel: getModel,\n        isInitializationRequest: isInitializationRequest,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nFragmentController.__dashjs_factory_name = 'FragmentController';\nexport default FactoryMaker.getClassFactory(FragmentController);\n"]}