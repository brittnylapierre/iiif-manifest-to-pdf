{"version":3,"sources":["../../../../../src/streaming/controllers/ScheduleController.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;gMA8BsB,wBAAwB,sGAClB,wBAAwB,6BAC1B,iBAAiB,2FACd,oBAAoB,+GACrB,qCAAqC,mJAC7B,6CAA6C,gJACvD,yBAAyB,mGAC9B,qBAAqB,yFACvB,0BAA0B,iGACpB,yBAAyB,0FAChC,kBAAkB,kFACR,mBAAmB,iEAE/C,SAAS,kBAAkB,CAAC,MAAM,CAAE,CAEhC,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC,AACtB,IAAM,OAAO,CAAG,IAAI,CAAC,OAAO,CAAC,AAC7B,IAAM,QAAQ,CAAG,8BAAS,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC,AACjD,IAAM,YAAY,CAAG,MAAM,CAAC,YAAY,CAAC,AACzC,IAAM,OAAO,CAAG,MAAM,CAAC,OAAO,CAAC,AAC/B,IAAM,WAAW,CAAG,MAAM,CAAC,WAAW,CAAC,AACvC,IAAM,iBAAiB,CAAG,MAAM,CAAC,iBAAiB,CAAC,AACnD,IAAM,iBAAiB,CAAG,MAAM,CAAC,iBAAiB,CAAC,AACnD,IAAM,gBAAgB,CAAG,MAAM,CAAC,gBAAgB,CAAC,AACjD,IAAM,aAAa,CAAG,MAAM,CAAC,aAAa,CAAC,AAC3C,IAAM,kBAAkB,CAAG,MAAM,CAAC,kBAAkB,CAAC,AACrD,IAAM,gBAAgB,CAAG,MAAM,CAAC,gBAAgB,CAAC,AACjD,IAAM,cAAc,CAAG,MAAM,CAAC,cAAc,CAAC,AAC7C,IAAM,IAAI,CAAG,MAAM,CAAC,IAAI,CAAC,AACzB,IAAM,eAAe,CAAG,MAAM,CAAC,eAAe,CAAC,AAC/C,IAAM,eAAe,CAAG,MAAM,CAAC,eAAe,CAAC,AAE/C,IAAI,QAAQ,UAAA,CACR,GAAG,UAAA,CACH,aAAa,UAAA,CACb,yBAAyB,UAAA,CACzB,cAAc,UAAA,CACd,SAAS,UAAA,CACT,eAAe,UAAA,CACf,oBAAoB,UAAA,CACpB,0BAA0B,UAAA,CAC1B,8BAA8B,UAAA,CAC9B,eAAe,UAAA,CACf,eAAe,UAAA,CACf,UAAU,UAAA,CACV,eAAe,UAAA,CACf,uBAAuB,UAAA,CACvB,mBAAmB,UAAA,CACnB,mBAAmB,UAAA,CACnB,eAAe,UAAA,CACf,eAAe,UAAA,CACf,mBAAmB,UAAA,CACnB,WAAW,UAAA,CACX,qBAAqB,UAAA,CACrB,YAAY,UAAA,CAAC,AAEjB,SAAS,KAAK,EAAG,CACb,GAAG,GAAG,2BAAM,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,AAEtD,oBAAoB,EAAE,CAAC,CAC1B,AAED,SAAS,UAAU,EAAG,CAClB,aAAa,GAAG,eAAe,CAAC,gBAAgB,EAAE,CAAC,AACnD,mBAAmB,GAAG,gBAAgB,CAAC,sBAAsB,EAAE,CAAC,AAEhE,eAAe,GAAG,gDAAgB,OAAO,CAAC,CAAC,MAAM,CAAC,CAC9C,aAAa,CAAE,aAAa,CAC5B,WAAW,CAAE,WAAW,CACxB,YAAY,CAAE,YAAY,CAC1B,gBAAgB,CAAE,gBAAgB,CAClC,cAAc,CAAE,cAAc,CACjC,CAAC,CAAC,AAEH,uBAAuB,GAAG,wDAAwB,OAAO,CAAC,CAAC,MAAM,CAAC,CAC9D,OAAO,CAAE,OAAO,CAChB,cAAc,CAAE,cAAc,CACjC,CAAC,CAAC,AAEH,GAAI,iBAAiB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAE,CACxC,QAAQ,CAAC,EAAE,CAAC,8BAAO,oBAAoB,CAAE,oBAAoB,CAAE,IAAI,CAAC,CAAC,CACxE;AAGD,QAAQ,CAAC,EAAE,CAAC,8BAAO,wBAAwB,CAAE,gBAAgB,CAAE,IAAI,CAAC,CAAC,AACrE,QAAQ,CAAC,EAAE,CAAC,8BAAO,mBAAmB,CAAE,mBAAmB,CAAE,IAAI,CAAC,CAAC,AACnE,QAAQ,CAAC,EAAE,CAAC,8BAAO,qBAAqB,CAAE,qBAAqB,CAAE,IAAI,CAAC,CAAC,AACvE,QAAQ,CAAC,EAAE,CAAC,8BAAO,0BAA0B,CAAE,0BAA0B,CAAE,IAAI,CAAC,CAAC,AACjF,QAAQ,CAAC,EAAE,CAAC,8BAAO,gBAAgB,CAAE,iBAAiB,CAAE,IAAI,CAAC,CAAC,AAC9D,QAAQ,CAAC,EAAE,CAAC,8BAAO,kBAAkB,CAAE,mBAAmB,CAAE,IAAI,CAAC,CAAC,AAClE,QAAQ,CAAC,EAAE,CAAC,8BAAO,0BAA0B,CAAE,yBAAyB,CAAE,IAAI,CAAC,CAAC,AAChF,QAAQ,CAAC,EAAE,CAAC,8BAAO,cAAc,CAAE,eAAe,CAAE,IAAI,CAAC,CAAC,AAC1D,QAAQ,CAAC,EAAE,CAAC,8BAAO,cAAc,CAAE,eAAe,CAAE,IAAI,CAAC,CAAC,AAC1D,QAAQ,CAAC,EAAE,CAAC,8BAAO,cAAc,CAAE,eAAe,CAAE,IAAI,CAAC,CAAC,AAC1D,QAAQ,CAAC,EAAE,CAAC,8BAAO,cAAc,CAAE,eAAe,CAAE,IAAI,CAAC,CAAC,AAC1D,QAAQ,CAAC,EAAE,CAAC,8BAAO,gBAAgB,CAAE,iBAAiB,CAAE,IAAI,CAAC,CAAC,AAC9D,QAAQ,CAAC,EAAE,CAAC,8BAAO,gBAAgB,CAAE,iBAAiB,CAAE,IAAI,CAAC,CAAC,AAC9D,QAAQ,CAAC,EAAE,CAAC,8BAAO,qBAAqB,CAAE,qBAAqB,CAAE,IAAI,CAAC,CAAC,AACvE,QAAQ,CAAC,EAAE,CAAC,8BAAO,qBAAqB,CAAE,qBAAqB,CAAE,IAAI,CAAC,CAAC,AACvE,QAAQ,CAAC,EAAE,CAAC,8BAAO,qBAAqB,CAAE,qBAAqB,CAAE,IAAI,CAAC,CAAC,AACvE,QAAQ,CAAC,EAAE,CAAC,8BAAO,0BAA0B,CAAE,0BAA0B,CAAE,IAAI,CAAC,CAAC,CACpF,AAED,SAAS,SAAS,EAAG,CACjB,OAAQ,SAAS,KAAK,KAAK,CAAE,CAChC,AAED,SAAS,KAAK,EAAG,CACb,GAAI,CAAC,yBAAyB,IAAI,eAAe,CAAC,oBAAoB,EAAE,CAAE,CACtE,GAAG,CAAC,uBAAuB,CAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,AACpD,OAAO,CACV,AACD,GAAG,CAAC,uBAAuB,CAAE,IAAI,CAAC,SAAS,CAAC,CAAC,AAC7C,uBAAuB,EAAE,CAAC,AAC1B,SAAS,GAAG,KAAK,CAAC,AAElB,GAAI,cAAc,CAAE,CAChB,cAAc,GAAG,KAAK,CAAC,CAC1B,AAED,kBAAkB,CAAC,CAAC,CAAC,CAAC,CACzB,AAED,SAAS,IAAI,EAAG,CACZ,GAAI,SAAS,CAAE,CACX,OAAO,CACV,AACD,GAAG,CAAC,uBAAuB,CAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,AAC5C,SAAS,GAAG,IAAI,CAAC,AACjB,YAAY,CAAC,eAAe,CAAC,CAAC,CACjC,AAED,SAAS,oBAAoB,CAAC,IAAI,CAAE,EAAE,CAAE,CACpC,eAAe,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,AAChD,IAAM,kBAAkB,CAAG,aAAa,CAAC,qBAAqB,CAAC,IAAI,CAAE,EAAE,CAAC,CAAC,AAEzE,GAAI,eAAe,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,kBAAkB,CAAE,CACjD,GAAG,CAAC,cAAc,GAAG,IAAI,GAAG,0BAA0B,GAAG,eAAe,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,MAAM,GAAG,kBAAkB,CAAC,CAAC,AAClH,eAAe,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,kBAAkB,CAAC,AAC/C,OAAO,IAAI,CAAC,CACf,AACD,OAAO,KAAK,CAAC,CAEhB,AAED,SAAS,QAAQ,EAAG,CAChB,GAAI,SAAS,IAAI,8BAA8B,IAAI,CAAC,eAAe,CAAC,mBAAmB,EAAE,IAAI,kBAAkB,CAAC,QAAQ,EAAE,IAAI,CAAC,mBAAmB,CAAE,CAChJ,GAAG,CAAC,uBAAuB,CAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC,AACxD,OAAO,CACV,AAED,+BAA+B,EAAE,CAAC,AAElC,IAAM,aAAa,CAAG,mBAAmB,CAAC,MAAM,GAAG,CAAC,CAAC,AACrD,IAAM,UAAU,CAAG,eAAe,CAAC,aAAa,EAAE,CAAC,AACnD,GAAI,qBAAqB,IAAI,KAAK,CAAC,eAAe,CAAC,IAAI,WAAW,IAAI,aAAa,IAC/E,oBAAoB,CAAC,yBAAyB,CAAC,SAAS,CAAC,IAAI,CAAE,UAAU,CAAC,EAAE,CAAC,IAC7E,eAAe,CAAC,OAAO,CAAC,eAAe,CAAE,IAAI,CAAE,gBAAgB,CAAC,mBAAmB,EAAE,CAAC,CAAE,CAExF,IAAM,eAAe,CAAG,SAAlB,eAAe,EAAe,CAChC,IAAM,kBAAkB,CAAG,eAAe,CAAC,qBAAqB,EAAE,CAAC,AACnE,GAAI,yBAAyB,CAAC,OAAO,KAAK,eAAe,CAAE,CACvD,GAAG,CAAC,uBAAuB,GAAG,IAAI,GAAG,kEAAkE,GAAG,yBAAyB,CAAC,EAAE,CAAC,CAAC,AACxI,eAAe,GAAG,yBAAyB,CAAC,OAAO,CAAC,AAEpD,eAAe,CAAC,cAAc,CAAC,yBAAyB,CAAC,EAAE,CAAC,CAAC,CAChE,KAAM,GAAI,WAAW,CAAE,CACpB,GAAG,CAAC,uBAAuB,GAAG,IAAI,GAAG,uDAAuD,GAAG,IAAI,GAAG,2BAA2B,GAAG,yBAAyB,CAAC,EAAE,CAAC,CAAC,AAClK,qBAAqB,GAAG,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,6BAAgB,gCAAgC,CAAG,IAAI,CAAG,KAAK,CAAC,AAChI,eAAe,CAAC,cAAc,CAAC,yBAAyB,CAAC,EAAE,CAAE,qBAAqB,CAAC,CAAC,AACpF,eAAe,GAAG,yBAAyB,CAAC,OAAO,CAAC,AACpD,WAAW,GAAG,KAAK,CAAC,CACvB,KAAM,CACH,IAAM,WAAW,CAAG,mBAAmB,CAAC,KAAK,EAAE,CAAC,AAEhD,GAAI,kBAAkB,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAE;AAEzD,eAAe,CAAC,cAAc,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAChE,KAAM,CACH,IAAI,OAAO,UAAA,CAAC;AAEZ,GAAI,CAAC,eAAe,CAAC,mBAAmB,EAAE,CAAC,sBAAsB,EAAE,CAAE,CACjE,OAAO,GAAG,uBAAuB,CAAC,OAAO,CAAC,eAAe,CAAE,WAAW,CAAC,CAAC,AACxE,GAAI,CAAC,OAAO,IAAI,UAAU,CAAC,YAAY,IAAI,UAAU,CAAC,YAAY,CAAC,SAAS,CAAE,CAC1E,GAAG,CAAC,oBAAoB,GAAG,IAAI,GAAG,oEAAoE,CAAC,CAAC,CAC3G,CACJ,AAED,GAAI,OAAO,CAAE,CACT,GAAG,CAAC,uBAAuB,GAAG,IAAI,GAAG,kCAAkC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,AACvF,aAAa,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CACzC,KAAM;AACH,uBAAuB,CAAC,KAAK,CAAC,CAAC,AAC/B,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAC3B,CACJ,CACJ,CACJ,CAAC,AAEF,uBAAuB,CAAC,IAAI,CAAC,CAAC,AAC9B,GAAI,CAAC,aAAa,IAAI,CAAC,WAAW,CAAE,CAChC,aAAa,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAC5C,AAED,eAAe,EAAE,CAAC,CAErB,KAAM,CACH,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAC3B,CACJ,AAED,SAAS,+BAA+B,EAAG;;AAGvC,IAAM,eAAe,CAAG,yBAAyB,CAAC,gBAAgB,GAAG,GAAG,CAAC,AACzE,IAAM,OAAO,CAAG,aAAa,CAAC,WAAW,CAAC,CACtC,KAAK,CAAE,iCAAc,uBAAuB,CAC5C,IAAI,CAAE,kBAAkB,CAAC,OAAO,EAAE,GAAG,eAAe,CACpD,SAAS,CAAE,CAAC,CACf,CAAC,CAAC,CAAC,CAAC,CAAC,AAEN,GAAI,OAAO,IAAI,mBAAmB,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAE,CACnG,IAAM,qBAAqB,CAAG,gBAAgB,CAAC,oBAAoB,EAAE,CAAC,AACtE,IAAM,WAAW,CAAG,eAAe,CAAC,cAAc,EAAE,CAAC,AACrD,IAAM,gBAAgB,CAAG,aAAa,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,AAEpE,GAAI,qBAAqB,IAAI,OAAO,CAAC,OAAO,GAAG,yBAAyB,CAAC,OAAO,IAAI,WAAW,IAAI,eAAe,IAAI,gBAAgB,KAAK,2BAAc,YAAY,CAAE,CACnK,cAAc,CAAC,OAAO,CAAC,CAAC,AACxB,GAAG,CAAC,wCAAwC,CAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAChE,KAAM,GAAI,OAAO,CAAC,OAAO,GAAG,yBAAyB,CAAC,OAAO,CAAE;AAE5D,aAAa,CAAC,kBAAkB,CAAC,OAAO,EAAE,GAAG,eAAe,CAAC,cAAc,EAAE,CAAC,CAAC,CAClF,CACJ,CACJ,AAED,SAAS,kBAAkB,CAAC,KAAK,CAAE;AAE/B,YAAY,CAAC,eAAe,CAAC,CAAC,AAC9B,eAAe,GAAG,UAAU,CAAC,QAAQ,CAAE,KAAK,CAAC,CAAC,CACjD,AAED,SAAS,eAAe,CAAC,CAAC,CAAE,CACxB,GAAI,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,CAAC,kBAAkB,EAAE,KAAK,eAAe,CAAE,CAChE,OAAO,CACV,AAED,cAAc,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC,CACrD,AAED,SAAS,uBAAuB,CAAE,KAAK,CAAE,CACrC,GAAI,8BAA8B,KAAK,KAAK,CAAG,CAC3C,8BAA8B,GAAG,KAAK,CAAC,CAC1C,KAAM,CACH,GAAG,CAAC,uBAAuB,CAAE,IAAI,CAAE,sDAAsD,CAAE,KAAK,CAAC,CAAC,CACrG,CACJ,AAED,SAAS,cAAc,CAAC,OAAO,CAAE,CAC7B,IAAM,OAAO,CAAG,OAAO,CAAC,cAAc,CAAC,eAAe,CAAE,OAAO,CAAC,CAAC,AACjE,GAAI,OAAO,CAAE,CACT,uBAAuB,CAAC,IAAI,CAAC,CAAC,AAC9B,aAAa,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CACzC,CACJ,AAED,SAAS,gBAAgB,EAAG,CACxB,WAAW,GAAG,IAAI,CAAC,CACtB,AAED,SAAS,cAAc,CAAC,OAAO,CAAE,CAC7B,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CACrC,AAED,SAAS,gBAAgB,CAAC,CAAC,CAAE,CACzB,GAAI,IAAI,KAAK,CAAC,CAAC,SAAS,IAAI,eAAe,CAAC,aAAa,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,UAAU,CAAC,EAAE,CAAE,CAChF,OAAO,CACV,AAED,yBAAyB,GAAG,eAAe,CAAC,+BAA+B,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,AAE1F,GAAI,yBAAyB,KAAK,IAAI,IAAI,yBAAyB,KAAK,SAAS,CAAE,CAC/E,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC,CACzF,AAED,yBAAyB,CAAC,IAAI,IAAI,EAAE,CAAE,iCAAc,iCAAiC,CAAC,CAAC,AACvF,uBAAuB,EAAE,CAAC,CAC7B,AAED,SAAS,qBAAqB,CAAC,OAAO,CAAE,CACpC,GAAI,kBAAkB,IAAI,aAAa,CAAE,CACrC,IAAM,IAAI,CAAG,aAAa,CAAC,WAAW,CAAC,CACnC,KAAK,CAAE,iCAAc,uBAAuB,CAC5C,IAAI,CAAE,kBAAkB,CAAC,OAAO,EAAE,CAClC,SAAS,CAAE,CAAC,CACf,CAAC,CAAC,CAAC,CAAC,CAAC,AACN,GAAI,IAAI,IAAI,kBAAkB,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,SAAS,CAAE,CACxD,GAAI,CAAC,CAAC,mBAAmB,CAAC,SAAS,IAAK,IAAI,CAAC,SAAS,CAAC,IAAI,KAAK,mBAAmB,CAAC,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,mBAAmB,CAAC,SAAS,CAAC,EAAE,CAAC,IAAK,OAAO,CAAE,CACvK,QAAQ,CAAC,OAAO,CAAC,8BAAO,qBAAqB,CAAE,CAC3C,SAAS,CAAE,IAAI,CACf,YAAY,CAAE,mBAAmB,CAAC,SAAS,CAC3C,YAAY,CAAE,IAAI,CAAC,SAAS,CAC/B,CAAC,CAAC,CACN,AACD,GAAI,CAAC,IAAI,CAAC,OAAO,KAAK,mBAAmB,CAAC,OAAO,IAAI,IAAI,CAAC,eAAe,KAAK,mBAAmB,CAAC,eAAe,CAAA,IAAK,OAAO,CAAE,CAC3H,QAAQ,CAAC,OAAO,CAAC,8BAAO,uBAAuB,CAAE,CAC7C,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,mBAAmB,CAAC,OAAO,CACvC,UAAU,CAAE,IAAI,CAAC,OAAO,CAC3B,CAAC,CAAC,CACN,AACD,mBAAmB,GAAG,CAClB,SAAS,CAAE,IAAI,CAAC,SAAS,CACzB,OAAO,CAAE,IAAI,CAAC,OAAO,CACrB,eAAe,CAAE,IAAI,CAAC,eAAe,CACxC,CAAC,CACL,CACJ,CACJ,AAED,SAAS,qBAAqB,CAAC,CAAC,CAAE,CAC9B,GAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,MAAM,CAAC,kBAAkB,EAAE,KAAK,eAAe,CAAE,CAC9D,OAAO,CACV,AAED,yBAAyB,GAAG,OAAO,CAAC,+BAA+B,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAChG,AAED,SAAS,mBAAmB,CAAC,CAAC,CAAE,CAC5B,GAAI,CAAC,CAAC,KAAK,IAAI,eAAe,CAAC,aAAa,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,UAAU,CAAC,EAAE,CAAE,CACnE,OAAO,CACV,AAED,yBAAyB,GAAG,eAAe,CAAC,4BAA4B,EAAE,CAAC,AAE3E,GAAI,cAAc,CAAE,CAChB,GAAI,kBAAkB,CAAC,YAAY,EAAE,CAAE,CACnC,iBAAiB,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,AAC7C,qBAAqB,EAAE,CAAC,CAC3B,KAAM,CACH,UAAU,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,AAC1D,eAAe,CAAC,mBAAmB,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CACtE,CACJ,AAED,GAAI,SAAS,CAAE,CACX,KAAK,EAAE,CAAC,CACX,CACJ,AAED,SAAS,qBAAqB,EAAG,CAC7B,IAAM,cAAc,CAAG,eAAe,CAAC,iBAAiB,EAAE,CAAC,AAC3D,GAAI,cAAc,CAAE,CAChB,IAAM,QAAQ,CAAG,cAAc,CAAC,WAAW,EAAE,CAAC,AAC9C,IAAM,aAAa,CAAG,yBAAyB,CAAC,SAAS,CAAC,UAAU,CAAC,YAAY,CAAC,aAAa,GAAG,CAAC,CAAC,AACpG,IAAM,SAAS,CAAG,QAAQ,GAAG,kBAAkB,CAAC,gBAAgB,CAAC,yBAAyB,CAAC,gBAAgB,CAAE,aAAa,CAAC,CAAC,AAC5H,IAAM,OAAO,CAAG,OAAO,CAAC,yBAAyB,CAAC,eAAe,CAAE,yBAAyB,CAAE,SAAS,CAAE,CACrG,gBAAgB,CAAE,IAAI,CACzB,CAAC,CAAC,AAEH,kBAAkB,CAAC,gBAAgB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,AACvD,UAAU,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,KAAK,CAAE,QAAQ,CAAC,CAAC;;AAIpE,GAAI,UAAU,GAAI,yBAAyB,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,GAAG,yBAAyB,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,AAAC,CAAE,CAC/H,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CACvC,AAED,IAAM,kBAAkB,CAAG,WAAW,CAAC,wBAAwB,CAAC,YAAY,CAAC,aAAa,CAAC,gCAAU,MAAM,CAAC,CAAC,CAAC,AAC9G,YAAY,CAAC,wBAAwB,CAAC,kBAAkB,CAAE,CACtD,WAAW,CAAE,UAAU,CACvB,qBAAqB,CAAE,QAAQ,CAC/B,OAAO,CAAE,QAAQ,GAAG,UAAU,CAC9B,gBAAgB,CAAE,iBAAiB,CAAC,mBAAmB,EAAE,CAC5D,CAAC,CAAC,CACN,CACJ,AAED,SAAS,iBAAiB,CAAC,CAAC,CAAE,CAC1B,GAAI,CAAC,CAAC,aAAa,KAAK,aAAa,CAAE,CACnC,OAAO,CACV,AAED,IAAI,EAAE,CAAC,AACP,uBAAuB,CAAC,KAAK,CAAC,CAAC,AAC/B,GAAG,CAAC,yCAAyC,CAAC,CAAC,CAClD,AAED,SAAS,0BAA0B,CAAC,CAAC,CAAE,CACnC,GAAI,CAAC,CAAC,MAAM,KAAK,aAAa,CAAE,CAC5B,OAAO,CACV,AACD,GAAG,CAAC,uBAAuB,CAAE,IAAI,CAAC,gCAAgC,CAAC,CAAC,AACpE,GAAI,iBAAiB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAE,CACxC,uBAAuB,CAAC,KAAK,CAAC,CAAC,CAClC,AAED,GAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,OAAO,CAAC,eAAe,IAAI,CAAC,SAAS,CAAE,CACpD,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,AAC1B,uBAAuB,CAAC,KAAK,CAAC,CAAC,AAC/B,kBAAkB,CAAC,CAAC,CAAC,CAAC,CACzB,AAED,GAAI,qBAAqB,CAAE,CACvB,YAAY,GAAG,CAAC,CAAC,OAAO,CAAC,CAC5B,CACJ,AAED,SAAS,qBAAqB,EAAG,CAC7B,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAC/B,AAED,SAAS,eAAe,CAAC,CAAC,CAAE,CACxB,GAAI,CAAC,CAAC,MAAM,CAAC,kBAAkB,EAAE,KAAK,eAAe,CAAE,CACnD,OAAO,CACV,AAED,GAAI,qBAAqB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAE,CAC9C,qBAAqB,GAAG,KAAK,CAAC,AAC9B,aAAa,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAClD,AAED,uBAAuB,CAAC,KAAK,CAAC,CAAC,AAC/B,kBAAkB,CAAC,CAAC,CAAC,CAAC,CACzB,AAED,SAAS,0BAA0B,CAAC,CAAC,CAAE,CACnC,GAAI,CAAC,CAAC,eAAe,KAAK,eAAe,CAAE,CACvC,OAAO,CACV,AACD,GAAG,CAAC,uDAAuD,GAAG,IAAI,GAAG,aAAa,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,GAAG,mBAAmB,CAAC,CAAC,AAC1H,GAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAE,CACjC,GAAG,CAAC,uDAAuD,GAAG,IAAI,GAAG,aAAa,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,GAAG,4DAA4D,CAAC,CAAC,AACnK,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAC7B,AACD,uBAAuB,CAAC,KAAK,CAAC,CAAC,AAC/B,kBAAkB,CAAC,CAAC,CAAC,CAAC,CACzB,AAED,SAAS,mBAAmB,CAAC,CAAC,CAAE,CAC5B,GAAI,CAAC,CAAC,MAAM,CAAC,kBAAkB,EAAE,KAAK,eAAe,CAAE,CACnD,OAAO,CACV,AAED,IAAI,EAAE,CAAC,CACV,AAED,SAAS,eAAe,CAAC,CAAC,CAAE,CACxB,GAAI,CAAC,CAAC,MAAM,CAAC,kBAAkB,EAAE,KAAK,eAAe,CAAE,CACnD,OAAO,CACV,AAED,eAAe,CAAC,gBAAgB,EAAE,CAAC,qCAAqC,CACpE,eAAe,CAAC,mBAAmB,EAAE,CAAC,SAAS,EAAE,CAAC,kBAAkB,EAAE,CACtE,eAAe,CAAC,aAAa,EAAE,CAAC,QAAQ,CAAC,CAAC,AAE9C,GAAI,CAAC,CAAC,sBAAsB,IAAI,SAAS,CAAE,CACvC,KAAK,EAAE,CAAC,CACX,CACJ,AAED,SAAS,yBAAyB,CAAC,CAAC,CAAE,CAClC,GAAI,AAAC,CAAC,CAAC,MAAM,CAAC,kBAAkB,EAAE,KAAK,eAAe,IAAK,CAAC,CAAC,KAAK,KAAK,8BAAiB,YAAY,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAE,CACrI,GAAG,CAAC,uBAAuB,CAAE,IAAI,CAAC,gCAAgC,CAAC,CAAC,AACpE,yBAAyB,CAAC,IAAI,IAAI,EAAE,CAAE,iCAAc,kBAAkB,CAAC,CAAC,CAC3E,CACJ,AAED,SAAS,eAAe,CAAC,CAAC,CAAE,CACxB,GAAI,CAAC,CAAC,MAAM,CAAC,kBAAkB,EAAE,KAAK,eAAe,CAAE,CACnD,OAAO,CACV,AAED,IAAI,EAAE,CAAC,AACP,uBAAuB,CAAC,KAAK,CAAC,CAAC,CAClC,AAED,SAAS,qBAAqB,EAAG,CAC7B,aAAa,CAAC,aAAa,EAAE,CAAC,AAC9B,IAAI,EAAE,CAAC,CACV,AAED,SAAS,oBAAoB,CAAC,CAAC,CAAE,CAC7B,GAAI,CAAC,CAAC,MAAM,CAAC,kBAAkB,EAAE,KAAK,eAAe,CAAE,CACnD,OAAO,CACV,AAED,cAAc,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAC3B,AAED,SAAS,iBAAiB,EAAG,CACzB,GAAI,SAAS,IAAI,CAAC,mBAAmB,CAAE,CACnC,KAAK,EAAE,CAAC,CACX,CACJ,AAED,SAAS,iBAAiB,CAAC,CAAC,CAAE,CAC1B,UAAU,GAAG,CAAC,CAAC,QAAQ,CAAC,AACxB,kBAAkB,CAAC,CAAC,CAAC,CAAC,AAEtB,GAAI,SAAS,CAAE,CACX,KAAK,EAAE,CAAC,CACX,AAED,IAAM,kBAAkB,CAAG,WAAW,CAAC,wBAAwB,CAAC,YAAY,CAAC,aAAa,CAAC,gCAAU,MAAM,CAAC,CAAC,CAAC,AAC9G,IAAM,OAAO,CAAG,yBAAyB,CAAC,SAAS,IAAI,kBAAkB,CAAG,yBAAyB,CAAC,SAAS,CAAC,GAAG,GAAG,kBAAkB,CAAC,OAAO,EAAE,CAAG,GAAG,CAAC,AACzJ,YAAY,CAAC,wBAAwB,CAAC,kBAAkB,CAAE,CACtD,OAAO,CAAE,OAAO,CACnB,CAAC,CAAC;AAGH,GAAI,CAAC,8BAA8B,CAAE,CACjC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CACzB,KAAM,CACH,GAAG,CAAC,8CAA8C,GAAG,IAAI,GAAG,6DAA6D,CAAC,CAAC,AAC3H,aAAa,CAAC,aAAa,EAAE,CAAC,CACjC,CACJ,AAED,SAAS,qBAAqB,CAAC,CAAC,CAAE,CAC9B,GAAI,oBAAoB,CAAE,CACtB,oBAAoB,CAAC,aAAa,GAAG,CAAC,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAClE,CACJ,AAED,SAAS,aAAa,EAAG,CACrB,OAAO,UAAU,CAAC,CACrB,AAED,SAAS,aAAa,CAAC,KAAK,CAAE,CAC1B,UAAU,GAAG,KAAK,CAAC,CACtB,AAED,SAAS,kBAAkB,CAAC,KAAK,CAAE,CAC/B,eAAe,GAAG,KAAK,CAAC,CAC3B,AAED,SAAS,kBAAkB,EAAG,CAC1B,OAAO,eAAe,CAAC,CAC1B,AAED,SAAS,eAAe,EAAG,CACvB,OAAO,eAAe,CAAC,eAAe,CAAC,eAAe,CAAE,IAAI,CAAE,gBAAgB,CAAC,mBAAmB,EAAE,CAAC,CAAC,CACzG,AAED,SAAS,OAAO,EAAG,CACf,OAAO,IAAI,CAAC,CACf,AAED,SAAS,WAAW,CAAC,QAAQ,CAAE,CAC3B,eAAe,GAAG,QAAQ,CAAC,CAC9B,AAED,SAAS,gBAAgB,CAAC,IAAI,CAAE,MAAM,CAAE,CACpC,yBAAyB,CAAC,IAAI,CAAE,MAAM,CAAC,CAAC,AACxC,eAAe,GAAG,IAAI,CAAC,CAC1B,AAED,SAAS,yBAAyB,CAAC,OAAO,CAAE,UAAU,CAAE,CACpD,GAAI,eAAe,IAAI,0BAA0B,KAAK,KAAK,CAAE,CACzD,IAAM,SAAS,CAAG,oBAAoB,CAAC,KAAK,CAAC,AAC7C,IAAM,QAAQ,CAAG,OAAO,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC,AACzD,oBAAoB,CAAC,QAAQ,GAAG,QAAQ,CAAC,AACzC,oBAAoB,CAAC,UAAU,GAAG,UAAU,CAAC,AAC7C,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,AACjD,0BAA0B,GAAG,IAAI,CAAC,CACrC,CACJ,AAED,SAAS,uBAAuB,EAAG,CAC/B,GAAI,eAAe,IAAI,0BAA0B,KAAK,IAAI,IAAI,yBAAyB,CAAE,CACrF,0BAA0B,GAAG,KAAK,CAAC,AACnC,oBAAoB,GAAG,sCAAmB,CAAC,AAC3C,oBAAoB,CAAC,gBAAgB,GAAG,yBAAyB,CAAC,EAAE,CAAC,AACrE,oBAAoB,CAAC,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC,AACxC,oBAAoB,CAAC,MAAM,GAAG,kBAAkB,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,AAClE,oBAAoB,CAAC,aAAa,GAAG,kBAAkB,CAAC,eAAe,EAAE,CAAC,QAAQ,EAAE,CAAC,CACxF,CACJ,AAED,SAAS,oBAAoB,EAAG,CAC5B,8BAA8B,GAAG,KAAK,CAAC,AACvC,eAAe,GAAG,CAAC,CAAC,AACpB,UAAU,GAAG,GAAG,CAAC,AACjB,eAAe,GAAG,IAAI,CAAC,AACvB,oBAAoB,GAAG,IAAI,CAAC,AAC5B,0BAA0B,GAAG,IAAI,CAAC,AAClC,cAAc,GAAG,IAAI,CAAC,AACtB,eAAe,GAAG,GAAG,CAAC,AACtB,mBAAmB,GAAG,CAClB,SAAS,CAAE,SAAS,CACpB,OAAO,CAAE,GAAG,CACZ,eAAe,CAAE,GAAG,CACvB,CAAC,AACF,eAAe,GAAG,EAAE,CAAC,AACrB,mBAAmB,GAAG,EAAE,CAAC,AACzB,SAAS,GAAG,IAAI,CAAC,AACjB,WAAW,GAAG,KAAK,CAAC,AACpB,qBAAqB,GAAG,KAAK,CAAC,AAC9B,YAAY,GAAG,IAAI,CAAC,CACvB,AAED,SAAS,KAAK,EAAG;AAEb,QAAQ,CAAC,GAAG,CAAC,8BAAO,mBAAmB,CAAE,mBAAmB,CAAE,IAAI,CAAC,CAAC,AACpE,QAAQ,CAAC,GAAG,CAAC,8BAAO,qBAAqB,CAAE,qBAAqB,CAAE,IAAI,CAAC,CAAC,AACxE,QAAQ,CAAC,GAAG,CAAC,8BAAO,0BAA0B,CAAE,yBAAyB,CAAE,IAAI,CAAC,CAAC,AACjF,QAAQ,CAAC,GAAG,CAAC,8BAAO,wBAAwB,CAAE,gBAAgB,CAAE,IAAI,CAAC,CAAC,AACtE,QAAQ,CAAC,GAAG,CAAC,8BAAO,0BAA0B,CAAE,0BAA0B,CAAE,IAAI,CAAC,CAAC,AAClF,QAAQ,CAAC,GAAG,CAAC,8BAAO,gBAAgB,CAAE,iBAAiB,CAAE,IAAI,CAAC,CAAC,AAC/D,QAAQ,CAAC,GAAG,CAAC,8BAAO,kBAAkB,CAAE,mBAAmB,CAAE,IAAI,CAAC,CAAC,AACnE,QAAQ,CAAC,GAAG,CAAC,8BAAO,cAAc,CAAE,eAAe,CAAE,IAAI,CAAC,CAAC,AAC3D,QAAQ,CAAC,GAAG,CAAC,8BAAO,cAAc,CAAE,eAAe,CAAE,IAAI,CAAC,CAAC,AAC3D,QAAQ,CAAC,GAAG,CAAC,8BAAO,cAAc,CAAE,eAAe,CAAE,IAAI,CAAC,CAAC,AAC3D,QAAQ,CAAC,GAAG,CAAC,8BAAO,cAAc,CAAE,eAAe,CAAE,IAAI,CAAC,CAAC,AAC3D,QAAQ,CAAC,GAAG,CAAC,8BAAO,qBAAqB,CAAE,qBAAqB,CAAE,IAAI,CAAC,CAAC,AACxE,QAAQ,CAAC,GAAG,CAAC,8BAAO,gBAAgB,CAAE,iBAAiB,CAAE,IAAI,CAAC,CAAC,AAC/D,QAAQ,CAAC,GAAG,CAAC,8BAAO,gBAAgB,CAAE,iBAAiB,CAAE,IAAI,CAAC,CAAC,AAC/D,QAAQ,CAAC,GAAG,CAAC,8BAAO,qBAAqB,CAAE,qBAAqB,CAAE,IAAI,CAAC,CAAC,AACxE,QAAQ,CAAC,GAAG,CAAC,8BAAO,qBAAqB,CAAE,qBAAqB,CAAE,IAAI,CAAC,CAAC,AACxE,QAAQ,CAAC,GAAG,CAAC,8BAAO,0BAA0B,CAAE,0BAA0B,CAAE,IAAI,CAAC,CAAC,AAClF,GAAI,iBAAiB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAE,CACxC,QAAQ,CAAC,GAAG,CAAC,8BAAO,oBAAoB,CAAE,oBAAoB,CAAE,IAAI,CAAC,CAAC,CACzE,AAED,IAAI,EAAE,CAAC,AACP,qBAAqB,CAAC,KAAK,CAAC,CAAC,AAC7B,oBAAoB,EAAE,CAAC,CAC1B,AAED,QAAQ,GAAG,CACP,UAAU,CAAE,UAAU,CACtB,OAAO,CAAE,OAAO,CAChB,aAAa,CAAE,aAAa,CAC5B,aAAa,CAAE,aAAa,CAC5B,kBAAkB,CAAE,kBAAkB,CACtC,kBAAkB,CAAE,kBAAkB,CACtC,cAAc,CAAE,cAAc,CAC9B,gBAAgB,CAAE,gBAAgB,CAClC,SAAS,CAAE,SAAS,CACpB,KAAK,CAAE,KAAK,CACZ,IAAI,CAAE,IAAI,CACV,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,WAAW,CACxB,eAAe,CAAE,eAAe,CAChC,gBAAgB,CAAE,gBAAgB,CACrC,CAAC,AAEF,KAAK,EAAE,CAAC,AAER,OAAO,QAAQ,CAAC,CACnB,AAED,kBAAkB,CAAC,qBAAqB,GAAG,oBAAoB,CAAC,qBACjD,8BAAa,eAAe,CAAC,kBAAkB,CAAC","file":"ScheduleController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport {PlayListTrace} from '../vo/metrics/PlayList';\nimport AbrController from './AbrController';\nimport BufferController from './BufferController';\nimport BufferLevelRule from '../rules/scheduling/BufferLevelRule';\nimport NextFragmentRequestRule from '../rules/scheduling/NextFragmentRequestRule';\nimport FragmentModel from '../models/FragmentModel';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport MediaController from './MediaController';\n\nfunction ScheduleController(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    const metricsModel = config.metricsModel;\n    const adapter = config.adapter;\n    const dashMetrics = config.dashMetrics;\n    const dashManifestModel = config.dashManifestModel;\n    const timelineConverter = config.timelineConverter;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const abrController = config.abrController;\n    const playbackController = config.playbackController;\n    const streamController = config.streamController;\n    const textController = config.textController;\n    const type = config.type;\n    const streamProcessor = config.streamProcessor;\n    const mediaController = config.mediaController;\n\n    let instance,\n        log,\n        fragmentModel,\n        currentRepresentationInfo,\n        initialRequest,\n        isStopped,\n        playListMetrics,\n        playListTraceMetrics,\n        playListTraceMetricsClosed,\n        isFragmentProcessingInProgress,\n        timeToLoadDelay,\n        scheduleTimeout,\n        seekTarget,\n        bufferLevelRule,\n        nextFragmentRequestRule,\n        scheduleWhilePaused,\n        lastFragmentRequest,\n        topQualityIndex,\n        lastInitQuality,\n        replaceRequestArray,\n        switchTrack,\n        bufferResetInProgress,\n        mediaRequest;\n\n    function setup() {\n        log = Debug(context).getInstance().log.bind(instance);\n\n        resetInitialSettings();\n    }\n\n    function initialize() {\n        fragmentModel = streamProcessor.getFragmentModel();\n        scheduleWhilePaused = mediaPlayerModel.getScheduleWhilePaused();\n\n        bufferLevelRule = BufferLevelRule(context).create({\n            abrController: abrController,\n            dashMetrics: dashMetrics,\n            metricsModel: metricsModel,\n            mediaPlayerModel: mediaPlayerModel,\n            textController: textController\n        });\n\n        nextFragmentRequestRule = NextFragmentRequestRule(context).create({\n            adapter: adapter,\n            textController: textController\n        });\n\n        if (dashManifestModel.getIsTextTrack(type)) {\n            eventBus.on(Events.TIMED_TEXT_REQUESTED, onTimedTextRequested, this);\n        }\n\n        //eventBus.on(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);\n        eventBus.on(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, this);\n        eventBus.on(Events.DATA_UPDATE_STARTED, onDataUpdateStarted, this);\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);\n        eventBus.on(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n        eventBus.on(Events.STREAM_COMPLETED, onStreamCompleted, this);\n        eventBus.on(Events.STREAM_INITIALIZED, onStreamInitialized, this);\n        eventBus.on(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);\n        eventBus.on(Events.BUFFER_CLEARED, onBufferCleared, this);\n        eventBus.on(Events.BYTES_APPENDED, onBytesAppended, this);\n        eventBus.on(Events.INIT_REQUESTED, onInitRequested, this);\n        eventBus.on(Events.QUOTA_EXCEEDED, onQuotaExceeded, this);\n        eventBus.on(Events.PLAYBACK_SEEKING, onPlaybackSeeking, this);\n        eventBus.on(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\n        eventBus.on(Events.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);\n        eventBus.on(Events.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);\n        eventBus.on(Events.URL_RESOLUTION_FAILED, onURLResolutionFailed, this);\n        eventBus.on(Events.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);\n    }\n\n    function isStarted() {\n        return (isStopped === false);\n    }\n\n    function start() {\n        if (!currentRepresentationInfo || streamProcessor.isBufferingCompleted()) {\n            log('[ScheduleController][', type,'] start denied');\n            return;\n        }\n        log('[ScheduleController][', type,'] start');\n        addPlaylistTraceMetrics();\n        isStopped = false;\n\n        if (initialRequest) {\n            initialRequest = false;\n        }\n\n        startScheduleTimer(0);\n    }\n\n    function stop() {\n        if (isStopped) {\n            return;\n        }\n        log('[ScheduleController][', type,'] stop');\n        isStopped = true;\n        clearTimeout(scheduleTimeout);\n    }\n\n    function hasTopQualityChanged(type, id) {\n        topQualityIndex[id] = topQualityIndex[id] || {};\n        const newTopQualityIndex = abrController.getTopQualityIndexFor(type, id);\n\n        if (topQualityIndex[id][type] != newTopQualityIndex) {\n            log('Top quality ' + type + ' index has changed from ' + topQualityIndex[id][type] + ' to ' + newTopQualityIndex);\n            topQualityIndex[id][type] = newTopQualityIndex;\n            return true;\n        }\n        return false;\n\n    }\n\n    function schedule() {\n        if (isStopped || isFragmentProcessingInProgress || !streamProcessor.getBufferController() || playbackController.isPaused() && !scheduleWhilePaused) {\n            log('[ScheduleController][', type,'] - schedule stop!');\n            return;\n        }\n\n        validateExecutedFragmentRequest();\n\n        const isReplacement = replaceRequestArray.length > 0;\n        const streamInfo = streamProcessor.getStreamInfo();\n        if (bufferResetInProgress || isNaN(lastInitQuality) || switchTrack || isReplacement ||\n            hasTopQualityChanged(currentRepresentationInfo.mediaInfo.type, streamInfo.id) ||\n            bufferLevelRule.execute(streamProcessor, type, streamController.isVideoTrackPresent())) {\n\n            const getNextFragment = function () {\n                const fragmentController = streamProcessor.getFragmentController();\n                if (currentRepresentationInfo.quality !== lastInitQuality) {\n                    log('ScheduleController - ' + type + ' - quality has changed, get init request for representationid = ' + currentRepresentationInfo.id);\n                    lastInitQuality = currentRepresentationInfo.quality;\n\n                    streamProcessor.switchInitData(currentRepresentationInfo.id);\n                } else if (switchTrack) {\n                    log('ScheduleController - ' + type + ' - switch track has been asked, get init request for ' + type + ' with representationid = ' + currentRepresentationInfo.id);\n                    bufferResetInProgress = mediaController.getSwitchMode(type) === MediaController.TRACK_SWITCH_MODE_ALWAYS_REPLACE ? true : false;\n                    streamProcessor.switchInitData(currentRepresentationInfo.id, bufferResetInProgress);\n                    lastInitQuality = currentRepresentationInfo.quality;\n                    switchTrack = false;\n                } else {\n                    const replacement = replaceRequestArray.shift();\n\n                    if (fragmentController.isInitializationRequest(replacement)) {\n                        //to be sure the specific init segment had not already been loaded.\n                        streamProcessor.switchInitData(replacement.representationId);\n                    } else {\n                        let request;\n                        // don't schedule next fragments while pruning to avoid buffer inconsistencies\n                        if (!streamProcessor.getBufferController().getIsPruningInProgress()) {\n                            request = nextFragmentRequestRule.execute(streamProcessor, replacement);\n                            if (!request && streamInfo.manifestInfo && streamInfo.manifestInfo.isDynamic) {\n                                log('getNextFragment - ' + type + ' - Playing at the bleeding live edge and frag is not available yet');\n                            }\n                        }\n\n                        if (request) {\n                            log('ScheduleController - ' + type + ' - getNextFragment - request is ' + request.url);\n                            fragmentModel.executeRequest(request);\n                        } else { //Use case - Playing at the bleeding live edge and frag is not available yet. Cycle back around.\n                            setFragmentProcessState(false);\n                            startScheduleTimer(500);\n                        }\n                    }\n                }\n            };\n\n            setFragmentProcessState(true);\n            if (!isReplacement && !switchTrack) {\n                abrController.checkPlaybackQuality(type);\n            }\n\n            getNextFragment();\n\n        } else {\n            startScheduleTimer(500);\n        }\n    }\n\n    function validateExecutedFragmentRequest() {\n        //Validate that the fragment request executed and appended into the source buffer is as\n        // good of quality as the current quality and is the correct media track.\n        const safeBufferLevel = currentRepresentationInfo.fragmentDuration * 1.5;\n        const request = fragmentModel.getRequests({\n            state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\n            time: playbackController.getTime() + safeBufferLevel,\n            threshold: 0\n        })[0];\n\n        if (request && replaceRequestArray.indexOf(request) === -1 && !dashManifestModel.getIsTextTrack(type)) {\n            const fastSwitchModeEnabled = mediaPlayerModel.getFastSwitchEnabled();\n            const bufferLevel = streamProcessor.getBufferLevel();\n            const abandonmentState = abrController.getAbandonmentStateFor(type);\n\n            if (fastSwitchModeEnabled && request.quality < currentRepresentationInfo.quality && bufferLevel >= safeBufferLevel && abandonmentState !== AbrController.ABANDON_LOAD) {\n                replaceRequest(request);\n                log('Reloading outdated fragment at index: ', request.index);\n            } else if (request.quality > currentRepresentationInfo.quality) {\n                //The buffer has better quality it in then what we would request so set append point to end of buffer!!\n                setSeekTarget(playbackController.getTime() + streamProcessor.getBufferLevel());\n            }\n        }\n    }\n\n    function startScheduleTimer(value) {\n        //log('[ScheduleController][', type,'] - startScheduleTimer in ', value,' ms');\n        clearTimeout(scheduleTimeout);\n        scheduleTimeout = setTimeout(schedule, value);\n    }\n\n    function onInitRequested(e) {\n        if (!e.sender || e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        getInitRequest(currentRepresentationInfo.quality);\n    }\n\n    function setFragmentProcessState (state) {\n        if (isFragmentProcessingInProgress !== state ) {\n            isFragmentProcessingInProgress = state;\n        } else {\n            log('[ScheduleController][', type, '] isFragmentProcessingInProgress is already equal to', state);\n        }\n    }\n\n    function getInitRequest(quality) {\n        const request = adapter.getInitRequest(streamProcessor, quality);\n        if (request) {\n            setFragmentProcessState(true);\n            fragmentModel.executeRequest(request);\n        }\n    }\n\n    function switchTrackAsked() {\n        switchTrack = true;\n    }\n\n    function replaceRequest(request) {\n        replaceRequestArray.push(request);\n    }\n\n    function onQualityChanged(e) {\n        if (type !== e.mediaType || streamProcessor.getStreamInfo().id !== e.streamInfo.id) {\n            return;\n        }\n\n        currentRepresentationInfo = streamProcessor.getRepresentationInfoForQuality(e.newQuality);\n\n        if (currentRepresentationInfo === null || currentRepresentationInfo === undefined) {\n            throw new Error('Unexpected error! - currentRepresentationInfo is null or undefined');\n        }\n\n        clearPlayListTraceMetrics(new Date(), PlayListTrace.REPRESENTATION_SWITCH_STOP_REASON);\n        addPlaylistTraceMetrics();\n    }\n\n    function completeQualityChange(trigger) {\n        if (playbackController && fragmentModel) {\n            const item = fragmentModel.getRequests({\n                state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\n                time: playbackController.getTime(),\n                threshold: 0\n            })[0];\n            if (item && playbackController.getTime() >= item.startTime) {\n                if ((!lastFragmentRequest.mediaInfo || (item.mediaInfo.type === lastFragmentRequest.mediaInfo.type && item.mediaInfo.id !== lastFragmentRequest.mediaInfo.id)) && trigger) {\n                    eventBus.trigger(Events.TRACK_CHANGE_RENDERED, {\n                        mediaType: type,\n                        oldMediaInfo: lastFragmentRequest.mediaInfo,\n                        newMediaInfo: item.mediaInfo\n                    });\n                }\n                if ((item.quality !== lastFragmentRequest.quality || item.adaptationIndex !== lastFragmentRequest.adaptationIndex) && trigger) {\n                    eventBus.trigger(Events.QUALITY_CHANGE_RENDERED, {\n                        mediaType: type,\n                        oldQuality: lastFragmentRequest.quality,\n                        newQuality: item.quality\n                    });\n                }\n                lastFragmentRequest = {\n                    mediaInfo: item.mediaInfo,\n                    quality: item.quality,\n                    adaptationIndex: item.adaptationIndex\n                };\n            }\n        }\n    }\n\n    function onDataUpdateCompleted(e) {\n        if (e.error || e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        currentRepresentationInfo = adapter.convertDataToRepresentationInfo(e.currentRepresentation);\n    }\n\n    function onStreamInitialized(e) {\n        if (e.error || streamProcessor.getStreamInfo().id !== e.streamInfo.id) {\n            return;\n        }\n\n        currentRepresentationInfo = streamProcessor.getCurrentRepresentationInfo();\n\n        if (initialRequest) {\n            if (playbackController.getIsDynamic()) {\n                timelineConverter.setTimeSyncCompleted(true);\n                setLiveEdgeSeekTarget();\n            } else {\n                seekTarget = playbackController.getStreamStartTime(false);\n                streamProcessor.getBufferController().setSeekStartTime(seekTarget);\n            }\n        }\n\n        if (isStopped) {\n            start();\n        }\n    }\n\n    function setLiveEdgeSeekTarget() {\n        const liveEdgeFinder = streamProcessor.getLiveEdgeFinder();\n        if (liveEdgeFinder) {\n            const liveEdge = liveEdgeFinder.getLiveEdge();\n            const dvrWindowSize = currentRepresentationInfo.mediaInfo.streamInfo.manifestInfo.DVRWindowSize / 2;\n            const startTime = liveEdge - playbackController.computeLiveDelay(currentRepresentationInfo.fragmentDuration, dvrWindowSize);\n            const request = adapter.getFragmentRequestForTime(streamProcessor, currentRepresentationInfo, startTime, {\n                ignoreIsFinished: true\n            });\n\n            playbackController.setLiveStartTime(request.startTime);\n            seekTarget = playbackController.getStreamStartTime(false, liveEdge);\n\n            //special use case for multi period stream. If the startTime is out of the current period, send a seek command.\n            //in onPlaybackSeeking callback (StreamController), the detection of switch stream is done.\n            if (seekTarget > (currentRepresentationInfo.mediaInfo.streamInfo.start + currentRepresentationInfo.mediaInfo.streamInfo.duration)) {\n                playbackController.seek(seekTarget);\n            }\n\n            const manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(metricsModel.getMetricsFor(Constants.STREAM));\n            metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {\n                currentTime: seekTarget,\n                presentationStartTime: liveEdge,\n                latency: liveEdge - seekTarget,\n                clientTimeOffset: timelineConverter.getClientTimeOffset()\n            });\n        }\n    }\n\n    function onStreamCompleted(e) {\n        if (e.fragmentModel !== fragmentModel) {\n            return;\n        }\n\n        stop();\n        setFragmentProcessState(false);\n        log('[ScheduleController] Stream is complete');\n    }\n\n    function onFragmentLoadingCompleted(e) {\n        if (e.sender !== fragmentModel) {\n            return;\n        }\n        log('[ScheduleController][', type,'] - onFragmentLoadingCompleted');\n        if (dashManifestModel.getIsTextTrack(type)) {\n            setFragmentProcessState(false);\n        }\n\n        if (e.error && e.request.serviceLocation && !isStopped) {\n            replaceRequest(e.request);\n            setFragmentProcessState(false);\n            startScheduleTimer(0);\n        }\n\n        if (bufferResetInProgress) {\n            mediaRequest = e.request;\n        }\n    }\n\n    function onPlaybackTimeUpdated() {\n        completeQualityChange(true);\n    }\n\n    function onBytesAppended(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        if (bufferResetInProgress && !isNaN(e.startTime)) {\n            bufferResetInProgress = false;\n            fragmentModel.addExecutedRequest(mediaRequest);\n        }\n\n        setFragmentProcessState(false);\n        startScheduleTimer(0);\n    }\n\n    function onFragmentLoadingAbandoned(e) {\n        if (e.streamProcessor !== streamProcessor) {\n            return;\n        }\n        log('[ScheduleController][onFragmentLoadingAbandoned] for ' + type + ', request: ' + e.request.url + ' has been aborted');\n        if (!playbackController.isSeeking()) {\n            log('[ScheduleController][onFragmentLoadingAbandoned] for ' + type + ', request: ' + e.request.url + ' has to be downloaded again, origin is not seeking process');\n            replaceRequest(e.request);\n        }\n        setFragmentProcessState(false);\n        startScheduleTimer(0);\n    }\n\n    function onDataUpdateStarted(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        stop();\n    }\n\n    function onBufferCleared(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        streamProcessor.getFragmentModel().syncExecutedRequestsWithBufferedRange(\n            streamProcessor.getBufferController().getBuffer().getAllBufferRanges(),\n            streamProcessor.getStreamInfo().duration);\n\n        if (e.hasEnoughSpaceToAppend && isStopped) {\n            start();\n        }\n    }\n\n    function onBufferLevelStateChanged(e) {\n        if ((e.sender.getStreamProcessor() === streamProcessor) && e.state === BufferController.BUFFER_EMPTY && !playbackController.isSeeking()) {\n            log('[ScheduleController][', type,'] - Buffer is empty! Stalling!');\n            clearPlayListTraceMetrics(new Date(), PlayListTrace.REBUFFERING_REASON);\n        }\n    }\n\n    function onQuotaExceeded(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        stop();\n        setFragmentProcessState(false);\n    }\n\n    function onURLResolutionFailed() {\n        fragmentModel.abortRequests();\n        stop();\n    }\n\n    function onTimedTextRequested(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        getInitRequest(e.index);\n    }\n\n    function onPlaybackStarted() {\n        if (isStopped || !scheduleWhilePaused) {\n            start();\n        }\n    }\n\n    function onPlaybackSeeking(e) {\n        seekTarget = e.seekTime;\n        setTimeToLoadDelay(0);\n\n        if (isStopped) {\n            start();\n        }\n\n        const manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(metricsModel.getMetricsFor(Constants.STREAM));\n        const latency = currentRepresentationInfo.DVRWindow && playbackController ? currentRepresentationInfo.DVRWindow.end - playbackController.getTime() : NaN;\n        metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {\n            latency: latency\n        });\n\n        //if, during the seek command, the scheduleController is waiting : stop waiting, request chunk as soon as possible\n        if (!isFragmentProcessingInProgress) {\n            startScheduleTimer(0);\n        } else {\n            log('[ScheduleController][onPlaybackSeeking] for ' + type + ', call fragmentModel.abortRequests in order to seek quicker');\n            fragmentModel.abortRequests();\n        }\n    }\n\n    function onPlaybackRateChanged(e) {\n        if (playListTraceMetrics) {\n            playListTraceMetrics.playbackspeed = e.playbackRate.toString();\n        }\n    }\n\n    function getSeekTarget() {\n        return seekTarget;\n    }\n\n    function setSeekTarget(value) {\n        seekTarget = value;\n    }\n\n    function setTimeToLoadDelay(value) {\n        timeToLoadDelay = value;\n    }\n\n    function getTimeToLoadDelay() {\n        return timeToLoadDelay;\n    }\n\n    function getBufferTarget() {\n        return bufferLevelRule.getBufferTarget(streamProcessor, type, streamController.isVideoTrackPresent());\n    }\n\n    function getType() {\n        return type;\n    }\n\n    function setPlayList(playList) {\n        playListMetrics = playList;\n    }\n\n    function finalisePlayList(time, reason) {\n        clearPlayListTraceMetrics(time, reason);\n        playListMetrics = null;\n    }\n\n    function clearPlayListTraceMetrics(endTime, stopreason) {\n        if (playListMetrics && playListTraceMetricsClosed === false) {\n            const startTime = playListTraceMetrics.start;\n            const duration = endTime.getTime() - startTime.getTime();\n            playListTraceMetrics.duration = duration;\n            playListTraceMetrics.stopreason = stopreason;\n            playListMetrics.trace.push(playListTraceMetrics);\n            playListTraceMetricsClosed = true;\n        }\n    }\n\n    function addPlaylistTraceMetrics() {\n        if (playListMetrics && playListTraceMetricsClosed === true && currentRepresentationInfo) {\n            playListTraceMetricsClosed = false;\n            playListTraceMetrics = new PlayListTrace();\n            playListTraceMetrics.representationid = currentRepresentationInfo.id;\n            playListTraceMetrics.start = new Date();\n            playListTraceMetrics.mstart = playbackController.getTime() * 1000;\n            playListTraceMetrics.playbackspeed = playbackController.getPlaybackRate().toString();\n        }\n    }\n\n    function resetInitialSettings() {\n        isFragmentProcessingInProgress = false;\n        timeToLoadDelay = 0;\n        seekTarget = NaN;\n        playListMetrics = null;\n        playListTraceMetrics = null;\n        playListTraceMetricsClosed = true;\n        initialRequest = true;\n        lastInitQuality = NaN;\n        lastFragmentRequest = {\n            mediaInfo: undefined,\n            quality: NaN,\n            adaptationIndex: NaN\n        };\n        topQualityIndex = {};\n        replaceRequestArray = [];\n        isStopped = true;\n        switchTrack = false;\n        bufferResetInProgress = false;\n        mediaRequest = null;\n    }\n\n    function reset() {\n        //eventBus.off(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);\n        eventBus.off(Events.DATA_UPDATE_STARTED, onDataUpdateStarted, this);\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);\n        eventBus.off(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);\n        eventBus.off(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, this);\n        eventBus.off(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n        eventBus.off(Events.STREAM_COMPLETED, onStreamCompleted, this);\n        eventBus.off(Events.STREAM_INITIALIZED, onStreamInitialized, this);\n        eventBus.off(Events.QUOTA_EXCEEDED, onQuotaExceeded, this);\n        eventBus.off(Events.BYTES_APPENDED, onBytesAppended, this);\n        eventBus.off(Events.BUFFER_CLEARED, onBufferCleared, this);\n        eventBus.off(Events.INIT_REQUESTED, onInitRequested, this);\n        eventBus.off(Events.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);\n        eventBus.off(Events.PLAYBACK_SEEKING, onPlaybackSeeking, this);\n        eventBus.off(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\n        eventBus.off(Events.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);\n        eventBus.off(Events.URL_RESOLUTION_FAILED, onURLResolutionFailed, this);\n        eventBus.off(Events.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);\n        if (dashManifestModel.getIsTextTrack(type)) {\n            eventBus.off(Events.TIMED_TEXT_REQUESTED, onTimedTextRequested, this);\n        }\n\n        stop();\n        completeQualityChange(false);\n        resetInitialSettings();\n    }\n\n    instance = {\n        initialize: initialize,\n        getType: getType,\n        getSeekTarget: getSeekTarget,\n        setSeekTarget: setSeekTarget,\n        setTimeToLoadDelay: setTimeToLoadDelay,\n        getTimeToLoadDelay: getTimeToLoadDelay,\n        replaceRequest: replaceRequest,\n        switchTrackAsked: switchTrackAsked,\n        isStarted: isStarted,\n        start: start,\n        stop: stop,\n        reset: reset,\n        setPlayList: setPlayList,\n        getBufferTarget: getBufferTarget,\n        finalisePlayList: finalisePlayList\n    };\n\n    setup();\n\n    return instance;\n}\n\nScheduleController.__dashjs_factory_name = 'ScheduleController';\nexport default FactoryMaker.getClassFactory(ScheduleController);\n"]}