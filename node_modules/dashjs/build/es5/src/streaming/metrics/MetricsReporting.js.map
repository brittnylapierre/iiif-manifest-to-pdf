{"version":3,"sources":["../../../../../src/streaming/metrics/MetricsReporting.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;sMA+BgC,6BAA6B,uHAC1B,0BAA0B,mIACrB,2CAA2C,yJACjD,iCAAiC,kIACtC,8BAA8B,qFAE3D,SAAS,gBAAgB,EAAG,CAExB,IAAI,OAAO,CAAG,IAAI,CAAC,OAAO,CAAC,AAC3B,IAAI,QAAQ,UAAA,CAAC,AAEb,IAAI,mBAAmB,UAAA,CAAC;;;;OAOxB,SAAS,sBAAsB,CAAC,MAAM,CAAE,CACpC,mBAAmB,GAAG,0CAAoB,OAAO,CAAC,CAAC,WAAW,CAAC,CAC3D,QAAQ,CAAE,MAAM,CAAC,QAAQ,CACzB,YAAY,CAAE,MAAM,CAAC,YAAY,CACjC,gBAAgB,CAAE,MAAM,CAAC,gBAAgB,CACzC,MAAM,CAAE,MAAM,CAAC,MAAM,CACxB,CAAC,CAAC,AAEH,OAAO,wDAA4B,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAC9D;;;OAMD,SAAS,mBAAmB,EAAG,CAC3B,OAAO,2CAAiB,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC,CAClD;;;OAMD,SAAS,wBAAwB,EAAG,CAChC,OAAO,8CAAsB,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC,CACvD,AAED,QAAQ,GAAG,CACP,sBAAsB,CAAM,sBAAsB,CAClD,mBAAmB,CAAS,mBAAmB,CAC/C,wBAAwB,CAAI,wBAAwB,CACvD,CAAC,AAEF,OAAO,QAAQ,CAAC,CACnB,AAED,gBAAgB,CAAC,qBAAqB,GAAG,kBAAkB,CAAC,AAC5D,IAAI,OAAO,CAAG,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC,yBACpE,OAAO,CAAC,MAAM,sCAAyB,CAAC,AACxC,MAAM,CAAC,YAAY,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,qBAAqB,CAAE,OAAO,CAAC,CAAC,8CACzE,OAAO","file":"MetricsReporting.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBErrorsTranslator from './utils/DVBErrorsTranslator';\nimport MetricsReportingEvents from './MetricsReportingEvents';\nimport MetricsCollectionController from './controllers/MetricsCollectionController';\nimport MetricsHandlerFactory from './metrics/MetricsHandlerFactory';\nimport ReportingFactory from './reporting/ReportingFactory';\n\nfunction MetricsReporting() {\n\n    let context = this.context;\n    let instance;\n\n    let dvbErrorsTranslator;\n\n    /**\n     * Create a MetricsCollectionController, and a DVBErrorsTranslator\n     * @param {Object} config - dependancies from owner\n     * @return {MetricsCollectionController} Metrics Collection Controller\n     */\n    function createMetricsReporting(config) {\n        dvbErrorsTranslator = DVBErrorsTranslator(context).getInstance({\n            eventBus: config.eventBus,\n            metricsModel: config.metricsModel,\n            metricsConstants: config.metricsConstants,\n            events: config.events\n        });\n\n        return MetricsCollectionController(context).create(config);\n    }\n\n    /**\n     * Get the ReportingFactory to allow new reporters to be registered\n     * @return {ReportingFactory} Reporting Factory\n     */\n    function getReportingFactory() {\n        return ReportingFactory(context).getInstance();\n    }\n\n    /**\n     * Get the MetricsHandlerFactory to allow new handlers to be registered\n     * @return {MetricsHandlerFactory} Metrics Handler Factory\n     */\n    function getMetricsHandlerFactory() {\n        return MetricsHandlerFactory(context).getInstance();\n    }\n\n    instance = {\n        createMetricsReporting:     createMetricsReporting,\n        getReportingFactory:        getReportingFactory,\n        getMetricsHandlerFactory:   getMetricsHandlerFactory\n    };\n\n    return instance;\n}\n\nMetricsReporting.__dashjs_factory_name = 'MetricsReporting';\nlet factory = dashjs.FactoryMaker.getClassFactory(MetricsReporting); /* jshint ignore:line */\nfactory.events = MetricsReportingEvents;\ndashjs.FactoryMaker.updateClassFactory(MetricsReporting.__dashjs_factory_name, factory); /* jshint ignore:line */\nexport default factory;\n"]}