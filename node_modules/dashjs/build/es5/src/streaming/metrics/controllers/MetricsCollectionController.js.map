{"version":3,"sources":["../../../../../../src/streaming/metrics/controllers/MetricsCollectionController.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;+LA+B8B,qBAAqB,uGACvB,0BAA0B,+GACnB,2BAA2B,+EAE9D,SAAS,2BAA2B,CAAC,MAAM,CAAE,CAEzC,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC,AACtB,IAAI,kBAAkB,CAAG,EAAE,CAAC,AAE5B,IAAI,OAAO,CAAG,IAAI,CAAC,OAAO,CAAC,AAC3B,IAAI,QAAQ,CAAG,MAAM,CAAC,QAAQ,CAAC,AAC/B,IAAM,MAAM,CAAG,MAAM,CAAC,MAAM,CAAC,AAE7B,SAAS,MAAM,CAAC,CAAC,CAAE,CACf,GAAI,CAAC,CAAC,KAAK,CAAE,CACT,OAAO,CACV;AAGD,IAAI,mBAAmB,CAAG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,AAE1D,IAAM,OAAO,CAAG,sCAAgB,OAAO,CAAC,CAAC,WAAW,CAAC,CACjD,iBAAiB,CAAE,MAAM,CAAC,iBAAiB,CAC3C,SAAS,CAAE,MAAM,CAAC,SAAS,CAC9B,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,AAE1B,OAAO,CAAC,OAAO,CAAC,SAAA,CAAC,CAAI,CACjB,IAAM,GAAG,CAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,AAE9B,GAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,GAAG,CAAC,CAAE,CACzC,GAAI,CACA,IAAI,UAAU,CAAG,mCAAkB,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,AAC3D,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,AACzB,kBAAkB,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,CACxC,AAAC,MAAO,CAAC,EAAE;CAEX,CACJ,KAAM;AAEH,mBAAmB,CAAC,MAAM,CAAC,GAAG,CAAE,CAAC,CAAC,CAAC,CACtC,CACJ,CAAC,CAAC;AAGH,mBAAmB,CAAC,OAAO,CAAC,SAAA,CAAC,CAAI,CAC7B,kBAAkB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,AAC9B,OAAO,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAChC,CAAC,CAAC,AAEH,QAAQ,CAAC,OAAO,CACZ,oCAAuB,+BAA+B,CACzD,CAAC,CACL,AAED,SAAS,uBAAuB,EAAG,CAC/B,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,SAAA,GAAG,CAAI,CAC3C,kBAAkB,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,CACnC,CAAC,CAAC,AAEH,kBAAkB,GAAG,EAAE,CAAC,CAC3B,AAED,SAAS,KAAK,EAAG,CACb,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,gBAAgB,CAAE,MAAM,CAAC,CAAC,AAC7C,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,wBAAwB,CAAE,uBAAuB,CAAC,CAAC,CACzE,AAED,SAAS,KAAK,EAAG,CACb,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAE,MAAM,CAAC,CAAC,AAC9C,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,wBAAwB,CAAE,uBAAuB,CAAC,CAAC,CAC1E,AAED,KAAK,EAAE,CAAC,AAER,OAAO,CACH,KAAK,CAAE,KAAK,CACf,CAAC,CACL,AAED,2BAA2B,CAAC,qBAAqB,GAAG,6BAA6B,CAAC,qBACnE,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,2BAA2B,CAAC","file":"MetricsCollectionController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsController from './MetricsController';\nimport ManifestParsing from '../utils/ManifestParsing';\nimport MetricsReportingEvents from '../MetricsReportingEvents';\n\nfunction MetricsCollectionController(config) {\n\n    config = config || {};\n    let metricsControllers = {};\n\n    let context = this.context;\n    let eventBus = config.eventBus;\n    const events = config.events;\n\n    function update(e) {\n        if (e.error) {\n            return;\n        }\n\n        // start by assuming all existing controllers need removing\n        let controllersToRemove = Object.keys(metricsControllers);\n\n        const metrics = ManifestParsing(context).getInstance({\n            dashManifestModel: config.dashManifestModel,\n            constants: config.constants\n        }).getMetrics(e.manifest);\n\n        metrics.forEach(m => {\n            const key = JSON.stringify(m);\n\n            if (!metricsControllers.hasOwnProperty(key)) {\n                try {\n                    let controller = MetricsController(context).create(config);\n                    controller.initialize(m);\n                    metricsControllers[key] = controller;\n                } catch (e) {\n                    // fail quietly\n                }\n            } else {\n                // we still need this controller - delete from removal list\n                controllersToRemove.splice(key, 1);\n            }\n        });\n\n        // now remove the unwanted controllers\n        controllersToRemove.forEach(c => {\n            metricsControllers[c].reset();\n            delete metricsControllers[c];\n        });\n\n        eventBus.trigger(\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE\n        );\n    }\n\n    function resetMetricsControllers() {\n        Object.keys(metricsControllers).forEach(key => {\n            metricsControllers[key].reset();\n        });\n\n        metricsControllers = {};\n    }\n\n    function setup() {\n        eventBus.on(events.MANIFEST_UPDATED, update);\n        eventBus.on(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers);\n    }\n\n    function reset() {\n        eventBus.off(events.MANIFEST_UPDATED, update);\n        eventBus.off(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers);\n    }\n\n    setup();\n\n    return {\n        reset: reset\n    };\n}\n\nMetricsCollectionController.__dashjs_factory_name = 'MetricsCollectionController';\nexport default dashjs.FactoryMaker.getClassFactory(MetricsCollectionController); /* jshint ignore:line */\n"]}