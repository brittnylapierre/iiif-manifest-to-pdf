{"version":3,"sources":["../../../../../../src/streaming/metrics/controllers/MetricsHandlersController.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;0MA+BkC,kCAAkC,2FAEpE,SAAS,yBAAyB,CAAC,MAAM,CAAE,CAEvC,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC,AACtB,IAAI,QAAQ,CAAG,EAAE,CAAC,AAElB,IAAI,QAAQ,UAAA,CAAC,AACb,IAAI,OAAO,CAAG,IAAI,CAAC,OAAO,CAAC,AAC3B,IAAI,QAAQ,CAAG,MAAM,CAAC,QAAQ,CAAC,AAC/B,IAAM,MAAM,CAAG,MAAM,CAAC,MAAM,CAAC,AAE7B,IAAI,qBAAqB,CAAG,8CAAsB,OAAO,CAAC,CAAC,WAAW,CAAC,CACnE,GAAG,CAAE,MAAM,CAAC,GAAG,CACf,QAAQ,CAAE,MAAM,CAAC,QAAQ,CACzB,gBAAgB,CAAE,MAAM,CAAC,gBAAgB,CAC5C,CAAC,CAAC,AAEH,SAAS,MAAM,CAAC,CAAC,CAAE,CACf,QAAQ,CAAC,OAAO,CAAC,SAAA,OAAO,CAAI,CACxB,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,MAAM,CAAE,CAAC,CAAC,KAAK,CAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAC3D,CAAC,CAAC,CACN,AAED,SAAS,UAAU,CAAC,OAAO,CAAE,mBAAmB,CAAE,CAC9C,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CACtB,SAAC,CAAC,CAAE,IAAI,CAAE,EAAE,CAAK,CACb,IAAI,OAAO,UAAA,CAAC;;;AAKZ,GAAI,AAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAK,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAE,CAClD,IAAI,KAAK,CAAG,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,AAEzB,GAAI,KAAK,IACA,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,AAAC,IAC1B,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,AAAC,CAAE,CACjC,CAAC,IAAI,GAAG,GAAG,KAAK,CAAC;AAGjB,OAAO,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CACvB,CACJ,AAED,OAAO,GAAG,qBAAqB,CAAC,MAAM,CAClC,CAAC,CACD,mBAAmB,CACtB,CAAC,AAEF,GAAI,OAAO,CAAE,CACT,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAC1B,CACJ,CACJ,CAAC,AAEF,QAAQ,CAAC,EAAE,CACP,MAAM,CAAC,YAAY,CACnB,MAAM,CACN,QAAQ,CACX,CAAC,AAEF,QAAQ,CAAC,EAAE,CACP,MAAM,CAAC,cAAc,CACrB,MAAM,CACN,QAAQ,CACX,CAAC,CACL,AAED,SAAS,KAAK,EAAG,CACb,QAAQ,CAAC,GAAG,CACR,MAAM,CAAC,YAAY,CACnB,MAAM,CACN,QAAQ,CACX,CAAC,AAEF,QAAQ,CAAC,GAAG,CACR,MAAM,CAAC,cAAc,CACrB,MAAM,CACN,QAAQ,CACX,CAAC,AAEF,QAAQ,CAAC,OAAO,CAAC,SAAA,OAAO,SAAI,OAAO,CAAC,KAAK,EAAE,EAAA,CAAC,CAAC,AAE7C,QAAQ,GAAG,EAAE,CAAC,CACjB,AAED,QAAQ,GAAG,CACP,UAAU,CAAE,UAAU,CACtB,KAAK,CAAO,KAAK,CACpB,CAAC,AAEF,OAAO,QAAQ,CAAC,CACnB,AAED,yBAAyB,CAAC,qBAAqB,GAAG,2BAA2B,CAAC,qBAC/D,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,yBAAyB,CAAC","file":"MetricsHandlersController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsHandlerFactory from '../metrics/MetricsHandlerFactory';\n\nfunction MetricsHandlersController(config) {\n\n    config = config || {};\n    let handlers = [];\n\n    let instance;\n    let context = this.context;\n    let eventBus = config.eventBus;\n    const Events = config.events;\n\n    let metricsHandlerFactory = MetricsHandlerFactory(context).getInstance({\n        log: config.log,\n        eventBus: config.eventBus,\n        metricsConstants: config.metricsConstants\n    });\n\n    function handle(e) {\n        handlers.forEach(handler => {\n            handler.handleNewMetric(e.metric, e.value, e.mediaType);\n        });\n    }\n\n    function initialize(metrics, reportingController) {\n        metrics.split(',').forEach(\n            (m, midx, ms) => {\n                let handler;\n\n                // there is a bug in ISO23009-1 where the metrics attribute\n                // is a comma-separated list but HttpList key can contain a\n                // comma enclosed by ().\n                if ((m.indexOf('(') !== -1) && m.indexOf(')') === -1) {\n                    let nextm = ms[midx + 1];\n\n                    if (nextm &&\n                            (nextm.indexOf('(') === -1) &&\n                            (nextm.indexOf(')') !== -1)) {\n                        m += ',' + nextm;\n\n                        // delete the next metric so forEach does not visit.\n                        delete ms[midx + 1];\n                    }\n                }\n\n                handler = metricsHandlerFactory.create(\n                    m,\n                    reportingController\n                );\n\n                if (handler) {\n                    handlers.push(handler);\n                }\n            }\n        );\n\n        eventBus.on(\n            Events.METRIC_ADDED,\n            handle,\n            instance\n        );\n\n        eventBus.on(\n            Events.METRIC_UPDATED,\n            handle,\n            instance\n        );\n    }\n\n    function reset() {\n        eventBus.off(\n            Events.METRIC_ADDED,\n            handle,\n            instance\n        );\n\n        eventBus.off(\n            Events.METRIC_UPDATED,\n            handle,\n            instance\n        );\n\n        handlers.forEach(handler => handler.reset());\n\n        handlers = [];\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset\n    };\n\n    return instance;\n}\n\nMetricsHandlersController.__dashjs_factory_name = 'MetricsHandlersController';\nexport default dashjs.FactoryMaker.getClassFactory(MetricsHandlersController); /* jshint ignore:line */\n"]}