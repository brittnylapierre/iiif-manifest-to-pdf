{"version":3,"sources":["../../../../../../src/streaming/metrics/controllers/RangeController.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;mMA+B6B,8BAA8B,6EAE3D,SAAS,eAAe,CAAC,MAAM,CAAE,CAE7B,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC,AACtB,IAAI,gBAAgB,CAAG,KAAK,CAAC,AAC7B,IAAI,OAAO,CAAG,IAAI,CAAC,OAAO,CAAC,AAC3B,IAAI,QAAQ,UAAA,CACR,MAAM,UAAA,CAAC,AAEX,IAAI,YAAY,CAAG,MAAM,CAAC,YAAY,CAAC,AAEvC,SAAS,UAAU,CAAC,EAAE,CAAE,CACpB,GAAI,EAAE,IAAI,EAAE,CAAC,MAAM,CAAE,CACjB,EAAE,CAAC,OAAO,CAAC,SAAA,CAAC,CAAI,CACZ,IAAI,KAAK,CAAG,CAAC,CAAC,SAAS,CAAC,AACxB,IAAI,GAAG,CAAG,KAAK,GAAG,CAAC,CAAC,QAAQ,CAAC,AAE7B,MAAM,CAAC,GAAG,CAAC,KAAK,CAAE,GAAG,CAAC,CAAC,CAC1B,CAAC,CAAC,AAEH,gBAAgB,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAChD,CACJ,AAED,SAAS,KAAK,EAAG,CACb,MAAM,CAAC,KAAK,EAAE,CAAC,CAClB,AAED,SAAS,KAAK,EAAG,CACb,MAAM,GAAG,uCAAiB,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC,CAC/C,AAED,SAAS,SAAS,EAAG,CACjB,IAAI,SAAS,CAAG,MAAM,CAAC,MAAM,CAAC,AAC9B,IAAI,IAAI,UAAA,CAAC,AAET,GAAI,CAAC,SAAS,CAAE,CACZ,OAAO,IAAI,CAAC,CACf;;AAID,IAAI,GAAG,gBAAgB,CACd,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,CAC5B,YAAY,CAAC,WAAW,CAAC,AAEjC,IAAK,IAAI,CAAC,CAAG,CAAC,CAAE,CAAC,GAAG,SAAS,CAAE,CAAC,IAAI,CAAC,EAAE,CACnC,IAAI,KAAK,CAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,AAC5B,IAAI,GAAG,CAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,AAExB,GAAI,AAAC,KAAK,IAAI,IAAI,IAAM,IAAI,GAAG,GAAG,AAAC,CAAE,CACjC,OAAO,IAAI,CAAC,CACf,CACJ,AAED,OAAO,KAAK,CAAC,CAChB,AAED,QAAQ,GAAG,CACP,UAAU,CAAE,UAAU,CACtB,KAAK,CAAO,KAAK,CACjB,SAAS,CAAG,SAAS,CACxB,CAAC,AAEF,KAAK,EAAE,CAAC,AAER,OAAO,QAAQ,CAAC,CACnB,AAED,eAAe,CAAC,qBAAqB,GAAG,iBAAiB,CAAC,qBAC3C,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,eAAe,CAAC","file":"RangeController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport CustomTimeRanges from '../../utils/CustomTimeRanges';\n\nfunction RangeController(config) {\n\n    config = config || {};\n    let useWallClockTime = false;\n    let context = this.context;\n    let instance,\n        ranges;\n\n    let mediaElement = config.mediaElement;\n\n    function initialize(rs) {\n        if (rs && rs.length) {\n            rs.forEach(r => {\n                let start = r.starttime;\n                let end = start + r.duration;\n\n                ranges.add(start, end);\n            });\n\n            useWallClockTime = !!rs[0]._useWallClockTime;\n        }\n    }\n\n    function reset() {\n        ranges.clear();\n    }\n\n    function setup() {\n        ranges = CustomTimeRanges(context).create();\n    }\n\n    function isEnabled() {\n        let numRanges = ranges.length;\n        let time;\n\n        if (!numRanges) {\n            return true;\n        }\n\n        // When not present, DASH Metrics reporting is requested\n        // for the whole duration of the content.\n        time = useWallClockTime ?\n                (new Date().getTime() / 1000) :\n                mediaElement.currentTime;\n\n        for (let i = 0; i < numRanges; i += 1) {\n            let start = ranges.start(i);\n            let end = ranges.end(i);\n\n            if ((start <= time) && (time < end)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    instance = {\n        initialize: initialize,\n        reset:      reset,\n        isEnabled:  isEnabled\n    };\n\n    setup();\n\n    return instance;\n}\n\nRangeController.__dashjs_factory_name = 'RangeController';\nexport default dashjs.FactoryMaker.getClassFactory(RangeController); /* jshint ignore:line */\n"]}