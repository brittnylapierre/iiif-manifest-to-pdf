{"version":3,"sources":["../../../../../../../src/streaming/metrics/metrics/handlers/BufferLevelHandler.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;iMA+B2B,4BAA4B,yEAEvD,SAAS,kBAAkB,CAAC,MAAM,CAAE,CAEhC,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC,AACtB,IAAI,QAAQ,UAAA,CACR,mBAAmB,UAAA,CACnB,CAAC,UAAA,CACD,IAAI,UAAA,CACJ,QAAQ,UAAA,CACR,gBAAgB,UAAA,CAAC,AAErB,IAAI,OAAO,CAAG,IAAI,CAAC,OAAO,CAAC,AAC3B,IAAI,cAAc,CAAG,qCAAe,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC,AAE3D,IAAI,SAAS,CAAG,EAAE,CAAC,AAEnB,IAAM,gBAAgB,CAAG,MAAM,CAAC,gBAAgB,CAAC,AAEjD,SAAS,sBAAsB,EAAG,CAC9B,GAAI,CACA,OAAO,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAC7B,SAAA,GAAG,SAAI,SAAS,CAAC,GAAG,CAAC,EAAA,CACxB,CAAC,MAAM,CACJ,SAAC,CAAC,CAAE,CAAC,CAAK,CACN,OAAO,AAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAI,CAAC,CAAG,CAAC,CAAC,CACtC,CACJ,CAAC,CACL,AAAC,MAAO,CAAC,EAAE,CACR,OAAO,CACV,CACJ,AAED,SAAS,gBAAgB,EAAG,CACxB,IAAI,EAAE,CAAG,sBAAsB,EAAE,CAAC,AAElC,GAAI,EAAE,CAAE,CACJ,GAAI,gBAAgB,KAAK,EAAE,CAAC,CAAC,CAAE,CAC3B,gBAAgB,GAAG,EAAE,CAAC,CAAC,CAAC,AACxB,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAE,EAAE,CAAC,CAAC,CACxC,CACJ,CACJ,AAED,SAAS,UAAU,CAAC,QAAQ,CAAE,EAAE,CAAE,IAAI,CAAE,CACpC,GAAI,EAAE,CAAE;;AAGJ,CAAC,GAAG,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,AACnC,mBAAmB,GAAG,EAAE,CAAC,AACzB,IAAI,GAAG,cAAc,CAAC,yBAAyB,CAAC,QAAQ,CAAE,IAAI,CAAC,CAAC,AAChE,QAAQ,GAAG,WAAW,CAAC,gBAAgB,CAAE,CAAC,CAAC,CAAC,CAC/C,CACJ,AAED,SAAS,KAAK,EAAG,CACb,aAAa,CAAC,QAAQ,CAAC,CAAC,AACxB,QAAQ,GAAG,IAAI,CAAC,AAChB,CAAC,GAAG,CAAC,CAAC,AACN,mBAAmB,GAAG,IAAI,CAAC,AAC3B,gBAAgB,GAAG,IAAI,CAAC,CAC3B,AAED,SAAS,eAAe,CAAC,MAAM,CAAE,EAAE,CAAE,IAAI,CAAE,CACvC,GAAI,MAAM,KAAK,gBAAgB,CAAC,YAAY,CAAE,CAC1C,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CACxB,CACJ,AAED,QAAQ,GAAG,CACP,UAAU,CAAU,UAAU,CAC9B,KAAK,CAAe,KAAK,CACzB,eAAe,CAAK,eAAe,CACtC,CAAC,AAEF,OAAO,QAAQ,CAAC,CACnB,AAED,kBAAkB,CAAC,qBAAqB,GAAG,oBAAoB,CAAC,qBACjD,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,kBAAkB,CAAC","file":"BufferLevelHandler.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport HandlerHelpers from '../../utils/HandlerHelpers';\n\nfunction BufferLevelHandler(config) {\n\n    config = config || {};\n    let instance,\n        reportingController,\n        n,\n        name,\n        interval,\n        lastReportedTime;\n\n    let context = this.context;\n    let handlerHelpers = HandlerHelpers(context).getInstance();\n\n    let storedVOs = [];\n\n    const metricsConstants = config.metricsConstants;\n\n    function getLowestBufferLevelVO() {\n        try {\n            return Object.keys(storedVOs).map(\n                key => storedVOs[key]\n            ).reduce(\n                (a, b) => {\n                    return (a.level < b.level) ? a : b;\n                }\n            );\n        } catch (e) {\n            return;\n        }\n    }\n\n    function intervalCallback() {\n        let vo = getLowestBufferLevelVO();\n\n        if (vo) {\n            if (lastReportedTime !== vo.t) {\n                lastReportedTime = vo.t;\n                reportingController.report(name, vo);\n            }\n        }\n    }\n\n    function initialize(basename, rc, n_ms) {\n        if (rc) {\n            // this will throw if n is invalid, to be\n            // caught by the initialize caller.\n            n = handlerHelpers.validateN(n_ms);\n            reportingController = rc;\n            name = handlerHelpers.reconstructFullMetricName(basename, n_ms);\n            interval = setInterval(intervalCallback, n);\n        }\n    }\n\n    function reset() {\n        clearInterval(interval);\n        interval = null;\n        n = 0;\n        reportingController = null;\n        lastReportedTime = null;\n    }\n\n    function handleNewMetric(metric, vo, type) {\n        if (metric === metricsConstants.BUFFER_LEVEL) {\n            storedVOs[type] = vo;\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nBufferLevelHandler.__dashjs_factory_name = 'BufferLevelHandler';\nexport default dashjs.FactoryMaker.getClassFactory(BufferLevelHandler); /* jshint ignore:line */\n"]}