{"version":3,"sources":["../../../../../../../src/streaming/metrics/metrics/handlers/DVBErrorsHandler.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;oMA+BmC,8BAA8B,+EAEjE,SAAS,gBAAgB,CAAC,MAAM,CAAE,CAE9B,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC,AACtB,IAAI,QAAQ,UAAA,CACR,mBAAmB,UAAA,CAAC,AAExB,IAAI,QAAQ,CAAG,MAAM,CAAC,QAAQ,CAAC,AAC/B,IAAM,gBAAgB,CAAG,MAAM,CAAC,gBAAgB,CAAC,AAEjD,SAAS,wBAAwB,EAAG;AAEhC,QAAQ,CAAC,GAAG,CACR,oCAAuB,+BAA+B,CACtD,wBAAwB,CACxB,IAAI,CACP,CAAC;;AAIF,QAAQ,CAAC,OAAO,CACZ,oCAAuB,uBAAuB,CACjD,CAAC,CACL,AAED,SAAS,UAAU,CAAC,MAAM,CAAE,EAAE,CAAE,CAC5B,GAAI,EAAE,CAAE,CACJ,mBAAmB,GAAG,EAAE,CAAC,AAEzB,QAAQ,CAAC,EAAE,CACP,oCAAuB,+BAA+B,CACtD,wBAAwB,CACxB,IAAI,CACP,CAAC,CACL,CACJ,AAED,SAAS,KAAK,EAAG,CACb,mBAAmB,GAAG,IAAI,CAAC,CAC9B,AAED,SAAS,eAAe,CAAC,MAAM,CAAE,EAAE,CAAE;AAEjC,GAAI,MAAM,KAAK,gBAAgB,CAAC,UAAU,CAAE,CACxC,GAAI,mBAAmB,CAAE,CACrB,mBAAmB,CAAC,MAAM,CAAC,MAAM,CAAE,EAAE,CAAC,CAAC,CAC1C,CACJ,CACJ,AAED,QAAQ,GAAG,CACP,UAAU,CAAU,UAAU,CAC9B,KAAK,CAAe,KAAK,CACzB,eAAe,CAAK,eAAe,CACtC,CAAC,AAEF,OAAO,QAAQ,CAAC,CACnB,qBAEc,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,gBAAgB,CAAC","file":"DVBErrorsHandler.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsReportingEvents from '../../MetricsReportingEvents';\n\nfunction DVBErrorsHandler(config) {\n\n    config = config || {};\n    let instance,\n        reportingController;\n\n    let eventBus = config.eventBus;\n    const metricsConstants = config.metricsConstants;\n\n    function onInitialisationComplete() {\n        // we only want to report this once per call to initialize\n        eventBus.off(\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\n            onInitialisationComplete,\n            this\n        );\n\n        // Note: A Player becoming a reporting Player is itself\n        // something which is recorded by the DVBErrors metric.\n        eventBus.trigger(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER\n        );\n    }\n\n    function initialize(unused, rc) {\n        if (rc) {\n            reportingController = rc;\n\n            eventBus.on(\n                MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\n                onInitialisationComplete,\n                this\n            );\n        }\n    }\n\n    function reset() {\n        reportingController = null;\n    }\n\n    function handleNewMetric(metric, vo) {\n        // simply pass metric straight through\n        if (metric === metricsConstants.DVB_ERRORS) {\n            if (reportingController) {\n                reportingController.report(metric, vo);\n            }\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nexport default dashjs.FactoryMaker.getClassFactory(DVBErrorsHandler); /* jshint ignore:line */\n"]}