{"version":3,"sources":["../../../../../../../src/streaming/metrics/reporting/reporters/DVBReporting.js"],"names":[],"mappings":"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","file":"DVBReporting.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricSerialiser from '../../utils/MetricSerialiser';\nimport RNG from '../../utils/RNG';\n\nfunction DVBReporting(config) {\n    config = config || {};\n    let instance;\n\n    let context = this.context;\n    let metricSerialiser = MetricSerialiser(context).getInstance();\n    let randomNumberGenerator = RNG(context).getInstance();\n\n    let USE_DRAFT_DVB_SPEC = true;\n    let isReportingPlayer = false;\n    let reportingPlayerStatusDecided = false;\n    let reportingUrl = null;\n    let rangeController = null;\n    let allowPendingRequestsToCompleteOnReset = true;\n    let pendingRequests = [];\n\n    const metricsConstants = config.metricsConstants;\n\n    function doGetRequest(url, successCB, failureCB) {\n        let req = new XMLHttpRequest();\n        const oncomplete = function () {\n            let reqIndex = pendingRequests.indexOf(req);\n\n            if (reqIndex === -1) {\n                return;\n            } else {\n                pendingRequests.splice(reqIndex, 1);\n            }\n\n            if ((req.status >= 200) && (req.status < 300)) {\n                if (successCB) {\n                    successCB();\n                }\n            } else {\n                if (failureCB) {\n                    failureCB();\n                }\n            }\n        };\n\n        pendingRequests.push(req);\n\n        try {\n            req.open('GET', url);\n            req.onloadend = oncomplete;\n            req.onerror = oncomplete;\n            req.send();\n        } catch (e) {\n            req.onerror();\n        }\n    }\n\n    function report(type, vos) {\n        if (!Array.isArray(vos)) {\n            vos = [vos];\n        }\n\n        // If the Player is not a reporting Player, then the Player shall\n        // not report any errors.\n        // ... In addition to any time restrictions specified by a Range\n        // element within the Metrics element.\n        if (isReportingPlayer && rangeController.isEnabled()) {\n\n            // This reporting mechanism operates by creating one HTTP GET\n            // request for every entry in the top level list of the metric.\n            vos.forEach(function (vo) {\n                let url = metricSerialiser.serialise(vo);\n\n                // this has been proposed for errata\n                if (USE_DRAFT_DVB_SPEC && (type !== metricsConstants.DVB_ERRORS)) {\n                    url = `metricname=${type}&${url}`;\n                }\n\n                // Take the value of the @reportingUrl attribute, append a\n                // question mark ('?') character and then append the string\n                // created in the previous step.\n                url = `${reportingUrl}?${url}`;\n\n                // Make an HTTP GET request to the URL contained within the\n                // string created in the previous step.\n                doGetRequest(url, null, function () {\n                    // If the Player is unable to make the report, for\n                    // example because the @reportingUrl is invalid, the\n                    // host cannot be reached, or an HTTP status code other\n                    // than one in the 200 series is received, the Player\n                    // shall cease being a reporting Player for the\n                    // duration of the MPD.\n                    isReportingPlayer = false;\n                });\n            });\n        }\n    }\n\n    function initialize(entry, rc) {\n        let probability;\n\n        rangeController = rc;\n\n        reportingUrl = entry['dvb:reportingUrl'];\n\n        // If a required attribute is missing, the Reporting descriptor may\n        // be ignored by the Player\n        if (!reportingUrl) {\n            throw new Error(\n                'required parameter missing (dvb:reportingUrl)'\n            );\n        }\n\n        // A Player's status, as a reporting Player or not, shall remain\n        // static for the duration of the MPD, regardless of MPD updates.\n        // (i.e. only calling reset (or failure) changes this state)\n        if (!reportingPlayerStatusDecided) {\n            // NOTE: DVB spec has a typo where it incorrectly references the\n            // priority attribute, which should be probability\n            probability = entry['dvb:probability'] || entry['dvb:priority'] || 0;\n            // If the @priority attribute is set to 1000, it shall be a reporting Player.\n            // If the @priority attribute is missing, the Player shall not be a reporting Player.\n            // For any other value of the @probability attribute, it shall decide at random whether to be a\n            // reporting Player, such that the probability of being one is @probability/1000.\n            if (probability && (probability === 1000 || ((probability / 1000) >= randomNumberGenerator.random()))) {\n                isReportingPlayer = true;\n            }\n\n            reportingPlayerStatusDecided = true;\n        }\n    }\n\n    function reset() {\n        if (!allowPendingRequestsToCompleteOnReset) {\n            pendingRequests.forEach(req => req.abort());\n            pendingRequests = [];\n        }\n\n        reportingPlayerStatusDecided = false;\n        isReportingPlayer = false;\n        reportingUrl = null;\n        rangeController = null;\n    }\n\n    instance = {\n        report:     report,\n        initialize: initialize,\n        reset:      reset\n    };\n\n    return instance;\n}\n\nDVBReporting.__dashjs_factory_name = 'DVBReporting';\nexport default dashjs.FactoryMaker.getClassFactory(DVBReporting); /* jshint ignore:line */\n"]}