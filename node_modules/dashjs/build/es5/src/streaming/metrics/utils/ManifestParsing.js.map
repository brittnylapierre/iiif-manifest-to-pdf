{"version":3,"sources":["../../../../../../src/streaming/metrics/utils/ManifestParsing.js"],"names":[],"mappings":"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","file":"ManifestParsing.js","sourcesContent":["import Metrics from '../vo/Metrics';\nimport Range from '../vo/Range';\nimport Reporting from '../vo/Reporting';\n\nfunction ManifestParsing (config) {\n    config = config || {};\n    let instance;\n    let dashManifestModel = config.dashManifestModel;\n    const constants = config.constants;\n\n    function getMetricsRangeStartTime(manifest, dynamic, range) {\n        var mpd = dashManifestModel.getMpd(manifest);\n        var voPeriods;\n        var presentationStartTime = 0;\n        var reportingStartTime;\n\n        if (dynamic) {\n            // For services with MPD@type='dynamic', the start time is\n            // indicated in wall clock time by adding the value of this\n            // attribute to the value of the MPD@availabilityStartTime\n            // attribute.\n            presentationStartTime = mpd.availabilityStartTime.getTime() / 1000;\n        } else {\n            // For services with MPD@type='static', the start time is indicated\n            // in Media Presentation time and is relative to the PeriodStart\n            // time of the first Period in this MPD.\n            voPeriods = this.getRegularPeriods(mpd);\n\n            if (voPeriods.length) {\n                presentationStartTime = voPeriods[0].start;\n            }\n        }\n\n        // When not present, DASH Metrics collection is\n        // requested from the beginning of content\n        // consumption.\n        reportingStartTime = presentationStartTime;\n\n        if (range && range.hasOwnProperty(constants.START_TIME)) {\n            reportingStartTime += range.starttime;\n        }\n\n        return reportingStartTime;\n    }\n\n    function getMetrics(manifest) {\n        var metrics = [];\n\n        if (manifest.Metrics_asArray) {\n            manifest.Metrics_asArray.forEach(metric => {\n                var metricEntry = new Metrics();\n                var isDynamic = dashManifestModel.getIsDynamic(manifest);\n\n                if (metric.hasOwnProperty('metrics')) {\n                    metricEntry.metrics = metric.metrics;\n                } else {\n                    //console.log(\"Invalid Metrics. metrics must be set. Ignoring.\");\n                    return;\n                }\n\n                if (metric.Range_asArray) {\n                    metric.Range_asArray.forEach(range => {\n                        var rangeEntry = new Range();\n\n                        rangeEntry.starttime =\n                            getMetricsRangeStartTime(manifest, isDynamic, range);\n\n                        if (range.hasOwnProperty('duration')) {\n                            rangeEntry.duration = range.duration;\n                        } else {\n                            // if not present, the value is identical to the\n                            // Media Presentation duration.\n                            rangeEntry.duration = dashManifestModel.getDuration(manifest);\n                        }\n\n                        rangeEntry._useWallClockTime = isDynamic;\n\n                        metricEntry.Range.push(rangeEntry);\n                    });\n                }\n\n                if (metric.Reporting_asArray) {\n                    metric.Reporting_asArray.forEach(reporting => {\n                        var reportingEntry = new Reporting();\n\n                        if (reporting.hasOwnProperty(constants.SCHEME_ID_URI)) {\n                            reportingEntry.schemeIdUri = reporting.schemeIdUri;\n                        } else {\n                            // Invalid Reporting. schemeIdUri must be set. Ignore.\n                            return;\n                        }\n\n                        for (const prop in reporting) {\n                            if (reporting.hasOwnProperty(prop)) {\n                                reportingEntry[prop] = reporting[prop];\n                            }\n                        }\n\n                        metricEntry.Reporting.push(reportingEntry);\n                    });\n                } else {\n                    // Invalid Metrics. At least one reporting must be present. Ignore\n                    return;\n                }\n\n                metrics.push(metricEntry);\n            });\n        }\n\n        return metrics;\n    }\n\n    instance = {\n        getMetrics: getMetrics\n    };\n\n    return instance;\n}\n\nManifestParsing.__dashjs_factory_name = 'ManifestParsing';\nexport default dashjs.FactoryMaker.getSingletonFactory(ManifestParsing); /* jshint ignore:line */"]}