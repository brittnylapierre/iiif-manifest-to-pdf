{"version":3,"sources":["../../../../../../src/streaming/metrics/utils/MetricSerialiser.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;yEA+BA,SAAS,gBAAgB,EAAG;;;AAKxB,SAAS,SAAS,CAAC,MAAM,CAAE,CACvB,IAAI,KAAK,CAAG,EAAE,CAAC,AACf,IAAI,GAAG,CAAG,EAAE,CAAC,AACb,IAAI,GAAG,UAAA,CACH,KAAK,UAAA,CAAC;;;;;AAOV,IAAK,GAAG,IAAI,MAAM,EAAE,CAChB,GAAI,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,IAAK,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,AAAC,CAAE,CACxD,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;;AAIpB,GAAI,AAAC,KAAK,KAAK,SAAS,IAAM,KAAK,KAAK,IAAI,AAAC,CAAE,CAC3C,KAAK,GAAG,EAAE,CAAC,CACd;AAGD,GAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAE;AAEtB,GAAI,CAAC,KAAK,CAAC,MAAM,CAAE,CACf,SAAS,CACZ,AAED,GAAG,GAAG,EAAE,CAAC,AAET,KAAK,CAAC,OAAO,CAAC,SAAU,CAAC,CAAE,CACvB,IAAI,SAAS,CAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,AAE5E,GAAG,CAAC,IAAI,CAAC,SAAS,CAAG,CAAC,CAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAC1C,CAAC,CAAC,AAEH,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CACjD,KAAM,GAAI,OAAO,KAAK,KAAK,QAAQ,CAAE,CAClC,KAAK,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC,CACrC,KAAM,GAAI,KAAK,YAAY,IAAI,CAAE,CAC9B,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC,CAC/B,KAAM,GAAI,OAAO,KAAK,KAAK,QAAQ,CAAE,CAClC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAC7B,AAED,KAAK,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,CACjC,CACJ;;AAID,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAC1B,AAED,OAAO,CACH,SAAS,CAAE,SAAS,CACvB,CAAC,CACL,AAED,gBAAgB,CAAC,qBAAqB,GAAG,kBAAkB,CAAC,qBAC7C,MAAM,CAAC,YAAY,CAAC,mBAAmB,CAAC,gBAAgB,CAAC","file":"MetricSerialiser.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nfunction MetricSerialiser() {\n\n    // For each entry in the top level list within the metric (in the case\n    // of the DVBErrors metric each entry corresponds to an \"error event\"\n    // described in clause 10.8.4) the Player shall:\n    function serialise(metric) {\n        let pairs = [];\n        let obj = [];\n        let key,\n            value;\n\n        // Take each (key, value) pair from the metric entry and create a\n        // string consisting of the name of the key, followed by an equals\n        // ('=') character, followed by the string representation of the\n        // value. The string representation of the value is created based\n        // on the type of the value following the instructions in Table 22.\n        for (key in metric) {\n            if (metric.hasOwnProperty(key) && (key.indexOf('_') !== 0)) {\n                value = metric[key];\n\n                // we want to ensure that keys still end up in the report\n                // even if there is no value\n                if ((value === undefined) || (value === null)) {\n                    value = '';\n                }\n\n                // DVB A168 10.12.4 Table 22\n                if (Array.isArray(value)) {\n                    // if trace or similar is null, do not include in output\n                    if (!value.length) {\n                        continue;\n                    }\n\n                    obj = [];\n\n                    value.forEach(function (v) {\n                        let isBuiltIn = Object.prototype.toString.call(v).slice(8, -1) !== 'Object';\n\n                        obj.push(isBuiltIn ? v : serialise(v));\n                    });\n\n                    value = obj.map(encodeURIComponent).join(',');\n                } else if (typeof value === 'string') {\n                    value = encodeURIComponent(value);\n                } else if (value instanceof Date) {\n                    value = value.toISOString();\n                } else if (typeof value === 'number') {\n                    value = Math.round(value);\n                }\n\n                pairs.push(key + '=' + value);\n            }\n        }\n\n        // Concatenate the strings created in the previous step with an\n        // ampersand ('&') character between each one.\n        return pairs.join('&');\n    }\n\n    return {\n        serialise: serialise\n    };\n}\n\nMetricSerialiser.__dashjs_factory_name = 'MetricSerialiser';\nexport default dashjs.FactoryMaker.getSingletonFactory(MetricSerialiser); /* jshint ignore:line */\n"]}