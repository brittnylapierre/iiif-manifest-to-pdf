{"version":3,"sources":["../../../../../src/streaming/models/MetricsModel.js"],"names":[],"mappings":"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","file":"MetricsModel.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport MetricsConstants from '../constants/MetricsConstants';\nimport MetricsList from '../vo/MetricsList';\nimport TCPConnection from '../vo/metrics/TCPConnection';\nimport {HTTPRequest, HTTPRequestTrace} from '../vo/metrics/HTTPRequest';\nimport TrackSwitch from '../vo/metrics/RepresentationSwitch';\nimport BufferLevel from '../vo/metrics/BufferLevel';\nimport BufferState from '../vo/metrics/BufferState';\nimport DVRInfo from '../vo/metrics/DVRInfo';\nimport DroppedFrames from '../vo/metrics/DroppedFrames';\nimport {ManifestUpdate, ManifestUpdateStreamInfo, ManifestUpdateRepresentationInfo} from '../vo/metrics/ManifestUpdate';\nimport SchedulingInfo from '../vo/metrics/SchedulingInfo';\nimport EventBus from '../../core/EventBus';\nimport RequestsQueue from '../vo/metrics/RequestsQueue';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\n\nfunction MetricsModel() {\n\n    const MAXIMUM_LIST_DEPTH = 1000;\n\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n\n    let instance,\n        adapter,\n        streamMetrics;\n\n    function setup() {\n        streamMetrics = {};\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.adapter) {\n            adapter = config.adapter;\n        }\n    }\n\n    function metricsChanged() {\n        eventBus.trigger(Events.METRICS_CHANGED);\n    }\n\n    function metricChanged(mediaType) {\n        eventBus.trigger(Events.METRIC_CHANGED, {mediaType: mediaType});\n        metricsChanged();\n    }\n\n    function metricUpdated(mediaType, metricType, vo) {\n        eventBus.trigger(Events.METRIC_UPDATED, {mediaType: mediaType, metric: metricType, value: vo});\n        metricChanged(mediaType);\n    }\n\n    function metricAdded(mediaType, metricType, vo) {\n        eventBus.trigger(Events.METRIC_ADDED, {mediaType: mediaType, metric: metricType, value: vo});\n        metricChanged(mediaType);\n    }\n\n    function clearCurrentMetricsForType(type) {\n        delete streamMetrics[type];\n        metricChanged(type);\n    }\n\n    function clearAllCurrentMetrics() {\n        streamMetrics = {};\n        metricsChanged();\n    }\n\n    function getReadOnlyMetricsFor(type) {\n        if (streamMetrics.hasOwnProperty(type)) {\n            return streamMetrics[type];\n        }\n\n        return null;\n    }\n\n    function getMetricsFor(type) {\n        let metrics;\n\n        if (streamMetrics.hasOwnProperty(type)) {\n            metrics = streamMetrics[type];\n        } else {\n            metrics = new MetricsList();\n            streamMetrics[type] = metrics;\n        }\n\n        return metrics;\n    }\n\n    function pushMetrics(type, list, value) {\n        let metrics = getMetricsFor(type);\n        metrics[list].push(value);\n        if ( metrics[list].length > MAXIMUM_LIST_DEPTH ) {\n            metrics[list].shift();\n        }\n    }\n\n    function addTcpConnection(mediaType, tcpid, dest, topen, tclose, tconnect) {\n        let vo = new TCPConnection();\n\n        vo.tcpid = tcpid;\n        vo.dest = dest;\n        vo.topen = topen;\n        vo.tclose = tclose;\n        vo.tconnect = tconnect;\n\n        pushAndNotify(mediaType, MetricsConstants.TCP_CONNECTION, vo);\n\n        return vo;\n    }\n\n    function appendHttpTrace(httpRequest, s, d, b) {\n        let vo = new HTTPRequestTrace();\n\n        vo.s = s;\n        vo.d = d;\n        vo.b = b;\n\n        httpRequest.trace.push(vo);\n\n        if (!httpRequest.interval) {\n            httpRequest.interval = 0;\n        }\n\n        httpRequest.interval += d;\n\n        return vo;\n    }\n\n    function addHttpRequest(mediaType, tcpid, type, url, actualurl, serviceLocation, range, trequest, tresponse, tfinish, responsecode, mediaduration, responseHeaders, traces) {\n        let vo = new HTTPRequest();\n\n        // ISO 23009-1 D.4.3 NOTE 2:\n        // All entries for a given object will have the same URL and range\n        // and so can easily be correlated. If there were redirects or\n        // failures there will be one entry for each redirect/failure.\n        // The redirect-to URL or alternative url (where multiple have been\n        // provided in the MPD) will appear as the actualurl of the next\n        // entry with the same url value.\n        if (actualurl && (actualurl !== url)) {\n\n            // given the above, add an entry for the original request\n            addHttpRequest(\n                mediaType,\n                null,\n                type,\n                url,\n                null,\n                null,\n                range,\n                trequest,\n                null, // unknown\n                null, // unknown\n                null, // unknown, probably a 302\n                mediaduration,\n                null,\n                null\n            );\n\n            vo.actualurl = actualurl;\n        }\n\n        vo.tcpid = tcpid;\n        vo.type = type;\n        vo.url = url;\n        vo.range = range;\n        vo.trequest = trequest;\n        vo.tresponse = tresponse;\n        vo.responsecode = responsecode;\n\n        vo._tfinish = tfinish;\n        vo._stream = mediaType;\n        vo._mediaduration = mediaduration;\n        vo._responseHeaders = responseHeaders;\n        vo._serviceLocation = serviceLocation;\n\n        if (traces) {\n            traces.forEach(trace => {\n                appendHttpTrace(vo, trace.s, trace.d, trace.b);\n            });\n        } else {\n            // The interval and trace shall be absent for redirect and failure records.\n            delete vo.interval;\n            delete vo.trace;\n        }\n\n        pushAndNotify(mediaType, MetricsConstants.HTTP_REQUEST, vo);\n\n        return vo;\n    }\n\n    function addRepresentationSwitch(mediaType, t, mt, to, lto) {\n        let vo = new TrackSwitch();\n\n        vo.t = t;\n        vo.mt = mt;\n        vo.to = to;\n\n        if (lto) {\n            vo.lto = lto;\n        } else {\n            delete vo.lto;\n        }\n\n        pushAndNotify(mediaType, MetricsConstants.TRACK_SWITCH, vo);\n\n        return vo;\n    }\n\n    function pushAndNotify(mediaType, metricType, metricObject) {\n        pushMetrics(mediaType, metricType, metricObject);\n        metricAdded(mediaType, metricType, metricObject);\n    }\n\n    function addBufferLevel(mediaType, t, level) {\n        let vo = new BufferLevel();\n        vo.t = t;\n        vo.level = level;\n\n        pushAndNotify(mediaType, MetricsConstants.BUFFER_LEVEL, vo);\n\n        return vo;\n    }\n\n    function addBufferState(mediaType, state, target) {\n        let vo = new BufferState();\n        vo.target = target;\n        vo.state = state;\n\n        pushAndNotify(mediaType, MetricsConstants.BUFFER_STATE, vo);\n\n        return vo;\n    }\n\n    function addDVRInfo(mediaType, currentTime, mpd, range) {\n        let vo = new DVRInfo();\n        vo.time = currentTime ;\n        vo.range = range;\n        vo.manifestInfo = mpd;\n\n        pushAndNotify(mediaType, MetricsConstants.DVR_INFO, vo);\n\n        return vo;\n    }\n\n    function addDroppedFrames(mediaType, quality) {\n        let vo = new DroppedFrames();\n        let list = getMetricsFor(mediaType).DroppedFrames;\n\n        vo.time = quality.creationTime;\n        vo.droppedFrames = quality.droppedVideoFrames;\n\n        if (list.length > 0 && list[list.length - 1] == vo) {\n            return list[list.length - 1];\n        }\n\n        pushAndNotify(mediaType, MetricsConstants.DROPPED_FRAMES, vo);\n\n        return vo;\n    }\n\n    function addSchedulingInfo(mediaType, t, type, startTime, availabilityStartTime, duration, quality, range, state) {\n        let vo = new SchedulingInfo();\n\n        vo.mediaType = mediaType;\n        vo.t = t;\n\n        vo.type = type;\n        vo.startTime = startTime;\n        vo.availabilityStartTime = availabilityStartTime;\n        vo.duration = duration;\n        vo.quality = quality;\n        vo.range = range;\n\n        vo.state = state;\n\n        pushAndNotify(mediaType, MetricsConstants.SCHEDULING_INFO, vo);\n\n        return vo;\n    }\n\n    function addRequestsQueue(mediaType, loadingRequests, executedRequests) {\n        let vo = new RequestsQueue();\n        vo.loadingRequests = loadingRequests;\n        vo.executedRequests = executedRequests;\n\n        getMetricsFor(mediaType).RequestsQueue = vo;\n        metricAdded(mediaType, MetricsConstants.REQUESTS_QUEUE, vo);\n    }\n\n    function addManifestUpdate(mediaType, type, requestTime, fetchTime, availabilityStartTime, presentationStartTime, clientTimeOffset, currentTime, buffered, latency) {\n        let vo = new ManifestUpdate();\n\n        vo.mediaType = mediaType;\n        vo.type = type;\n        vo.requestTime = requestTime; // when this manifest update was requested\n        vo.fetchTime = fetchTime; // when this manifest update was received\n        vo.availabilityStartTime = availabilityStartTime;\n        vo.presentationStartTime = presentationStartTime; // the seek point (liveEdge for dynamic, Stream[0].startTime for static)\n        vo.clientTimeOffset = clientTimeOffset; // the calculated difference between the server and client wall clock time\n        vo.currentTime = currentTime; // actual element.currentTime\n        vo.buffered = buffered; // actual element.ranges\n        vo.latency = latency; // (static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - currentTime)\n\n        pushMetrics(Constants.STREAM, MetricsConstants.MANIFEST_UPDATE, vo);\n        metricAdded(mediaType, MetricsConstants.MANIFEST_UPDATE, vo);\n\n        return vo;\n    }\n\n    function updateManifestUpdateInfo(manifestUpdate, updatedFields) {\n        if (manifestUpdate) {\n            for (let field in updatedFields) {\n                manifestUpdate[field] = updatedFields[field];\n            }\n\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE, manifestUpdate);\n        }\n    }\n\n    function addManifestUpdateStreamInfo(manifestUpdate, id, index, start, duration) {\n        if (manifestUpdate) {\n            let vo = new ManifestUpdateStreamInfo();\n\n            vo.id = id;\n            vo.index = index;\n            vo.start = start;\n            vo.duration = duration;\n\n            manifestUpdate.streamInfo.push(vo);\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE_STREAM_INFO, manifestUpdate);\n\n            return vo;\n        }\n        return null;\n    }\n\n    function addManifestUpdateRepresentationInfo(manifestUpdate, id, index, streamIndex, mediaType, presentationTimeOffset, startNumber, fragmentInfoType) {\n        if (manifestUpdate) {\n\n            const vo = new ManifestUpdateRepresentationInfo();\n            vo.id = id;\n            vo.index = index;\n            vo.streamIndex = streamIndex;\n            vo.mediaType = mediaType;\n            vo.startNumber = startNumber;\n            vo.fragmentInfoType = fragmentInfoType;\n            vo.presentationTimeOffset = presentationTimeOffset;\n\n            manifestUpdate.representationInfo.push(vo);\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE_TRACK_INFO, manifestUpdate);\n\n            return vo;\n        }\n        return null;\n    }\n\n    function addPlayList(vo) {\n        let type = Constants.STREAM;\n\n        if (vo.trace && Array.isArray(vo.trace)) {\n            vo.trace.forEach(trace => {\n                if (trace.hasOwnProperty('subreplevel') && !trace.subreplevel) {\n                    delete trace.subreplevel;\n                }\n            });\n        } else {\n            delete vo.trace;\n        }\n\n        pushAndNotify(type, MetricsConstants.PLAY_LIST, vo);\n\n        return vo;\n    }\n\n    function addDVBErrors(vo) {\n        let type = Constants.STREAM;\n\n        pushAndNotify(type, MetricsConstants.DVB_ERRORS, vo);\n\n        return vo;\n    }\n\n    instance = {\n        clearCurrentMetricsForType: clearCurrentMetricsForType,\n        clearAllCurrentMetrics: clearAllCurrentMetrics,\n        getReadOnlyMetricsFor: getReadOnlyMetricsFor,\n        getMetricsFor: getMetricsFor,\n        addTcpConnection: addTcpConnection,\n        addHttpRequest: addHttpRequest,\n        addRepresentationSwitch: addRepresentationSwitch,\n        addBufferLevel: addBufferLevel,\n        addBufferState: addBufferState,\n        addDVRInfo: addDVRInfo,\n        addDroppedFrames: addDroppedFrames,\n        addSchedulingInfo: addSchedulingInfo,\n        addRequestsQueue: addRequestsQueue,\n        addManifestUpdate: addManifestUpdate,\n        updateManifestUpdateInfo: updateManifestUpdateInfo,\n        addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,\n        addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,\n        addPlayList: addPlayList,\n        addDVBErrors: addDVBErrors,\n        setConfig: setConfig\n    };\n\n    setup();\n    return instance;\n}\n\nMetricsModel.__dashjs_factory_name = 'MetricsModel';\nexport default FactoryMaker.getSingletonFactory(MetricsModel);\n"]}