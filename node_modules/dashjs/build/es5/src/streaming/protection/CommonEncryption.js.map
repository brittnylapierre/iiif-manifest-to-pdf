{"version":3,"sources":["../../../../../src/streaming/protection/CommonEncryption.js"],"names":[],"mappings":"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","file":"CommonEncryption.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nclass CommonEncryption {\n    /**\n     * Find and return the ContentProtection element in the given array\n     * that indicates support for MPEG Common Encryption\n     *\n     * @param {Array} cpArray array of content protection elements\n     * @returns {Object|null} the Common Encryption content protection element or\n     * null if one was not found\n     */\n    static findCencContentProtection(cpArray) {\n        let retVal = null;\n        for (let i = 0; i < cpArray.length; ++i) {\n            let cp = cpArray[i];\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\n                    cp.value.toLowerCase() === 'cenc')\n                retVal = cp;\n        }\n        return retVal;\n    }\n\n    /**\n     * Returns just the data portion of a single PSSH\n     *\n     * @param {ArrayBuffer} pssh - the PSSH\n     * @return {ArrayBuffer} data portion of the PSSH\n     */\n    static getPSSHData(pssh) {\n        let offset = 8; // Box size and type fields\n        let view = new DataView(pssh);\n\n        // Read version\n        let version = view.getUint8(offset);\n\n        offset += 20; // Version (1), flags (3), system ID (16)\n\n        if (version > 0) {\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\n        }\n\n        offset += 4; // Data size\n        return pssh.slice(offset);\n    }\n\n    /**\n     * Returns the PSSH associated with the given key system from the concatenated\n     * list of PSSH boxes in the given initData\n     *\n     * @param {KeySystem} keySystem the desired\n     * key system\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\n     * or null if a valid association could not be found.\n     */\n    static getPSSHForKeySystem(keySystem, initData) {\n        let psshList = CommonEncryption.parsePSSHList(initData);\n        if (psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\n            return psshList[keySystem.uuid.toLowerCase()];\n        }\n        return null;\n    }\n\n    /**\n     * Parse a standard common encryption PSSH which contains a simple\n     * base64-encoding of the init data\n     *\n     * @param {Object} cpData the ContentProtection element\n     * @param {BASE64} BASE64 reference\n     * @returns {ArrayBuffer|null} the init data or null if not found\n     */\n    static parseInitDataFromContentProtection(cpData, BASE64) {\n        if ('pssh' in cpData) {\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\n        }\n        return null;\n    }\n\n    /**\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\n     *\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\n     * CDM as initialization data when CommonEncryption content is detected\n     * @returns {Object|Array} an object that has a property named according to each of\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\n     * and a ArrayBuffer (the entire PSSH box) as the property value\n     */\n    static parsePSSHList(data) {\n\n        if (data === null)\n            return [];\n\n        let dv = new DataView(data.buffer || data); // data.buffer first for Uint8Array support\n        let done = false;\n        let pssh = {};\n\n        // TODO: Need to check every data read for end of buffer\n        let byteCursor = 0;\n        while (!done) {\n\n            let size,\n                nextBox,\n                version,\n                systemID,\n                psshDataSize;\n            let boxStart = byteCursor;\n\n            if (byteCursor >= dv.buffer.byteLength)\n                break;\n\n            /* Box size */\n            size = dv.getUint32(byteCursor);\n            nextBox = byteCursor + size;\n            byteCursor += 4;\n\n            /* Verify PSSH */\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor += 4;\n\n            /* Version must be 0 or 1 */\n            version = dv.getUint8(byteCursor);\n            if (version !== 0 && version !== 1) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor++;\n\n            byteCursor += 3; /* skip flags */\n\n            // 16-byte UUID/SystemID\n            systemID = '';\n            let i, val;\n            for (i = 0; i < 4; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 4;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 6; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 6;\n\n            systemID = systemID.toLowerCase();\n\n            /* PSSH Data Size */\n            psshDataSize = dv.getUint32(byteCursor);\n            byteCursor += 4;\n\n            /* PSSH Data */\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\n            byteCursor = nextBox;\n        }\n\n        return pssh;\n    }\n}\n\nexport default CommonEncryption;\n"]}