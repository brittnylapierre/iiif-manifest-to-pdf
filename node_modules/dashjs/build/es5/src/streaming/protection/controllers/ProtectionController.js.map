{"version":3,"sources":["../../../../../../src/streaming/protection/controllers/ProtectionController.js"],"names":[],"mappings":"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","file":"ProtectionController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport CommonEncryption from '../CommonEncryption';\nimport MediaCapability from '../vo/MediaCapability';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\n\n/**\n * @module ProtectionController\n * @description Provides access to media protection information and functionality.  Each\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\n * which encapsulates a set of protection information (EME APIs, selected key system,\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\n * functionality provided in {@link ProtectionKeyController}.\n * @todo ProtectionController does almost all of its tasks automatically after init() is\n * called.  Applications might want more control over this process and want to go through\n * each step manually (key system selection, session creation, session maintenance).\n * @param {Object} config\n */\n\nfunction ProtectionController(config) {\n\n    config = config || {};\n    const protectionKeyController = config.protectionKeyController;\n    let protectionModel = config.protectionModel;\n    let eventBus = config.eventBus;\n    const events = config.events;\n    let log = config.log;\n    let BASE64 = config.BASE64;\n    const constants = config.constants;\n\n    let instance,\n        pendingNeedKeyData,\n        mediaInfoArr,\n        protDataSet,\n        sessionType,\n        robustnessLevel,\n        keySystem;\n\n    function setup() {\n        pendingNeedKeyData = [];\n        mediaInfoArr = [];\n        sessionType = 'temporary';\n        robustnessLevel = '';\n    }\n\n    /**\n     * Initialize this protection system with a given audio\n     * or video stream information.\n     *\n     * @param {StreamInfo} [mediaInfo] Media information\n     * @memberof module:ProtectionController\n     * @instance\n     * @todo This API will change when we have better support for allowing applications\n     * to select different adaptation sets for playback.  Right now it is clunky for\n     * applications to create {@link StreamInfo} with the right information,\n     */\n    function initializeForMedia(mediaInfo) {\n        // Not checking here if a session for similar KS/KID combination is already created\n        // because still don't know which keysystem will be selected.\n        // Once Keysystem is selected and before creating the session, we will do that check\n        // so we create the strictly necessary DRM sessions\n        eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n\n        mediaInfoArr.push(mediaInfo);\n\n        // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\n        // and video will be the same.  Just use one valid MediaInfo object\n        const supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\n        if (supportedKS && supportedKS.length > 0) {\n            selectKeySystem(supportedKS, true);\n        }\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);\n    }\n\n    /**\n     * Create a new key session associated with the given initialization data from\n     * the MPD or from the PSSH box in the media\n     *\n     * @param {ArrayBuffer} initData the initialization data\n     * @param {Uint8Array} cdmData the custom data to provide to licenser\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\n     * to come up to speed with the latest EME standard\n     */\n    function createKeySession(initData, cdmData) {\n        const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\n        const protData = getProtData(keySystem);\n        if (initDataForKS) {\n\n            // Check for duplicate initData\n            const currentInitData = protectionModel.getAllInitData();\n            for (let i = 0; i < currentInitData.length; i++) {\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                    log('DRM: Ignoring initData because we have already seen it!');\n                    return;\n                }\n            }\n            try {\n                protectionModel.createKeySession(initDataForKS, protData, sessionType, cdmData);\n            } catch (error) {\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Error creating key session! ' + error.message});\n            }\n        } else if (initData) {\n            protectionModel.createKeySession(initData, protData, sessionType, cdmData);\n        } else {\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: null, error: 'Selected key system is ' + keySystem.systemString + '.  needkey/encrypted event contains no initData corresponding to that key system!'});\n        }\n    }\n\n    /**\n     * Loads a key session with the given session ID from persistent storage.  This\n     * essentially creates a new key session\n     *\n     * @param {string} sessionID\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionCreated\n     */\n    function loadKeySession(sessionID) {\n        protectionModel.loadKeySession(sessionID);\n    }\n\n    /**\n     * Removes the given key session from persistent storage and closes the session\n     * as if {@link ProtectionController#closeKeySession}\n     * was called\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionRemoved\n     * @fires ProtectionController#KeySessionClosed\n     */\n    function removeKeySession(sessionToken) {\n        protectionModel.removeKeySession(sessionToken);\n    }\n\n    /**\n     * Closes the key session and releases all associated decryption keys.  These\n     * keys will no longer be available for decrypting media\n     *\n     * @param {SessionToken} sessionToken the session\n     * token\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#KeySessionClosed\n     */\n    function closeKeySession(sessionToken) {\n        protectionModel.closeKeySession(sessionToken);\n    }\n\n    /**\n     * Sets a server certificate for use by the CDM when signing key messages\n     * intended for a particular license server.  This will fire\n     * an error event if a key system has not yet been selected.\n     *\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\n     * certificate\n     * @memberof module:ProtectionController\n     * @instance\n     * @fires ProtectionController#ServerCertificateUpdated\n     */\n    function setServerCertificate(serverCertificate) {\n        protectionModel.setServerCertificate(serverCertificate);\n    }\n\n    /**\n     * Associate this protection system with the given HTMLMediaElement.  This\n     * causes the system to register for needkey/encrypted events from the given\n     * element and provides a destination for setting of MediaKeys\n     *\n     * @param {HTMLMediaElement} element the media element to which the protection\n     * system should be associated\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setMediaElement(element) {\n        if (element) {\n            protectionModel.setMediaElement(element);\n            eventBus.on(events.NEED_KEY, onNeedKey, this);\n        } else if (element === null) {\n            protectionModel.setMediaElement(element);\n            eventBus.off(events.NEED_KEY, onNeedKey, this);\n        }\n    }\n\n    /**\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\n     * \"persistent-license\".  Default is \"temporary\".\n     *\n     * @param {string} value the session type\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setSessionType(value) {\n        sessionType = value;\n    }\n\n    /**\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\n     *\n     * @param {string} level the robustness level\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setRobustnessLevel(level) {\n        robustnessLevel = level;\n    }\n\n    /**\n     * Attach KeySystem-specific data to use for license acquisition with EME\n     *\n     * @param {Object} data an object containing property names corresponding to\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\n     * being instances of {@link ProtectionData}\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function setProtectionData(data) {\n        protDataSet = data;\n        protectionKeyController.setProtectionData(data);\n    }\n\n    /**\n     * Destroys all protection data associated with this protection set.  This includes\n     * deleting all key sessions.  In the case of persistent key sessions, the sessions\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\n     * associated with a HTMLMediaElement, it will be detached from that element.\n     *\n     * @memberof module:ProtectionController\n     * @instance\n     */\n    function reset() {\n\n        eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\n\n        setMediaElement(null);\n\n        keySystem = undefined;//TODO-Refactor look at why undefined is needed for this. refactor\n\n        if (protectionModel) {\n            protectionModel.reset();\n            protectionModel = null;\n        }\n\n        mediaInfoArr = [];\n    }\n\n    ///////////////\n    // Private\n    ///////////////\n\n    function getProtData(keySystem) {\n        let protData = null;\n        const keySystemString = keySystem.systemString;\n\n        if (protDataSet) {\n            protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\n        }\n        return protData;\n    }\n\n    function getKeySystemConfiguration(keySystem) {\n        const protData = getProtData(keySystem);\n        const audioCapabilities = [];\n        const videoCapabilities = [];\n        const audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\n        const videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\n\n        mediaInfoArr.forEach((media) => {\n            if (media.type === constants.AUDIO) {\n                audioCapabilities.push(new MediaCapability(media.codec, audioRobustness));\n            } else if (media.type === constants.VIDEO) {\n                videoCapabilities.push(new MediaCapability(media.codec, videoRobustness));\n            }\n        });\n\n        return new KeySystemConfiguration(\n            audioCapabilities, videoCapabilities, 'optional',\n            (sessionType === 'temporary') ? 'optional' : 'required',\n            [sessionType]);\n    }\n\n    function selectKeySystem(supportedKS, fromManifest) {\n        const self = this;\n        const requestedKeySystems = [];\n\n        let ksIdx;\n        if (keySystem) {\n            // We have a key system\n            for (ksIdx = 0; ksIdx < supportedKS.length; ksIdx++) {\n                if (keySystem === supportedKS[ksIdx].ks) {\n\n                    requestedKeySystems.push({ks: supportedKS[ksIdx].ks, configs: [getKeySystemConfiguration(keySystem)]});\n\n                    // Ensure that we would be granted key system access using the key\n                    // system and codec information\n                    const onKeySystemAccessComplete = function (event) {\n                        eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                        if (event.error) {\n                            if (!fromManifest) {\n                                eventBus.trigger(events.KEY_SYSTEM_SELECTED, {error: 'DRM: KeySystem Access Denied! -- ' + event.error});\n                            }\n                        } else {\n                            log('DRM: KeySystem Access Granted');\n                            eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: event.data});\n                            createKeySession(supportedKS[ksIdx].initData, supportedKS[ksIdx].cdmData);\n                        }\n                    };\n                    eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                    protectionModel.requestKeySystemAccess(requestedKeySystems);\n                    break;\n                }\n            }\n        }\n        else if (keySystem === undefined) {\n            // First time through, so we need to select a key system\n            keySystem = null;\n            pendingNeedKeyData.push(supportedKS);\n\n            // Add all key systems to our request list since we have yet to select a key system\n            for (let i = 0; i < supportedKS.length; i++) {\n                requestedKeySystems.push({ks: supportedKS[i].ks, configs: [getKeySystemConfiguration(supportedKS[i].ks)]});\n            }\n\n            let keySystemAccess;\n            const onKeySystemAccessComplete = function (event) {\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (event.error) {\n                    keySystem = undefined;\n                    eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                    if (!fromManifest) {\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: null, error: 'DRM: KeySystem Access Denied! -- ' + event.error});\n                    }\n                } else {\n                    keySystemAccess = event.data;\n                    log('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\n                    protectionModel.selectKeySystem(keySystemAccess);\n                }\n            };\n            var onKeySystemSelected = function (event) {\n                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n                if (!event.error) {\n                    keySystem = protectionModel.getKeySystem();\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: keySystemAccess});\n                    // Set server certificate from protData\n                    const protData = getProtData(keySystem);\n                    if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\n                        protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\n                    }\n                    for (let i = 0; i < pendingNeedKeyData.length; i++) {\n                        for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\n                            if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\n                                // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\n                                // initData and overwrite possible initData indicated in encrypted event (EME)\n                                if (protectionKeyController.isClearKey(keySystem) && protData && protData.hasOwnProperty('clearkeys')) {\n                                    const initData = { kids: Object.keys(protData.clearkeys) };\n                                    pendingNeedKeyData[i][ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\n                                }\n                                createKeySession(pendingNeedKeyData[i][ksIdx].initData, pendingNeedKeyData[i][ksIdx].cdmData);\n                                break;\n                            }\n                        }\n                    }\n                } else {\n                    keySystem = undefined;\n                    if (!fromManifest) {\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: null, error: 'DRM: Error selecting key system! -- ' + event.error});\n                    }\n                }\n            };\n            eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\n            eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\n            protectionModel.requestKeySystemAccess(requestedKeySystems);\n        } else {\n            // We are in the process of selecting a key system, so just save the data\n            pendingNeedKeyData.push(supportedKS);\n        }\n    }\n\n    function sendLicenseRequestCompleteEvent(data, error) {\n        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, {data: data, error: error});\n    }\n\n    function onKeyMessage(e) {\n        log('DRM: onKeyMessage');\n        if (e.error) {\n            log(e.error);\n            return;\n        }\n\n        // Dispatch event to applications indicating we received a key message\n        const keyMessage = e.data;\n        eventBus.trigger(events.KEY_MESSAGE, {data: keyMessage});\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\n        const message = keyMessage.message;\n        const sessionToken = keyMessage.sessionToken;\n        const protData = getProtData(keySystem);\n        const keySystemString = keySystem.systemString;\n        const licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\n        const eventData = { sessionToken: sessionToken, messageType: messageType };\n\n        // Message not destined for license server\n        if (!licenseServerData) {\n            log('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\n            sendLicenseRequestCompleteEvent(eventData);\n            return;\n        }\n\n        // Perform any special handling for ClearKey\n        if (protectionKeyController.isClearKey(keySystem)) {\n            const clearkeys = protectionKeyController.processClearKeyLicenseRequest(keySystem, protData, message);\n            if (clearkeys)  {\n                log('DRM: ClearKey license request handled by application!');\n                sendLicenseRequestCompleteEvent(eventData);\n                protectionModel.updateKeySession(sessionToken, clearkeys);\n                return;\n            }\n        }\n\n        // All remaining key system scenarios require a request to a remote license server\n        const xhr = new XMLHttpRequest();\n\n        // Determine license server URL\n        let url = null;\n        if (protData && protData.serverURL) {\n            const serverURL = protData.serverURL;\n            if (typeof serverURL === 'string' && serverURL !== '') {\n                url = serverURL;\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\n                url = serverURL[messageType];\n            }\n        } else if (protData && protData.laURL && protData.laURL !== '') {\n            // TODO: Deprecated!\n            url = protData.laURL;\n        } else {\n            url = keySystem.getLicenseServerURLFromInitData(CommonEncryption.getPSSHData(sessionToken.initData));\n            if (!url) {\n                url = e.data.laURL;\n            }\n        }\n        // Possibly update or override the URL based on the message\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\n\n        // Ensure valid license server URL\n        if (!url) {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: No license server URL specified!');\n            return;\n        }\n\n        const reportError = function (xhr, eventData, keySystemString, messageType) {\n            const errorMsg = ((xhr.response) ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE');\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR complete. status is \"' + xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg);\n        };\n\n        xhr.open(licenseServerData.getHTTPMethod(messageType), url, true);\n        xhr.responseType = licenseServerData.getResponseType(keySystemString, messageType);\n        xhr.onload = function () {\n            if (this.status == 200) {\n                const licenseMessage = licenseServerData.getLicenseMessage(this.response, keySystemString, messageType);\n                if (licenseMessage !== null) {\n                    sendLicenseRequestCompleteEvent(eventData);\n                    protectionModel.updateKeySession(sessionToken, licenseMessage);\n                } else {\n                    reportError(this, eventData, keySystemString, messageType);\n                }\n            } else {\n                reportError(this, eventData, keySystemString, messageType);\n            }\n        };\n        xhr.onabort = function () {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR aborted. status is \"' + this.statusText + '\" (' + this.status + '), readyState is ' + this.readyState);\n        };\n        xhr.onerror = function () {\n            sendLicenseRequestCompleteEvent(eventData, 'DRM: ' + keySystemString + ' update, XHR error. status is \"' + this.statusText + '\" (' + this.status + '), readyState is ' + this.readyState);\n        };\n\n        // Set optional XMLHttpRequest headers from protection data and message\n        const updateHeaders = function (headers) {\n            if (headers) {\n                for (const key in headers) {\n                    if ('authorization' === key.toLowerCase()) {\n                        xhr.withCredentials = true;\n                    }\n                    xhr.setRequestHeader(key, headers[key]);\n                }\n            }\n        };\n        if (protData) {\n            updateHeaders(protData.httpRequestHeaders);\n        }\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\n\n        // Overwrite withCredentials property from protData if present\n        if (protData && typeof protData.withCredentials == 'boolean') {\n            xhr.withCredentials = protData.withCredentials;\n        }\n\n        xhr.send(keySystem.getLicenseRequestFromMessage(message));\n    }\n\n    function onNeedKey(event) {\n        log('DRM: onNeedKey');\n        // Ignore non-cenc initData\n        if (event.key.initDataType !== 'cenc') {\n            log('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\n            return;\n        }\n\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\n        // Convert to ArrayBuffer\n        let abInitData = event.key.initData;\n        if (ArrayBuffer.isView(abInitData)) {\n            abInitData = abInitData.buffer;\n        }\n\n        // If key system has already been selected and initData already seen, then do nothing\n        if (keySystem) {\n            const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, abInitData);\n            if (initDataForKS) {\n\n                // Check for duplicate initData\n                const currentInitData = protectionModel.getAllInitData();\n                for (let i = 0; i < currentInitData.length; i++) {\n                    if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\n                        log('DRM: Ignoring initData because we have already seen it!');\n                        return;\n                    }\n                }\n            }\n        }\n\n        log('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\n\n        const supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\n        if (supportedKS.length === 0) {\n            log('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\n            return;\n        }\n\n        selectKeySystem(supportedKS, false);\n    }\n\n    function getKeySystems() {\n        return protectionKeyController ? protectionKeyController.getKeySystems() : [];\n    }\n\n    instance = {\n        initializeForMedia: initializeForMedia,\n        createKeySession: createKeySession,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        setMediaElement: setMediaElement,\n        setSessionType: setSessionType,\n        setRobustnessLevel: setRobustnessLevel,\n        setProtectionData: setProtectionData,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getKeySystems: getKeySystems,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nProtectionController.__dashjs_factory_name = 'ProtectionController';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */\n"]}