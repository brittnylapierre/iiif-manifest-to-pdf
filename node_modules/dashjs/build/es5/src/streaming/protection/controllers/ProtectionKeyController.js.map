{"version":3,"sources":["../../../../../../src/streaming/protection/controllers/ProtectionKeyController.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;8LA8B6B,uBAAuB,qGACtB,4BAA4B,gHACzB,+BAA+B,mHAClC,4BAA4B,8GAC3B,6BAA6B,0GACvC,uBAAuB,+FACtB,wBAAwB,gGACzB,uBAAuB,8FACvB,uBAAuB,2GACZ,qCAAqC;;;GAMrE,SAAS,uBAAuB,EAAG,CAE/B,IAAI,OAAO,CAAG,IAAI,CAAC,OAAO,CAAC,AAE3B,IAAI,QAAQ,UAAA,CACR,GAAG,UAAA,CACH,UAAU,UAAA,CACV,MAAM,UAAA,CACN,iBAAiB,UAAA,CACjB,oBAAoB,UAAA,CAAC,AAEzB,SAAS,SAAS,CAAC,MAAM,CAAE,CACvB,GAAI,CAAC,MAAM,CAAE,OAAO,AAEpB,GAAI,MAAM,CAAC,GAAG,CAAE,CACZ,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CACpB,AAED,GAAI,MAAM,CAAC,MAAM,CAAE,CACf,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAC1B,CACJ,AAED,SAAS,UAAU,EAAG,CAClB,UAAU,GAAG,EAAE,CAAC,AAEhB,IAAI,SAAS,UAAA,CAAC;AAGd,SAAS,GAAG,uCAAmB,OAAO,CAAC,CAAC,WAAW,CAAC,CAAE,MAAM,CAAE,MAAM,CAAE,CAAC,CAAC,AACxE,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAG3B,SAAS,GAAG,sCAAkB,OAAO,CAAC,CAAC,WAAW,CAAC,CAAE,MAAM,CAAE,MAAM,CAAE,CAAC,CAAC,AACvE,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAG3B,SAAS,GAAG,sCAAkB,OAAO,CAAC,CAAC,WAAW,CAAC,CAAE,MAAM,CAAE,MAAM,CAAE,CAAC,CAAC,AACvE,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,AAC3B,iBAAiB,GAAG,SAAS,CAAC;AAG9B,SAAS,GAAG,yCAAqB,OAAO,CAAC,CAAC,WAAW,CAAC,CAAE,MAAM,CAAE,MAAM,CAAE,GAAG,CAAE,GAAG,CAAE,CAAC,CAAC,AACpF,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,AAC3B,oBAAoB,GAAG,SAAS,CAAC,CACpC;;;;;;;;;OAYD,SAAS,aAAa,EAAG,CACrB,OAAO,UAAU,CAAC,CACrB;;;;;;;;;;OAaD,SAAS,0BAA0B,CAAC,YAAY,CAAE,CAC9C,IAAK,IAAI,CAAC,CAAG,CAAC,CAAE,CAAC,GAAG,UAAU,CAAC,MAAM,CAAE,CAAC,EAAE,EAAE,CACxC,GAAI,UAAU,CAAC,CAAC,CAAC,CAAC,YAAY,KAAK,YAAY,CAAE,CAC7C,OAAO,UAAU,CAAC,CAAC,CAAC,CAAC,CACxB,CACJ,AACD,OAAO,IAAI,CAAC,CACf;;;;;;;;;;;;;OAgBD,SAAS,UAAU,CAAC,SAAS,CAAE,CAC3B,OAAQ,SAAS,KAAK,iBAAiB,IAAI,SAAS,KAAK,oBAAoB,CAAE,CAClF;;;;;;;;;OAYD,SAAS,cAAc,CAAC,SAAS,CAAE,SAAS,CAAE,CAC1C,GAAI,SAAS,CAAC,UAAU,KAAK,SAAS,CAAC,UAAU,CAAE,CAC/C,IAAI,KAAK,CAAG,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC,AACtC,IAAI,KAAK,CAAG,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC,AAEtC,IAAK,IAAI,CAAC,CAAG,CAAC,CAAE,CAAC,GAAG,KAAK,CAAC,MAAM,CAAE,CAAC,EAAE,EAAE,CACnC,GAAI,KAAK,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAE,CACvB,OAAO,KAAK,CAAC,CAChB,CACJ,AACD,OAAO,IAAI,CAAC,CACf,AACD,OAAO,KAAK,CAAC,CAChB;;;;;;;;;;;;;OAgBD,SAAS,2CAA2C,CAAC,GAAG,CAAE,CACtD,IAAI,EAAE,UAAA,CAAE,EAAE,UAAA,CAAE,KAAK,UAAA,CAAE,KAAK,UAAA,CAAC,AACzB,IAAI,WAAW,CAAG,EAAE,CAAC,AAErB,GAAI,GAAG,CAAE,CACL,IAAK,KAAK,GAAG,CAAC,CAAE,KAAK,GAAG,UAAU,CAAC,MAAM,CAAE,EAAE,KAAK,EAAE,CAChD,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,AACvB,IAAK,KAAK,GAAG,CAAC,CAAE,KAAK,GAAG,GAAG,CAAC,MAAM,CAAE,EAAE,KAAK,EAAE,CACzC,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,AAChB,GAAI,EAAE,CAAC,WAAW,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC,WAAW,CAAE;AAEjD,IAAI,QAAQ,CAAG,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,AAClC,GAAI,CAAC,CAAC,QAAQ,CAAE,CACZ,WAAW,CAAC,IAAI,CAAC,CACb,EAAE,CAAE,UAAU,CAAC,KAAK,CAAC,CACrB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,EAAE,CAAC,UAAU,EAAE,CAC3B,CAAC,CAAC,CACN,KAAM,GAAI,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAE,CAC5B,WAAW,CAAC,IAAI,CAAC,CACb,EAAE,CAAE,EAAE,CACN,QAAQ,CAAE,IAAI,CACjB,CAAC,CAAC,CACN,CACJ,CACJ,CACJ,CACJ,AACD,OAAO,WAAW,CAAC,CACtB;;;;;;;;;;;;;;;OAkBD,SAAS,sBAAsB,CAAC,QAAQ,CAAE,WAAW,CAAE,CACnD,IAAI,WAAW,CAAG,EAAE,CAAC,AACrB,IAAI,IAAI,CAAG,8BAAiB,aAAa,CAAC,QAAQ,CAAC,CAAC,AAEpD,IAAK,IAAI,KAAK,CAAG,CAAC,CAAE,KAAK,GAAG,UAAU,CAAC,MAAM,CAAE,EAAE,KAAK,EAAE,CACpD,IAAI,eAAe,CAAG,UAAU,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,AACrD,IAAI,2BAA2B,CAAG,AAAC,WAAW,CAAI,eAAe,IAAI,WAAW,CAAG,IAAI,CAAC,AAExF,GAAI,UAAU,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,IAAI,IAAI,2BAA2B,CAAE,CAC/D,WAAW,CAAC,IAAI,CAAC,CACb,EAAE,CAAE,UAAU,CAAC,KAAK,CAAC,CACrB,QAAQ,CAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CACzC,CAAC,CAAC,CACN,CACJ,AACD,OAAO,WAAW,CAAC,CACtB;;;;;;;;;;;;;;;;OAmBD,SAAS,gBAAgB,CAAC,SAAS,CAAE,QAAQ,CAAE,WAAW,CAAE;;AAIxD,GAAI,WAAW,KAAK,iBAAiB,IAAI,WAAW,KAAK,2BAA2B,CAAE,CAClF,OAAO,IAAI,CAAC,CACf,AAED,IAAI,iBAAiB,CAAG,IAAI,CAAC,AAC7B,GAAI,QAAQ,IAAI,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,CAAE,CACjD,iBAAiB,GAAG,iCAAS,OAAO,CAAC,CAAC,WAAW,CAAC,CAAE,MAAM,CAAE,MAAM,CAAE,CAAC,CAAC,CACzE,KAAM,GAAI,SAAS,CAAC,YAAY,KAAK,0CAAoB,uBAAuB,CAAE,CAC/E,iBAAiB,GAAG,iCAAS,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC,CACvD,KAAM,GAAI,SAAS,CAAC,YAAY,KAAK,0CAAoB,wBAAwB,CAAE,CAChF,iBAAiB,GAAG,kCAAU,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC,CACxD,KAAM,GAAI,SAAS,CAAC,YAAY,KAAK,0CAAoB,uBAAuB,CAAE,CAC/E,iBAAiB,GAAG,iCAAS,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC,CACvD,AAED,OAAO,iBAAiB,CAAC,CAC5B;;;;;;;;;;;OAcD,SAAS,6BAA6B,CAAC,iBAAiB,CAAE,QAAQ,CAAE,OAAO,CAAE,CACzE,GAAI,CACA,OAAO,iBAAiB,CAAC,8BAA8B,CAAC,QAAQ,CAAE,OAAO,CAAC,CAAC,CAC9E,AAAC,MAAO,KAAK,EAAE,CACZ,GAAG,CAAC,kDAAkD,CAAC,CAAC,AACxD,OAAO,IAAI,CAAC,CACf,CACJ,AAED,SAAS,iBAAiB,CAAC,iBAAiB,CAAE,CAC1C,IAAI,iBAAiB,CAAG,SAApB,iBAAiB,CAAa,eAAe,CAAE,CAC/C,IAAI,QAAQ,CAAG,IAAI,CAAC,AACpB,GAAI,iBAAiB,CAAE,CACnB,QAAQ,GAAG,AAAC,eAAe,IAAI,iBAAiB,CAAI,iBAAiB,CAAC,eAAe,CAAC,CAAG,IAAI,CAAC,CACjG,AACD,OAAO,QAAQ,CAAC,CACnB,CAAC,AAEF,IAAK,IAAI,CAAC,CAAG,CAAC,CAAE,CAAC,GAAG,UAAU,CAAC,MAAM,CAAE,CAAC,EAAE,EAAE,CACxC,IAAI,SAAS,CAAG,UAAU,CAAC,CAAC,CAAC,CAAC,AAC9B,GAAI,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,CAAE,CAClC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,CAC7D,CACJ,CACJ,AAED,QAAQ,GAAG,CACP,UAAU,CAAE,UAAU,CACtB,iBAAiB,CAAE,iBAAiB,CACpC,UAAU,CAAE,UAAU,CACtB,cAAc,CAAE,cAAc,CAC9B,aAAa,CAAE,aAAa,CAC5B,0BAA0B,CAAE,0BAA0B,CACtD,2CAA2C,CAAE,2CAA2C,CACxF,sBAAsB,CAAE,sBAAsB,CAC9C,gBAAgB,CAAE,gBAAgB,CAClC,6BAA6B,CAAE,6BAA6B,CAC5D,SAAS,CAAE,SAAS,CACvB,CAAC,AAEF,OAAO,QAAQ,CAAC,CACnB,AAED,uBAAuB,CAAC,qBAAqB,GAAG,yBAAyB,CAAC,qBAC3D,MAAM,CAAC,YAAY,CAAC,mBAAmB,CAAC,uBAAuB,CAAC","file":"ProtectionKeyController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport CommonEncryption from './../CommonEncryption';\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\nimport KeySystemW3CClearKey from './../drm/KeySystemW3CClearKey';\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\nimport KeySystemPlayReady from './../drm/KeySystemPlayReady';\nimport DRMToday from './../servers/DRMToday';\nimport PlayReady from './../servers/PlayReady';\nimport Widevine from './../servers/Widevine';\nimport ClearKey from './../servers/ClearKey';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\n/**\n * @module ProtectionKeyController\n * @description Media protection key system functionality that can be modified/overridden by applications\n */\nfunction ProtectionKeyController() {\n\n    let context = this.context;\n\n    let instance,\n        log,\n        keySystems,\n        BASE64,\n        clearkeyKeySystem,\n        clearkeyW3CKeySystem;\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.log) {\n            log = config.log;\n        }\n\n        if (config.BASE64) {\n            BASE64 = config.BASE64;\n        }\n    }\n\n    function initialize() {\n        keySystems = [];\n\n        let keySystem;\n\n        // PlayReady\n        keySystem = KeySystemPlayReady(context).getInstance({ BASE64: BASE64 });\n        keySystems.push(keySystem);\n\n        // Widevine\n        keySystem = KeySystemWidevine(context).getInstance({ BASE64: BASE64 });\n        keySystems.push(keySystem);\n\n        // ClearKey\n        keySystem = KeySystemClearKey(context).getInstance({ BASE64: BASE64 });\n        keySystems.push(keySystem);\n        clearkeyKeySystem = keySystem;\n\n        // W3C ClearKey\n        keySystem = KeySystemW3CClearKey(context).getInstance({ BASE64: BASE64, log: log });\n        keySystems.push(keySystem);\n        clearkeyW3CKeySystem = keySystem;\n    }\n\n    /**\n     * Returns a prioritized list of key systems supported\n     * by this player (not necessarily those supported by the\n     * user agent)\n     *\n     * @returns {Array.<KeySystem>} a prioritized\n     * list of key systems\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystems() {\n        return keySystems;\n    }\n\n    /**\n     * Returns the key system associated with the given key system string\n     * name (i.e. 'org.w3.clearkey')\n     *\n     * @param {string} systemString the system string\n     * @returns {KeySystem|null} the key system\n     * or null if no supported key system is associated with the given key\n     * system string\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getKeySystemBySystemString(systemString) {\n        for (let i = 0; i < keySystems.length; i++) {\n            if (keySystems[i].systemString === systemString) {\n                return keySystems[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Determines whether the given key system is ClearKey.  This is\n     * necessary because the EME spec defines ClearKey and its method\n     * for providing keys to the key session; and this method has changed\n     * between the various API versions.  Our EME-specific ProtectionModels\n     * must know if the system is ClearKey so that it can format the keys\n     * according to the particular spec version.\n     *\n     * @param {Object} keySystem the key\n     * @returns {boolean} true if this is the ClearKey key system, false\n     * otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function isClearKey(keySystem) {\n        return (keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem);\n    }\n\n    /**\n     * Check equality of initData array buffers.\n     *\n     * @param {ArrayBuffer} initData1 - first initData\n     * @param {ArrayBuffer} initData2 - second initData\n     * @returns {boolean} true if the initData arrays are equal in size and\n     * contents, false otherwise\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function initDataEquals(initData1, initData2) {\n        if (initData1.byteLength === initData2.byteLength) {\n            let data1 = new Uint8Array(initData1);\n            let data2 = new Uint8Array(initData2);\n\n            for (let j = 0; j < data1.length; j++) {\n                if (data1[j] !== data2[j]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns a set of supported key systems and CENC initialization data\n     * from the given array of ContentProtection elements.  Only\n     * key systems that are supported by this player will be returned.\n     * Key systems are returned in priority order (highest first).\n     *\n     * @param {Array.<Object>} cps - array of content protection elements parsed\n     * from the manifest\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystemsFromContentProtection(cps) {\n        let cp, ks, ksIdx, cpIdx;\n        let supportedKS = [];\n\n        if (cps) {\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n                ks = keySystems[ksIdx];\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\n                    cp = cps[cpIdx];\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\n                        // Look for DRM-specific ContentProtection\n                        let initData = ks.getInitData(cp);\n                        if (!!initData) {\n                            supportedKS.push({\n                                ks: keySystems[ksIdx],\n                                initData: initData,\n                                cdmData: ks.getCDMData()\n                            });\n                        } else if (this.isClearKey(ks)) {\n                            supportedKS.push({\n                                ks: ks,\n                                initData: null\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns key systems supported by this player for the given PSSH\n     * initializationData. Only key systems supported by this player\n     * that have protection data present will be returned.  Key systems are returned in priority order\n     * (highest priority first)\n     *\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\n     * supported by the content\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\n     * supported by the content\n     * @returns {Array.<Object>} array of objects indicating which supported key\n     * systems were found.  Empty array is returned if no\n     * supported key systems were found\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function getSupportedKeySystems(initData, protDataSet) {\n        let supportedKS = [];\n        let pssh = CommonEncryption.parsePSSHList(initData);\n\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\n            let keySystemString = keySystems[ksIdx].systemString;\n            let shouldNotFilterOutKeySystem = (protDataSet) ? keySystemString in protDataSet : true;\n\n            if (keySystems[ksIdx].uuid in pssh && shouldNotFilterOutKeySystem) {\n                supportedKS.push({\n                    ks: keySystems[ksIdx],\n                    initData: pssh[keySystems[ksIdx].uuid]\n                });\n            }\n        }\n        return supportedKS;\n    }\n\n    /**\n     * Returns the license server implementation data that should be used for this request.\n     *\n     * @param {KeySystem} keySystem the key system\n     * associated with this license request\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\n     * request.  Supported message types can be found\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\n     * @returns {LicenseServer|null} the license server\n     * implementation that should be used for this request or null if the player should not\n     * pass messages of the given type to a license server\n     * @memberof module:ProtectionKeyController\n     * @instance\n     *\n     */\n    function getLicenseServer(keySystem, protData, messageType) {\n\n        // Our default server implementations do not do anything with \"license-release\" or\n        // \"individualization-request\" messages, so we just send a success event\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\n            return null;\n        }\n\n        let licenseServerData = null;\n        if (protData && protData.hasOwnProperty('drmtoday')) {\n            licenseServerData = DRMToday(context).getInstance({ BASE64: BASE64 });\n        } else if (keySystem.systemString === ProtectionConstants.WIDEVINE_KEYSTEM_STRING) {\n            licenseServerData = Widevine(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING) {\n            licenseServerData = PlayReady(context).getInstance();\n        } else if (keySystem.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING) {\n            licenseServerData = ClearKey(context).getInstance();\n        }\n\n        return licenseServerData;\n    }\n\n    /**\n     * Allows application-specific retrieval of ClearKey keys.\n     *\n     * @param {KeySystem} clearkeyKeySystem They exact ClearKey System to be used\n     * @param {ProtectionData} protData protection data to use for the\n     * request\n     * @param {ArrayBuffer} message the key message from the CDM\n     * @return {ClearKeyKeySet|null} the clear keys associated with\n     * the request or null if no keys can be returned by this function\n     * @memberof module:ProtectionKeyController\n     * @instance\n     */\n    function processClearKeyLicenseRequest(clearkeyKeySystem, protData, message) {\n        try {\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\n        } catch (error) {\n            log('Failed to retrieve clearkeys from ProtectionData');\n            return null;\n        }\n    }\n\n    function setProtectionData(protectionDataSet) {\n        var getProtectionData = function (keySystemString) {\n            var protData = null;\n            if (protectionDataSet) {\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\n            }\n            return protData;\n        };\n\n        for (var i = 0; i < keySystems.length; i++) {\n            var keySystem = keySystems[i];\n            if (keySystem.hasOwnProperty('init')) {\n                keySystem.init(getProtectionData(keySystem.systemString));\n            }\n        }\n    }\n\n    instance = {\n        initialize: initialize,\n        setProtectionData: setProtectionData,\n        isClearKey: isClearKey,\n        initDataEquals: initDataEquals,\n        getKeySystems: getKeySystems,\n        getKeySystemBySystemString: getKeySystemBySystemString,\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\n        getSupportedKeySystems: getSupportedKeySystems,\n        getLicenseServer: getLicenseServer,\n        processClearKeyLicenseRequest: processClearKeyLicenseRequest,\n        setConfig: setConfig\n    };\n\n    return instance;\n}\n\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\nexport default dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */\n"]}