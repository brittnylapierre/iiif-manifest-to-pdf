{"version":3,"sources":["../../../../../../src/streaming/protection/drm/KeySystemPlayReady.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8LAqC6B,qBAAqB,6GAClB,qCAAqC,2FAErE,IAAM,IAAI,CAAG,sCAAsC,CAAC,AACpD,IAAM,YAAY,CAAG,0CAAoB,wBAAwB,CAAC,AAClE,IAAM,WAAW,CAAG,WAAW,GAAG,IAAI,CAAC,AACvC,IAAM,SAAS,CAAG,wMAAwM,CAAC,AAC3N,IAAI,QAAQ,UAAA,CAAC,AAEb,SAAS,kBAAkB,CAAC,MAAM,CAAE,CAEhC,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC,AACtB,IAAI,QAAQ,UAAA,CAAC,AACb,IAAI,aAAa,CAAG,OAAO,CAAC,AAC5B,IAAM,MAAM,CAAG,MAAM,CAAC,MAAM,CAAC,AAE7B,SAAS,WAAW,EAAG,CACnB,GAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,CAAG,CAC5F,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAClD,CACJ,AAED,SAAS,4BAA4B,CAAC,OAAO,CAAE,CAC3C,IAAI,GAAG,UAAA,CACH,MAAM,UAAA,CAAC,AACX,IAAM,OAAO,CAAG,EAAE,CAAC,AACnB,IAAM,MAAM,CAAG,IAAI,SAAS,EAAE,CAAC,AAC/B,IAAM,QAAQ,CAAG,AAAC,aAAa,KAAK,OAAO,CAAI,IAAI,WAAW,CAAC,OAAO,CAAC,CAAG,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,AAElG,GAAG,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAE,QAAQ,CAAC,CAAC,AAChD,MAAM,GAAG,MAAM,CAAC,eAAe,CAAC,GAAG,CAAE,iBAAiB,CAAC,CAAC,AAExD,IAAM,cAAc,CAAG,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,AAC3D,IAAM,eAAe,CAAG,MAAM,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,AAC7D,IAAK,IAAI,CAAC,CAAG,CAAC,CAAE,CAAC,GAAG,cAAc,CAAC,MAAM,CAAE,CAAC,EAAE,EAAE,CAC5C,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CACnG;;;AAID,GAAI,OAAO,CAAC,cAAc,CAAC,SAAS,CAAC,CAAE,CACnC,OAAO,CAAC,cAAc,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,AAC1C,OAAO,OAAO,CAAC,OAAO,CAAC,CAC1B,AACD,OAAO,OAAO,CAAC,CAClB,AAED,SAAS,4BAA4B,CAAC,OAAO,CAAE,CAC3C,IAAI,GAAG,UAAA,CACH,MAAM,UAAA,CAAC,AACX,IAAI,cAAc,CAAG,IAAI,CAAC,AAC1B,IAAM,MAAM,CAAG,IAAI,SAAS,EAAE,CAAC,AAC/B,IAAM,QAAQ,CAAG,AAAC,aAAa,KAAK,OAAO,CAAI,IAAI,WAAW,CAAC,OAAO,CAAC,CAAG,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,AAElG,WAAW,EAAE,CAAC,AACd,GAAG,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAE,QAAQ,CAAC,CAAC,AAChD,MAAM,GAAG,MAAM,CAAC,eAAe,CAAC,GAAG,CAAE,iBAAiB,CAAC,CAAC,AAExD,GAAI,MAAM,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAE,CAC7C,IAAM,SAAS,CAAG,MAAM,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,AACtF,GAAI,SAAS,CAAE,CACX,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAC7C,CACJ,AACD,OAAO,cAAc,CAAC,CACzB,AAED,SAAS,+BAA+B,CAAC,QAAQ,CAAE,CAC/C,GAAI,QAAQ,CAAE,CACV,IAAM,IAAI,CAAG,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC,AACpC,IAAM,UAAU,CAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAE,IAAI,CAAC,CAAC,AAC3C,IAAI,MAAM,CAAG,CAAC,CAAC,AACf,IAAM,MAAM,CAAG,IAAI,SAAS,EAAE,CAAC,AAE/B,IAAK,IAAI,CAAC,CAAG,CAAC,CAAE,CAAC,GAAG,UAAU,CAAE,CAAC,EAAE,EAAE;AAEjC,IAAM,UAAU,CAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAE,IAAI,CAAC,CAAC,AAChD,MAAM,IAAI,CAAC,CAAC,AACZ,IAAM,YAAY,CAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAE,IAAI,CAAC,CAAC,AAClD,MAAM,IAAI,CAAC,CAAC,AACZ,GAAI,UAAU,KAAK,MAAM,CAAE,CACvB,MAAM,IAAI,YAAY,CAAC,AACvB,SAAS,CACZ,AAED,IAAM,UAAU,CAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAE,MAAM,GAAG,YAAY,CAAC,CAAC,AACjE,IAAM,MAAM,CAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAE,IAAI,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,AAC5E,IAAM,MAAM,CAAG,MAAM,CAAC,eAAe,CAAC,MAAM,CAAE,iBAAiB,CAAC,CAAC;AAGjE,GAAI,MAAM,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAE,CAC1C,IAAM,KAAK,CAAG,MAAM,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,AAC/E,GAAI,KAAK,CAAE,CACP,OAAO,KAAK,CAAC,CAChB,CACJ;AAGD,GAAI,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAE,CAC3C,IAAM,MAAM,CAAG,MAAM,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,AACjF,GAAI,MAAM,CAAE,CACR,OAAO,MAAM,CAAC,CACjB,CACJ,CACJ,CACJ,AAED,OAAO,IAAI,CAAC,CACf,AAED,SAAS,WAAW,CAAC,MAAM,CAAE;;;;;;;;AASzB,IAAM,WAAW,CAAG,IAAI,UAAU,CAAC,CAAC,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAC,CAAC,CAAC;AACrF,IAAM,iBAAiB,CAAG,IAAI,UAAU,CAAC,CAAC,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAE,IAAI,CAAC,CAAC,CAAC,AAE3I,IAAI,UAAU,CAAG,CAAC,CAAC,AACnB,IAAI,0BAA0B,CAAG,IAAI,CAAC,AAEtC,IAAI,OAAO,UAAA,CACP,QAAQ,UAAA,CACR,aAAa,UAAA,CACb,OAAO,UAAA,CACP,QAAQ,UAAA,CAAC,AAEb,WAAW,EAAE,CAAC;AAEd,GAAI,MAAM,IAAI,MAAM,CAAE,CAClB,OAAO,8BAAiB,kCAAkC,CAAC,MAAM,CAAE,MAAM,CAAC,CAAC,CAC9E;AAED,GAAI,KAAK,IAAI,MAAM,CAAE,CACjB,0BAA0B,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CACtE,KACI,GAAI,UAAU,IAAI,MAAM,CAAE,CAC3B,0BAA0B,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAC3E,KACI,CACD,OAAO,IAAI,CAAC,CACf,AAED,OAAO,GAAG,0BAA0B,CAAC,MAAM,CAAC,AAC5C,QAAQ,GAAG,GAAG,GAAG,WAAW,CAAC,MAAM,GAAG,iBAAiB,CAAC,MAAM,GAAG,GAAG,GAAG,OAAO,CAAC,AAE/E,aAAa,GAAG,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC,AAE1C,OAAO,GAAG,IAAI,UAAU,CAAC,aAAa,CAAC,CAAC,AACxC,QAAQ,GAAG,IAAI,QAAQ,CAAC,aAAa,CAAC,CAAC,AAEvC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAE,QAAQ,CAAC,CAAC,AACzC,UAAU,IAAI,GAAG,CAAC,AAElB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAE,UAAU,CAAC,CAAC,AACrC,UAAU,IAAI,WAAW,CAAC,MAAM,CAAC,AAEjC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAE,UAAU,CAAC,CAAC,AAC3C,UAAU,IAAI,iBAAiB,CAAC,MAAM,CAAC,AAEvC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAE,OAAO,CAAC,CAAC,AACxC,UAAU,IAAI,GAAG,CAAC,AAElB,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAE,UAAU,CAAC,CAAC,AACpD,UAAU,IAAI,OAAO,CAAC,AAEtB,OAAO,OAAO,CAAC,MAAM,CAAC,CACzB;;;;;;;OAUD,SAAS,yBAAyB,CAAC,MAAM,CAAE,CACvC,GAAI,MAAM,KAAK,MAAM,IAAI,MAAM,KAAK,OAAO,CAAE,CACzC,MAAM,IAAI,KAAK,CAAC,uCAAuC,GAAG,MAAM,CAAC,CAAC,CACrE,AACD,aAAa,GAAG,MAAM,CAAC,CAC1B;;;OAMD,SAAS,IAAI,CAAC,cAAc,CAAE,CAC1B,GAAI,cAAc,CAAE,CAChB,QAAQ,GAAG,cAAc,CAAC,CAC7B,CACJ;;OAMD,SAAS,UAAU,EAAG,CAClB,IAAI,UAAU,UAAA,CACV,OAAO,UAAA,CACP,YAAY,UAAA,CACZ,CAAC,UAAA,CAAC,AAEN,WAAW,EAAE,CAAC,AACd,GAAI,QAAQ,IAAI,QAAQ,CAAC,OAAO,CAAE;AAE9B,UAAU,GAAG,EAAE,CAAC,AAChB,IAAK,CAAC,GAAG,CAAC,CAAE,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAE,EAAE,CAAC,EAAE,CAC1C,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,AAChD,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CACtB,AACD,UAAU,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAE,UAAU,CAAC,CAAC;AAGzD,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;;AAIvC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,cAAc,CAAE,UAAU,CAAC,CAAC;AAGxD,YAAY,GAAG,EAAE,CAAC,AAClB,IAAK,CAAC,GAAG,CAAC,CAAE,CAAC,GAAG,OAAO,CAAC,MAAM,CAAE,EAAE,CAAC,EAAE,CACjC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,AACzC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CACxB,AAED,OAAO,IAAI,UAAU,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,CAC9C,AAED,OAAO,IAAI,CAAC,CACf,AAED,QAAQ,GAAG,CACP,IAAI,CAAE,IAAI,CACV,WAAW,CAAE,WAAW,CACxB,YAAY,CAAE,YAAY,CAC1B,WAAW,CAAE,WAAW,CACxB,4BAA4B,CAAE,4BAA4B,CAC1D,4BAA4B,CAAE,4BAA4B,CAC1D,+BAA+B,CAAE,+BAA+B,CAChE,UAAU,CAAE,UAAU,CACtB,yBAAyB,CAAE,yBAAyB,CACpD,IAAI,CAAE,IAAI,CACb,CAAC,AAEF,OAAO,QAAQ,CAAC,CACnB,AAED,kBAAkB,CAAC,qBAAqB,GAAG,oBAAoB,CAAC,qBACjD,MAAM,CAAC,YAAY,CAAC,mBAAmB,CAAC,kBAAkB,CAAC","file":"KeySystemPlayReady.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady DRM\n *\n * @class\n * @implements KeySystem\n */\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\nconst systemString = ProtectionConstants.PLAYREADY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\nconst PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\nlet protData;\n\nfunction KeySystemPlayReady(config) {\n\n    config = config || {};\n    let instance;\n    let messageFormat = 'utf16';\n    const BASE64 = config.BASE64;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray') ) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getRequestHeadersFromMessage(message) {\n        let msg,\n            xmlDoc;\n        const headers = {};\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        const headerNameList = xmlDoc.getElementsByTagName('name');\n        const headerValueList = xmlDoc.getElementsByTagName('value');\n        for (let i = 0; i < headerNameList.length; i++) {\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\n        }\n        // some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n        // this is NOT w3c conform and license servers may reject the request!\n        // -> rename it to proper w3c definition!\n        if (headers.hasOwnProperty('Content')) {\n            headers['Content-Type'] = headers.Content;\n            delete headers.Content;\n        }\n        return headers;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        let msg,\n            xmlDoc;\n        let licenseRequest = null;\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        checkConfig();\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        if (xmlDoc.getElementsByTagName('Challenge')[0]) {\n            const Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\n            if (Challenge) {\n                licenseRequest = BASE64.decode(Challenge);\n            }\n        }\n        return licenseRequest;\n    }\n\n    function getLicenseServerURLFromInitData(initData) {\n        if (initData) {\n            const data = new DataView(initData);\n            const numRecords = data.getUint16(4, true);\n            let offset = 6;\n            const parser = new DOMParser();\n\n            for (let i = 0; i < numRecords; i++) {\n                // Parse the PlayReady Record header\n                const recordType = data.getUint16(offset, true);\n                offset += 2;\n                const recordLength = data.getUint16(offset, true);\n                offset += 2;\n                if (recordType !== 0x0001) {\n                    offset += recordLength;\n                    continue;\n                }\n\n                const recordData = initData.slice(offset, offset + recordLength);\n                const record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n                const xmlDoc = parser.parseFromString(record, 'application/xml');\n\n                // First try <LA_URL>\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\n                    const laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\n                    if (laurl) {\n                        return laurl;\n                    }\n                }\n\n                // Optionally, try <LUI_URL>\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\n                    const luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\n                    if (luiurl) {\n                        return luiurl;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function getInitData(cpData) {\n        // * desc@ getInitData\n        // *   generate PSSH data from PROHeader defined in MPD file\n        // *   PSSH format:\n        // *   size (4)\n        // *   box type(PSSH) (8)\n        // *   Protection SystemID (16)\n        // *   protection system data size (4) - length of decoded PROHeader\n        // *   decoded PROHeader data from MPD file\n        const PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\n        const playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n\n        let byteCursor = 0;\n        let uint8arraydecodedPROHeader = null;\n\n        let PROSize,\n            PSSHSize,\n            PSSHBoxBuffer,\n            PSSHBox,\n            PSSHData;\n\n        checkConfig();\n        // Handle common encryption PSSH\n        if ('pssh' in cpData) {\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\n        }\n        // Handle native MS PlayReady ContentProtection elements\n        if ('pro' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n        }\n        else if ('prheader' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n        }\n        else {\n            return null;\n        }\n\n        PROSize = uint8arraydecodedPROHeader.length;\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\n        PSSHData = new DataView(PSSHBoxBuffer);\n\n        PSSHData.setUint32(byteCursor, PSSHSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(PSSHBoxType, byteCursor);\n        byteCursor += PSSHBoxType.length;\n\n        PSSHBox.set(playreadySystemID, byteCursor);\n        byteCursor += playreadySystemID.length;\n\n        PSSHData.setUint32(byteCursor, PROSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n        byteCursor += PROSize;\n\n        return PSSHBox.buffer;\n    }\n\n    /**\n     * It seems that some PlayReady implementations return their XML-based CDM\n     * messages using UTF16, while others return them as UTF8.  Use this function\n     * to modify the message format to expect when parsing CDM messages.\n     *\n     * @param {string} format the expected message format.  Either \"utf8\" or \"utf16\".\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\n     */\n    function setPlayReadyMessageFormat(format) {\n        if (format !== 'utf8' && format !== 'utf16') {\n            throw new Error('Illegal PlayReady message format! -- ' + format);\n        }\n        messageFormat = format;\n    }\n\n    /**\n     * Initialize the Key system with protection data\n     * @param {Object} protectionData the protection data\n     */\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n\n    /**\n     * Get Playready Custom data\n     */\n    function getCDMData() {\n        let customData,\n            cdmData,\n            cdmDataBytes,\n            i;\n\n        checkConfig();\n        if (protData && protData.cdmData) {\n            // Convert custom data into multibyte string\n            customData = [];\n            for (i = 0; i < protData.cdmData.length; ++i) {\n                customData.push(protData.cdmData.charCodeAt(i));\n                customData.push(0);\n            }\n            customData = String.fromCharCode.apply(null, customData);\n\n            // Encode in Base 64 the custom data string\n            customData = BASE64.encode(customData);\n\n            // Initialize CDM data with Base 64 encoded custom data\n            // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\n            cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);\n\n            // Convert CDM data into multibyte characters\n            cdmDataBytes = [];\n            for (i = 0; i < cdmData.length; ++i) {\n                cdmDataBytes.push(cdmData.charCodeAt(i));\n                cdmDataBytes.push(0);\n            }\n\n            return new Uint8Array(cdmDataBytes).buffer;\n        }\n\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat,\n        init: init\n    };\n\n    return instance;\n}\n\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */"]}