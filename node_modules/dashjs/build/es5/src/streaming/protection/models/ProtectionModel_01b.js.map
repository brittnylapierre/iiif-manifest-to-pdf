{"version":3,"sources":["../../../../../../src/streaming/protection/models/ProtectionModel_01b.js"],"names":[],"mappings":"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","file":"ProtectionModel_01b.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Initial implementation of EME\n *\n * Implemented by Google Chrome prior to v36\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport KeyError from '../vo/KeyError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\n\nfunction ProtectionModel_01b(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const log = config.log;\n    const api = config.api;\n    const errHandler = config.errHandler;\n\n    let instance,\n        videoElement,\n        keySystem,\n        protectionKeyController,\n\n        // With this version of the EME APIs, sessionIDs are not assigned to\n        // sessions until the first key message is received.  We are assuming\n        // that in the case of multiple sessions, key messages will be received\n        // in the order that generateKeyRequest() is called.\n        // Holding spot for newly-created sessions until we determine whether or\n        // not the CDM supports sessionIDs\n        pendingSessions,\n\n        // List of sessions that have been initialized.  Only the first position will\n        // be used in the case that the CDM does not support sessionIDs\n        sessions,\n\n        // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\n        // there is no way for us to differentiate between sessions, therefore\n        // we must only allow a single session.  Once we receive the first key\n        // message we can set this flag to determine if more sessions are allowed\n        moreSessionsAllowed,\n\n        // This is our main event handler for all desired HTMLMediaElement events\n        // related to EME.  These events are translated into our API-independent\n        // versions of the same events\n        eventHandler;\n\n    function setup() {\n        videoElement = null;\n        keySystem = null;\n        pendingSessions = [];\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        if (videoElement) {\n            removeEventListeners();\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            closeKeySession(sessions[i]);\n        }\n        eventBus.trigger(events.TEARDOWN_COMPLETE);\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < pendingSessions.length; i++) {\n            retVal.push(pendingSessions[i].initData);\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        let ve = videoElement;\n        if (!ve) { // Must have a video element to do this capability tests\n            ve = document.createElement('video');\n        }\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\n            const configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                //let audios = configs[configIdx].audioCapabilities;\n                const videos = configs[configIdx].videoCapabilities;\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! -- No valid audio/video content configurations detected!'});\n        }\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystem = keySystemAccess.keySystem;\n        eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement) {\n            return;\n        }\n\n        // Replacing the previous element\n        if (videoElement) {\n            removeEventListeners();\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.keyerror, eventHandler);\n            videoElement.addEventListener(api.needkey, eventHandler);\n            videoElement.addEventListener(api.keymessage, eventHandler);\n            videoElement.addEventListener(api.keyadded, eventHandler);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        }\n    }\n\n    function createKeySession(initData /*, protData, keySystemType */) {\n        if (!keySystem) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Determine if creating a new session is allowed\n        if (moreSessionsAllowed || sessions.length === 0) {\n            const newSession = { // Implements SessionToken\n                sessionID: null,\n                initData: initData,\n                getSessionID: function () {\n                    return this.sessionID;\n                },\n\n                getExpirationTime: function () {\n                    return NaN;\n                },\n\n                getSessionType: function () {\n                    return 'temporary';\n                }\n            };\n            pendingSessions.push(newSession);\n\n            // Send our request to the CDM\n            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));\n\n            return newSession;\n\n        } else {\n            throw new Error('Multiple sessions not allowed!');\n        }\n\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const sessionID = sessionToken.sessionID;\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the CDM\n            videoElement[api.addKey](keySystem.systemString,\n                new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            for (let i = 0; i < message.keyPairs.length; i++) {\n                videoElement[api.addKey](keySystem.systemString,\n                    message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\n            }\n        }\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the CDM\n        videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                let sessionToken = null;\n                switch (event.type) {\n                    case api.needkey:\n                        let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                        eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, 'cenc')});\n                        break;\n\n                    case api.keyerror:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            let msg = '';\n                            switch (event.errorCode.code) {\n                                case 1:\n                                    msg += 'MEDIA_KEYERR_UNKNOWN - An unspecified error occurred. This value is used for errors that don\\'t match any of the other codes.';\n                                    break;\n                                case 2:\n                                    msg += 'MEDIA_KEYERR_CLIENT - The Key System could not be installed or updated.';\n                                    break;\n                                case 3:\n                                    msg += 'MEDIA_KEYERR_SERVICE - The message passed into update indicated an error from the license service.';\n                                    break;\n                                case 4:\n                                    msg += 'MEDIA_KEYERR_OUTPUT - There is no available output device with the required characteristics for the content protection system.';\n                                    break;\n                                case 5:\n                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - A hardware configuration change caused a content protection error.';\n                                    break;\n                                case 6:\n                                    msg += 'MEDIA_KEYERR_DOMAIN - An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';\n                                    break;\n                            }\n                            msg += '  System Code = ' + event.systemCode;\n                            // TODO: Build error string based on key error\n                            eventBus.trigger(events.KEY_ERROR, {data: new KeyError(sessionToken, msg)});\n                        } else {\n                            log('No session token found for key error');\n                        }\n                        break;\n\n                    case api.keyadded:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            log('DRM: Key added.');\n                            eventBus.trigger(events.KEY_ADDED, {data: sessionToken});//TODO not sure anything is using sessionToken? why there?\n                        } else {\n                            log('No session token found for key added');\n                        }\n                        break;\n\n                    case api.keymessage:\n                        // If this CDM does not support session IDs, we will be limited\n                        // to a single session\n                        moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\n\n                        // SessionIDs supported\n                        if (moreSessionsAllowed) {\n                            // Attempt to find an uninitialized token with this sessionID\n                            sessionToken = findSessionByID(sessions, event.sessionId);\n                            if (!sessionToken && pendingSessions.length > 0) {\n\n                                // This is the first message for our latest session, so set the\n                                // sessionID and add it to our list\n                                sessionToken = pendingSessions.shift();\n                                sessions.push(sessionToken);\n                                sessionToken.sessionID = event.sessionId;\n                            }\n                        } else if (pendingSessions.length > 0) { // SessionIDs not supported\n                            sessionToken = pendingSessions.shift();\n                            sessions.push(sessionToken);\n\n                            if (pendingSessions.length !== 0) {\n                                errHandler.mediaKeyMessageError('Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!');\n                            }\n                        }\n\n                        if (sessionToken) {\n                            let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n\n                            // For ClearKey, the spec mandates that you pass this message to the\n                            // addKey method, so we always save it to the token since there is no\n                            // way to tell which key system is in use\n                            sessionToken.keyMessage = message;\n                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(sessionToken, message, event.defaultURL)});\n\n                        } else {\n                            log('No session token found for key message');\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    /**\n     * Helper function to retrieve the stored session token based on a given\n     * sessionID value\n     *\n     * @param {Array} sessionArray - the array of sessions to search\n     * @param {*} sessionID - the sessionID to search for\n     * @returns {*} the session token with the given sessionID\n     */\n    function findSessionByID(sessionArray, sessionID) {\n        if (!sessionID || !sessionArray) {\n            return null;\n        } else {\n            const len = sessionArray.length;\n            for (let i = 0; i < len; i++) {\n                if (sessionArray[i].sessionID == sessionID) {\n                    return sessionArray[i];\n                }\n            }\n            return null;\n        }\n    }\n\n    function removeEventListeners() {\n        videoElement.removeEventListener(api.keyerror, eventHandler);\n        videoElement.removeEventListener(api.needkey, eventHandler);\n        videoElement.removeEventListener(api.keymessage, eventHandler);\n        videoElement.removeEventListener(api.keyadded, eventHandler);\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b); /* jshint ignore:line */\n"]}