{"version":3,"sources":["../../../../../src/streaming/rules/ThroughputHistory.js"],"names":[],"mappings":"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","file":"ThroughputHistory.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2017, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport Constants from '../constants/Constants';\nimport FactoryMaker from '../../core/FactoryMaker';\n\n// throughput generally stored in kbit/s\n// latency generally stored in ms\n\nfunction ThroughputHistory(config) {\n\n    config = config || {};\n    // sliding window constants\n    const MAX_MEASUREMENTS_TO_KEEP = 20;\n    const AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE = 3;\n    const AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD = 4;\n    const AVERAGE_LATENCY_SAMPLE_AMOUNT = 4;\n    const THROUGHPUT_DECREASE_SCALE = 1.3;\n    const THROUGHPUT_INCREASE_SCALE = 1.3;\n\n    // EWMA constants\n    const EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS = 8;\n    const EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS = 3;\n    const EWMA_LATENCY_SLOW_HALF_LIFE_COUNT = 2;\n    const EWMA_LATENCY_FAST_HALF_LIFE_COUNT = 1;\n\n    const mediaPlayerModel = config.mediaPlayerModel;\n\n    let throughputDict,\n        latencyDict,\n        ewmaThroughputDict,\n        ewmaLatencyDict,\n        ewmaHalfLife;\n\n    function setup() {\n        ewmaHalfLife = {\n            throughputHalfLife: { fast: EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS, slow: EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS },\n            latencyHalfLife:    { fast: EWMA_LATENCY_FAST_HALF_LIFE_COUNT,      slow: EWMA_LATENCY_SLOW_HALF_LIFE_COUNT }\n        };\n\n        reset();\n    }\n\n    function isCachedResponse(mediaType, latencyMs, downloadTimeMs) {\n        if (mediaType === Constants.VIDEO) {\n            return downloadTimeMs < mediaPlayerModel.getCacheLoadThresholdForType(Constants.VIDEO);\n        } else if (mediaType === Constants.AUDIO) {\n            return downloadTimeMs < mediaPlayerModel.getCacheLoadThresholdForType(Constants.AUDIO);\n        }\n    }\n\n    function push(mediaType, httpRequest, useDeadTimeLatency) {\n        if (!httpRequest.trace || !httpRequest.trace.length) {\n            return;\n        }\n\n        const latencyTimeInMilliseconds = (httpRequest.tresponse.getTime() - httpRequest.trequest.getTime()) || 1;\n        const downloadTimeInMilliseconds = (httpRequest._tfinish.getTime() - httpRequest.tresponse.getTime()) || 1; //Make sure never 0 we divide by this value. Avoid infinity!\n        const downloadBytes = httpRequest.trace.reduce((a, b) => a + b.b[0], 0);\n        const throughputMeasureTime = useDeadTimeLatency ? downloadTimeInMilliseconds : latencyTimeInMilliseconds + downloadTimeInMilliseconds;\n        const throughput = Math.round((8 * downloadBytes) / throughputMeasureTime); // bits/ms = kbits/s\n\n        checkSettingsForMediaType(mediaType);\n\n        if (isCachedResponse(mediaType, latencyTimeInMilliseconds, downloadTimeInMilliseconds)) {\n            if (throughputDict[mediaType].length > 0 && !throughputDict[mediaType].hasCachedEntries) {\n                // already have some entries which are not cached entries\n                // prevent cached fragment loads from skewing the average values\n                return;\n            } else { // have no entries || have cached entries\n                // no uncached entries yet, rely on cached entries because ABR rules need something to go by\n                throughputDict[mediaType].hasCachedEntries = true;\n            }\n        } else if (throughputDict[mediaType] && throughputDict[mediaType].hasCachedEntries) {\n            // if we are here then we have some entries already, but they are cached, and now we have a new uncached entry\n            clearSettingsForMediaType(mediaType);\n        }\n\n        throughputDict[mediaType].push(throughput);\n        if (throughputDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP) {\n            throughputDict[mediaType].shift();\n        }\n\n        latencyDict[mediaType].push(latencyTimeInMilliseconds);\n        if (latencyDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP) {\n            latencyDict[mediaType].shift();\n        }\n\n        updateEwmaEstimate(ewmaThroughputDict[mediaType], throughput, 0.001 * downloadTimeInMilliseconds, ewmaHalfLife.throughputHalfLife);\n        updateEwmaEstimate(ewmaLatencyDict[mediaType], latencyTimeInMilliseconds, 1, ewmaHalfLife.latencyHalfLife);\n    }\n\n    function updateEwmaEstimate(ewmaObj, value, weight, halfLife) {\n        // Note about startup:\n        // Estimates start at 0, so early values are underestimated.\n        // This effect is countered in getAverageEwma() by dividing the estimates by:\n        //     1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife)\n\n        const fastAlpha = Math.pow(0.5, weight / halfLife.fast);\n        ewmaObj.fastEstimate = (1 - fastAlpha) * value + fastAlpha * ewmaObj.fastEstimate;\n\n        const slowAlpha = Math.pow(0.5, weight / halfLife.slow);\n        ewmaObj.slowEstimate = (1 - slowAlpha) * value + slowAlpha * ewmaObj.slowEstimate;\n\n        ewmaObj.totalWeight += weight;\n    }\n\n    function getSampleSize(isThroughput, mediaType, isLive) {\n        let arr;\n        let sampleSize;\n\n        if (isThroughput) {\n            arr = throughputDict[mediaType];\n            sampleSize = isLive ? AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE : AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD;\n        } else {\n            arr = latencyDict[mediaType];\n            sampleSize = AVERAGE_LATENCY_SAMPLE_AMOUNT;\n        }\n\n        if (!arr) {\n            sampleSize = 0;\n        } else if (sampleSize >= arr.length) {\n            sampleSize = arr.length;\n        } else if (isThroughput) {\n            // if throughput samples vary a lot, average over a wider sample\n            for (let i = 1; i < sampleSize; ++i) {\n                const ratio = arr[-i] / arr[-i - 1];\n                if (ratio >= THROUGHPUT_INCREASE_SCALE || ratio <= 1 / THROUGHPUT_DECREASE_SCALE) {\n                    sampleSize += 1;\n                    if (sampleSize === arr.length) { // cannot increase sampleSize beyond arr.length\n                        break;\n                    }\n                }\n            }\n        }\n\n        return sampleSize;\n    }\n\n    function getAverage(isThroughput, mediaType, isDynamic) {\n        // only two moving average methods defined at the moment\n        return mediaPlayerModel.getMovingAverageMethod() !== Constants.MOVING_AVERAGE_SLIDING_WINDOW ?\n            getAverageEwma(isThroughput, mediaType) : getAverageSlidingWindow(isThroughput, mediaType, isDynamic);\n    }\n\n    function getAverageSlidingWindow(isThroughput, mediaType, isDynamic) {\n        const sampleSize = getSampleSize(isThroughput, mediaType, isDynamic);\n        const dict = isThroughput ? throughputDict : latencyDict;\n        let arr = dict[mediaType];\n\n        if (sampleSize === 0 || !arr || arr.length === 0) {\n            return NaN;\n        }\n\n        arr = arr.slice(-sampleSize); // still works if sampleSize too large\n        // arr.length >= 1\n        return arr.reduce((total, elem) => total + elem) / arr.length;\n    }\n\n    function getAverageEwma(isThroughput, mediaType) {\n        const halfLife = isThroughput ? ewmaHalfLife.throughputHalfLife : ewmaHalfLife.latencyHalfLife;\n        const ewmaObj = isThroughput ? ewmaThroughputDict[mediaType] : ewmaLatencyDict[mediaType];\n\n        if (!ewmaObj || ewmaObj.totalWeight <= 0) {\n            return NaN;\n        }\n\n        // to correct for startup, divide by zero factor = 1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife)\n        const fastEstimate = ewmaObj.fastEstimate / (1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife.fast));\n        const slowEstimate = ewmaObj.slowEstimate / (1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife.slow));\n        return isThroughput ? Math.min(fastEstimate, slowEstimate) : Math.max(fastEstimate, slowEstimate);\n    }\n\n    function getAverageThroughput(mediaType, isDynamic) {\n        return getAverage(true, mediaType, isDynamic);\n    }\n\n    function getSafeAverageThroughput(mediaType, isDynamic) {\n        let average = getAverageThroughput(mediaType, isDynamic);\n        if (!isNaN(average)) {\n            average *= mediaPlayerModel.getBandwidthSafetyFactor();\n        }\n        return average;\n    }\n\n    function getAverageLatency(mediaType) {\n        return getAverage(false, mediaType);\n    }\n\n    function checkSettingsForMediaType(mediaType) {\n        throughputDict[mediaType] = throughputDict[mediaType] || [];\n        latencyDict[mediaType] = latencyDict[mediaType] || [];\n        ewmaThroughputDict[mediaType] = ewmaThroughputDict[mediaType] || {fastEstimate: 0, slowEstimate: 0, totalWeight: 0};\n        ewmaLatencyDict[mediaType] = ewmaLatencyDict[mediaType] || {fastEstimate: 0, slowEstimate: 0, totalWeight: 0};\n    }\n\n    function clearSettingsForMediaType(mediaType) {\n        delete throughputDict[mediaType];\n        delete latencyDict[mediaType];\n        delete ewmaThroughputDict[mediaType];\n        delete ewmaLatencyDict[mediaType];\n        checkSettingsForMediaType(mediaType);\n    }\n\n    function reset() {\n        throughputDict = {};\n        latencyDict = {};\n        ewmaThroughputDict = {};\n        ewmaLatencyDict = {};\n    }\n\n    const instance = {\n        push: push,\n        getAverageThroughput: getAverageThroughput,\n        getSafeAverageThroughput: getSafeAverageThroughput,\n        getAverageLatency: getAverageLatency,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nThroughputHistory.__dashjs_factory_name = 'ThroughputHistory';\nexport default FactoryMaker.getClassFactory(ThroughputHistory);\n"]}