{"version":3,"sources":["../../../../../../src/streaming/rules/abr/ABRRulesCollection.js"],"names":[],"mappings":"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","file":"ABRRulesCollection.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport ThroughputRule from './ThroughputRule';\nimport InsufficientBufferRule from './InsufficientBufferRule';\nimport AbandonRequestsRule from './AbandonRequestsRule';\nimport DroppedFramesRule from './DroppedFramesRule';\nimport SwitchHistoryRule from './SwitchHistoryRule';\nimport BolaRule from './BolaRule';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport SwitchRequest from '../SwitchRequest';\n\nconst QUALITY_SWITCH_RULES = 'qualitySwitchRules';\nconst ABANDON_FRAGMENT_RULES = 'abandonFragmentRules';\n\nfunction ABRRulesCollection(config) {\n\n    config = config || {};\n    const context = this.context;\n\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const metricsModel = config.metricsModel;\n    const dashMetrics = config.dashMetrics;\n\n    let instance,\n        qualitySwitchRules,\n        abandonFragmentRules;\n\n    function initialize() {\n        qualitySwitchRules = [];\n        abandonFragmentRules = [];\n\n        if (mediaPlayerModel.getUseDefaultABRRules()) {\n            // Only one of BolaRule and ThroughputRule will give a switchRequest.quality !== SwitchRequest.NO_CHANGE.\n            // This is controlled by useBufferOccupancyABR mechanism in AbrController.\n            qualitySwitchRules.push(\n                BolaRule(context).create({\n                    metricsModel: metricsModel,\n                    dashMetrics: dashMetrics,\n                    mediaPlayerModel: mediaPlayerModel\n                })\n            );\n            qualitySwitchRules.push(\n                ThroughputRule(context).create({\n                    metricsModel: metricsModel,\n                    dashMetrics: dashMetrics\n                })\n            );\n            qualitySwitchRules.push(\n                InsufficientBufferRule(context).create({\n                    metricsModel: metricsModel,\n                    dashMetrics: dashMetrics\n                })\n            );\n            qualitySwitchRules.push(\n                SwitchHistoryRule(context).create()\n            );\n            qualitySwitchRules.push(\n                DroppedFramesRule(context).create()\n            );\n            abandonFragmentRules.push(\n                AbandonRequestsRule(context).create({\n                    metricsModel: metricsModel,\n                    dashMetrics: dashMetrics,\n                    mediaPlayerModel: mediaPlayerModel\n                })\n            );\n        }\n\n        // add custom ABR rules if any\n        const customRules = mediaPlayerModel.getABRCustomRules();\n        customRules.forEach(function (rule) {\n            if (rule.type === QUALITY_SWITCH_RULES) {\n                qualitySwitchRules.push(rule.rule(context).create());\n            }\n\n            if (rule.type === ABANDON_FRAGMENT_RULES) {\n                abandonFragmentRules.push(rule.rule(context).create());\n            }\n        });\n    }\n\n    function getActiveRules(srArray) {\n        return srArray.filter(sr => sr.quality > SwitchRequest.NO_CHANGE);\n    }\n\n    function getMinSwitchRequest(srArray) {\n        const values = {};\n        let i,\n            len,\n            req,\n            newQuality,\n            quality;\n\n        if (srArray.length === 0) {\n            return;\n        }\n\n        values[SwitchRequest.PRIORITY.STRONG] = SwitchRequest.NO_CHANGE;\n        values[SwitchRequest.PRIORITY.WEAK] = SwitchRequest.NO_CHANGE;\n        values[SwitchRequest.PRIORITY.DEFAULT] = SwitchRequest.NO_CHANGE;\n\n        for (i = 0, len = srArray.length; i < len; i += 1) {\n            req = srArray[i];\n            if (req.quality !== SwitchRequest.NO_CHANGE) {\n                values[req.priority] = values[req.priority] > SwitchRequest.NO_CHANGE ? Math.min(values[req.priority], req.quality) : req.quality;\n            }\n        }\n\n        if (values[SwitchRequest.PRIORITY.WEAK] !== SwitchRequest.NO_CHANGE) {\n            newQuality = values[SwitchRequest.PRIORITY.WEAK];\n        }\n\n        if (values[SwitchRequest.PRIORITY.DEFAULT] !== SwitchRequest.NO_CHANGE) {\n            newQuality = values[SwitchRequest.PRIORITY.DEFAULT];\n        }\n\n        if (values[SwitchRequest.PRIORITY.STRONG] !== SwitchRequest.NO_CHANGE) {\n            newQuality = values[SwitchRequest.PRIORITY.STRONG];\n        }\n\n        if (newQuality !== SwitchRequest.NO_CHANGE) {\n            quality = newQuality;\n        }\n\n        return SwitchRequest(context).create(quality);\n    }\n\n    function getMaxQuality(rulesContext) {\n        const switchRequestArray = qualitySwitchRules.map(rule => rule.getMaxIndex(rulesContext));\n        const activeRules = getActiveRules(switchRequestArray);\n        const maxQuality = getMinSwitchRequest(activeRules);\n\n        return maxQuality || SwitchRequest(context).create();\n    }\n\n    function shouldAbandonFragment(rulesContext) {\n        const abandonRequestArray = abandonFragmentRules.map(rule => rule.shouldAbandon(rulesContext));\n        const activeRules = getActiveRules(abandonRequestArray);\n        const shouldAbandon = getMinSwitchRequest(activeRules);\n\n        return shouldAbandon || SwitchRequest(context).create();\n    }\n\n    function reset() {\n        [qualitySwitchRules, abandonFragmentRules].forEach(rules => {\n            if (rules && rules.length) {\n                rules.forEach(rule => rule.reset && rule.reset());\n            }\n        });\n        qualitySwitchRules = [];\n        abandonFragmentRules = [];\n    }\n\n    instance = {\n        initialize: initialize,\n        reset: reset,\n        getMaxQuality: getMaxQuality,\n        shouldAbandonFragment: shouldAbandonFragment\n    };\n\n    return instance;\n}\n\nABRRulesCollection.__dashjs_factory_name = 'ABRRulesCollection';\nconst factory = FactoryMaker.getClassFactory(ABRRulesCollection);\nfactory.QUALITY_SWITCH_RULES = QUALITY_SWITCH_RULES;\nfactory.ABANDON_FRAGMENT_RULES = ABANDON_FRAGMENT_RULES;\nFactoryMaker.updateSingletonFactory(ABRRulesCollection.__dashjs_factory_name, factory);\n\nexport default factory;\n"]}