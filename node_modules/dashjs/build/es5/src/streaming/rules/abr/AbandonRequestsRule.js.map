{"version":3,"sources":["../../../../../../src/streaming/rules/abr/AbandonRequestsRule.js"],"names":[],"mappings":"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","file":"AbandonRequestsRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport SwitchRequest from '../SwitchRequest';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Debug from '../../../core/Debug';\n\nfunction AbandonRequestsRule(config) {\n\n    config = config || {};\n    const ABANDON_MULTIPLIER = 1.8;\n    const GRACE_TIME_THRESHOLD = 500;\n    const MIN_LENGTH_TO_AVERAGE = 5;\n\n    const context = this.context;\n    const log = Debug(context).getInstance().log;\n\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const metricsModel = config.metricsModel;\n    const dashMetrics = config.dashMetrics;\n\n    let fragmentDict,\n        abandonDict,\n        throughputArray;\n\n    function setup() {\n        reset();\n    }\n\n    function setFragmentRequestDict(type, id) {\n        fragmentDict[type] = fragmentDict[type] || {};\n        fragmentDict[type][id] = fragmentDict[type][id] || {};\n    }\n\n    function storeLastRequestThroughputByType(type, throughput) {\n        throughputArray[type] = throughputArray[type] || [];\n        throughputArray[type].push(throughput);\n    }\n\n    function shouldAbandon(rulesContext) {\n        const switchRequest = SwitchRequest(context).create(SwitchRequest.NO_CHANGE, {name: AbandonRequestsRule.__dashjs_factory_name});\n\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('getCurrentRequest') ||\n            !rulesContext.hasOwnProperty('getRepresentationInfo') || !rulesContext.hasOwnProperty('getAbrController')) {\n            return switchRequest;\n        }\n\n        const mediaInfo = rulesContext.getMediaInfo();\n        const mediaType = rulesContext.getMediaType();\n        const req = rulesContext.getCurrentRequest();\n\n        if (!isNaN(req.index)) {\n            setFragmentRequestDict(mediaType, req.index);\n\n            const stableBufferTime = mediaPlayerModel.getStableBufferTime();\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(mediaType));\n            if ( bufferLevel > stableBufferTime ) {\n                return switchRequest;\n            }\n\n            const fragmentInfo = fragmentDict[mediaType][req.index];\n            if (fragmentInfo === null || req.firstByteDate === null || abandonDict.hasOwnProperty(fragmentInfo.id)) {\n                return switchRequest;\n            }\n\n            //setup some init info based on first progress event\n            if (fragmentInfo.firstByteTime === undefined) {\n                throughputArray[mediaType] = [];\n                fragmentInfo.firstByteTime = req.firstByteDate.getTime();\n                fragmentInfo.segmentDuration = req.duration;\n                fragmentInfo.bytesTotal = req.bytesTotal;\n                fragmentInfo.id = req.index;\n            }\n            fragmentInfo.bytesLoaded = req.bytesLoaded;\n            fragmentInfo.elapsedTime = new Date().getTime() - fragmentInfo.firstByteTime;\n\n            if (fragmentInfo.bytesLoaded > 0 && fragmentInfo.elapsedTime > 0) {\n                storeLastRequestThroughputByType(mediaType, Math.round(fragmentInfo.bytesLoaded * 8 / fragmentInfo.elapsedTime));\n            }\n\n            if (throughputArray[mediaType].length >= MIN_LENGTH_TO_AVERAGE &&\n                fragmentInfo.elapsedTime > GRACE_TIME_THRESHOLD &&\n                fragmentInfo.bytesLoaded < fragmentInfo.bytesTotal) {\n\n                const totalSampledValue = throughputArray[mediaType].reduce((a, b) => a + b, 0);\n                fragmentInfo.measuredBandwidthInKbps = Math.round(totalSampledValue / throughputArray[mediaType].length);\n                fragmentInfo.estimatedTimeOfDownload = +((fragmentInfo.bytesTotal * 8 / fragmentInfo.measuredBandwidthInKbps) / 1000).toFixed(2);\n\n                if (fragmentInfo.estimatedTimeOfDownload < fragmentInfo.segmentDuration * ABANDON_MULTIPLIER || rulesContext.getRepresentationInfo().quality === 0 ) {\n                    return switchRequest;\n                } else if (!abandonDict.hasOwnProperty(fragmentInfo.id)) {\n\n                    const abrController = rulesContext.getAbrController();\n                    const bytesRemaining = fragmentInfo.bytesTotal - fragmentInfo.bytesLoaded;\n                    const bitrateList = abrController.getBitrateList(mediaInfo);\n                    const newQuality = abrController.getQualityForBitrate(mediaInfo, fragmentInfo.measuredBandwidthInKbps * mediaPlayerModel.getBandwidthSafetyFactor());\n                    const estimateOtherBytesTotal = fragmentInfo.bytesTotal * bitrateList[newQuality].bitrate / bitrateList[abrController.getQualityFor(mediaType, mediaInfo.streamInfo)].bitrate;\n\n                    if (bytesRemaining > estimateOtherBytesTotal) {\n                        switchRequest.quality = newQuality;\n                        switchRequest.reason.throughput = fragmentInfo.measuredBandwidthInKbps;\n                        switchRequest.reason.fragmentID = fragmentInfo.id;\n                        abandonDict[fragmentInfo.id] = fragmentInfo;\n                        log('AbandonRequestsRule ( ', mediaType, 'frag id',fragmentInfo.id,') is asking to abandon and switch to quality to ', newQuality, ' measured bandwidth was', fragmentInfo.measuredBandwidthInKbps);\n                        delete fragmentDict[mediaType][fragmentInfo.id];\n                    }\n                }\n            } else if (fragmentInfo.bytesLoaded === fragmentInfo.bytesTotal) {\n                delete fragmentDict[mediaType][fragmentInfo.id];\n            }\n        }\n\n        return switchRequest;\n    }\n\n    function reset() {\n        fragmentDict = {};\n        abandonDict = {};\n        throughputArray = [];\n    }\n\n    const instance = {\n        shouldAbandon: shouldAbandon,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nAbandonRequestsRule.__dashjs_factory_name = 'AbandonRequestsRule';\nexport default FactoryMaker.getClassFactory(AbandonRequestsRule);\n"]}