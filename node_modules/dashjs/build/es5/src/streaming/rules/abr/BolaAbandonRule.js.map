{"version":3,"sources":["../../../../../../src/streaming/rules/abr/BolaAbandonRule.js"],"names":[],"mappings":"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","file":"BolaAbandonRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2016, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport SwitchRequest from '../SwitchRequest';\nimport MediaPlayerModel from '../../models/MediaPlayerModel';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Debug from '../../../core/Debug';\nimport BolaRule from './BolaRule';\n\nfunction BolaAbandonRule(config) {\n\n    // do not abandon during the grace period\n    const GRACE_PERIOD_MS = 500;\n    const POOR_LATENCY_MS = 200;\n\n    let context = this.context;\n    let log = Debug(context).getInstance().log;\n    let dashMetrics = config.dashMetrics;\n    let metricsModel = config.metricsModel;\n\n    let instance,\n        abandonDict,\n        mediaPlayerModel;\n\n    function setup() {\n        abandonDict = {};\n        mediaPlayerModel = MediaPlayerModel(context).getInstance();\n    }\n\n    function rememberAbandon(mediaType, index, quality) {\n        // if this is called, then canStillAbandon(mediaType, index, quality) should have returned true\n        abandonDict[mediaType] = {index: index, quality: quality};\n    }\n\n    function canAbandon(mediaType, index, quality) {\n        let a = abandonDict[mediaType];\n        if (!a)\n            return true;\n        return index !== a.index || quality < a.quality;\n    }\n\n    function shouldAbandon(rulesContext) {\n        let mediaInfo = rulesContext.getMediaInfo();\n        let mediaType = mediaInfo.type;\n        let metrics = metricsModel.getReadOnlyMetricsFor(mediaType);\n        let request = rulesContext.getCurrentRequest();\n        let switchRequest = SwitchRequest(context).create(SwitchRequest.NO_CHANGE, {name: BolaAbandonRule.__dashjs_factory_name});\n\n        if (metrics.BolaState.length === 0) {\n            // should not arrive here - we shouldn't be downloading a fragment before BOLA is initialized\n            log('WARNING: executing BolaAbandonRule before initializing BolaRule');\n            abandonDict[mediaType] = null;\n            return switchRequest;\n        }\n\n        let bolaState = metrics.BolaState[0]._s;\n        // TODO: does changing bolaState conform to coding style, or should we clone?\n\n        let index = request.index;\n        let quality = request.quality;\n\n        if (isNaN(index) || quality === 0 || !canAbandon(mediaType, index, quality) || !request.firstByteDate) {\n            return switchRequest;\n        }\n\n        let nowMs = Date.now();\n        let elapsedTimeMs = nowMs - request.firstByteDate.getTime();\n\n        let bytesLoaded = request.bytesLoaded;\n        let bytesTotal = request.bytesTotal;\n        let bytesRemaining = bytesTotal - bytesLoaded;\n        let durationS = request.duration;\n\n        let bufferLevel = dashMetrics.getCurrentBufferLevel(metrics) ? dashMetrics.getCurrentBufferLevel(metrics) : 0.0;\n        let effectiveBufferLevel = bufferLevel + bolaState.placeholderBuffer;\n\n        let estimateThroughput = 8 * bytesLoaded / (0.001 * elapsedTimeMs); // throughput in bits per second\n        let estimateThroughputBSF = bolaState.bandwidthSafetyFactor * estimateThroughput;\n        let latencyS = 0.001 * (request.firstByteDate.getTime() - request.requestStartDate.getTime());\n        if (latencyS < 0.001 * POOR_LATENCY_MS) {\n            latencyS = 0.001 * POOR_LATENCY_MS;\n        }\n        let estimateTotalTimeS = latencyS + 8 * bytesTotal / estimateThroughputBSF;\n\n        let diagnosticMessage = '';\n        if (BolaRule.BOLA_DEBUG) diagnosticMessage = 'index=' + index + ' quality=' + quality + ' bytesLoaded/bytesTotal=' + bytesLoaded + '/' + bytesTotal + ' bufferLevel=' + bufferLevel + ' timeSince1stByte=' + (elapsedTimeMs / 1000).toFixed(3) + ' estThroughput=' + (estimateThroughputBSF / 1000000).toFixed(3) + ' latency=' + latencyS.toFixed(3);\n\n        let estimateOtherBytesTotal = bytesTotal * bolaState.bitrates[0] / bolaState.bitrates[quality];\n        let estimateBytesRemainingAfterLatency = bytesRemaining - latencyS * estimateThroughputBSF / 8;\n        if (estimateBytesRemainingAfterLatency < 1) {\n            estimateBytesRemainingAfterLatency = 1;\n        }\n\n        if (elapsedTimeMs < GRACE_PERIOD_MS ||\n            bytesRemaining <= estimateOtherBytesTotal ||\n            bufferLevel > bolaState.bufferTarget ||\n            estimateBytesRemainingAfterLatency <= estimateOtherBytesTotal ||\n            estimateTotalTimeS <= durationS) {\n            // Do not abandon during first GRACE_PERIOD_MS.\n            // Do not abandon if we need to download less bytes than the size of the lowest quality fragment.\n            // Do not abandon if buffer level is above bufferTarget because the schedule controller will not download anything anyway.\n            // Do not abandon if after latencyS bytesRemaining is estimated to drop below size of lowest quality fragment.\n            // Do not abandon if fragment takes less than 1 fragment duration to download.\n            return switchRequest;\n        }\n\n        // If we abandon, there will be latencyS time before we get first byte at lower quality.\n        // By that time, the no-abandon option would have downloaded some more, and the buffer level would have depleted some more.\n        // Introducing this latencyS cushion also helps avoid extra abandonment, especially with close bitrates.\n\n        let effectiveBufferAfterLatency = effectiveBufferLevel - latencyS;\n        if (effectiveBufferAfterLatency < 0) {\n            effectiveBufferAfterLatency = 0;\n        }\n\n        // if we end up abandoning, we should not consider starting a download that would require more bytes than the remaining bytes in currently downloading fragment\n        let maxDroppedQuality = 0;\n        while (maxDroppedQuality + 1 < quality &&\n               bytesTotal * bolaState.bitrates[maxDroppedQuality + 1] / bolaState.bitrates[quality] < estimateBytesRemainingAfterLatency) {\n\n            ++maxDroppedQuality;\n        }\n\n        let newQuality = quality;\n\n        if (bolaState.state === BolaRule.BOLA_STATE_STARTUP) {\n            // We are not yet using the BOLA buffer rules - use different abandonment logic.\n\n            // if we are here then we failed the test that estimateTotalTimeS <= durationS, so we abandon\n\n            // search for quality that matches the throughput\n            newQuality = 0;\n            for (let i = 0; i <= maxDroppedQuality; ++i) {\n                estimateOtherBytesTotal = bytesTotal * bolaState.bitrates[i] / bolaState.bitrates[quality];\n                if (8 * estimateOtherBytesTotal / durationS > estimateThroughputBSF) {\n                    // chunks at quality i or higher need a greater throughput\n                    break;\n                }\n                newQuality = i;\n            }\n        } else { // bolaState.state === BolaRule.BOLA_STATE_STEADY\n            // check if we should abandon using BOLA utility criteria\n\n            let score = (bolaState.Vp * (bolaState.utilities[quality] + bolaState.gp) - effectiveBufferAfterLatency) / estimateBytesRemainingAfterLatency;\n\n            for (let i = 0; i <= maxDroppedQuality; ++i) {\n                estimateOtherBytesTotal = bytesTotal * bolaState.bitrates[i] / bolaState.bitrates[quality];\n                let s = (bolaState.Vp * (bolaState.utilities[i] + bolaState.gp) - effectiveBufferAfterLatency) / estimateOtherBytesTotal;\n                if (s > score) {\n                    newQuality = i;\n                    score = s;\n                }\n            }\n        }\n\n        // Perform check for rebuffer avoidance - now use real buffer level as opposed to effective buffer level.\n        let safeByteSize = bolaState.rebufferSafetyFactor * estimateThroughput * (bufferLevel - latencyS) / 8;\n\n        if (newQuality === quality && estimateBytesRemainingAfterLatency > safeByteSize) {\n            newQuality = maxDroppedQuality;\n        }\n\n        if (newQuality === quality) {\n            // no change\n            return switchRequest;\n        }\n\n        // newQuality < quality, we are abandoning\n        while (newQuality > 0) {\n            estimateOtherBytesTotal = bytesTotal * bolaState.bitrates[newQuality] / bolaState.bitrates[quality];\n            if (estimateOtherBytesTotal <= safeByteSize) {\n                break;\n            }\n            --newQuality;\n        }\n\n        // deflate placeholder buffer - we want to be conservative after abandoning\n        let wantBufferLevel = NaN;\n        if (newQuality > 0) {\n            // deflate to point where score for newQuality is just getting better than for (newQuality - 1)\n            let u  = bolaState.utilities[newQuality];\n            let u1 = bolaState.utilities[newQuality - 1];\n            let s  = bolaState.bitrates[newQuality];\n            let s1 = bolaState.bitrates[newQuality - 1];\n            wantBufferLevel = bolaState.Vp * ((s * u1 - s1 * u) / (s - s1) + bolaState.gp);\n        } else {\n            // deflate to point where score for (newQuality + 1) is just getting better than for newQuality\n            let u  = bolaState.utilities[0];\n            let u1 = bolaState.utilities[1];\n            let s  = bolaState.bitrates[0];\n            let s1 = bolaState.bitrates[1];\n            wantBufferLevel = bolaState.Vp * ((s * u1 - s1 * u) / (s - s1) + bolaState.gp);\n            // then reduce one fragment duration to be conservative\n            wantBufferLevel -= durationS;\n        }\n        if (effectiveBufferLevel > wantBufferLevel) {\n            bolaState.placeholderBuffer = wantBufferLevel - bufferLevel;\n            if (bolaState.placeholderBuffer < 0)\n                bolaState.placeholderBuffer = 0;\n        }\n\n        bolaState.lastQuality = newQuality;\n        metricsModel.updateBolaState(mediaType, bolaState);\n\n        if (BolaRule.BOLA_DEBUG) log('BolaDebug ' + mediaType + ' BolaAbandonRule abandon to ' + newQuality + ' - ' + diagnosticMessage);\n\n        rememberAbandon(mediaType, index, quality);\n        switchRequest.value = newQuality;\n        switchRequest.reason.state = bolaState.state;\n        switchRequest.reason.throughput = estimateThroughput;\n        switchRequest.reason.bufferLevel = bufferLevel;\n        // following entries used for tuning algorithm\n        switchRequest.reason.bytesLoaded = request.bytesLoaded;\n        switchRequest.reason.bytesTotal = request.bytesTotal;\n        switchRequest.reason.elapsedTimeMs = elapsedTimeMs;\n\n        return switchRequest;\n    }\n\n    function reset() {\n        abandonDict = {};\n    }\n\n    instance = {\n        shouldAbandon: shouldAbandon,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nBolaAbandonRule.__dashjs_factory_name = 'BolaAbandonRule';\nexport default FactoryMaker.getClassFactory(BolaAbandonRule);\n"]}