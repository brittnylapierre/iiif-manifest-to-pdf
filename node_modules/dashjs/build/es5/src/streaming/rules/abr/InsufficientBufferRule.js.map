{"version":3,"sources":["../../../../../../src/streaming/rules/abr/InsufficientBufferRule.js"],"names":[],"mappings":"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","file":"InsufficientBufferRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport BufferController from '../../controllers/BufferController';\nimport EventBus from '../../../core/EventBus';\nimport Events from '../../../core/events/Events';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Debug from '../../../core/Debug';\nimport SwitchRequest from '../SwitchRequest';\n\nfunction InsufficientBufferRule(config) {\n\n    config = config || {};\n    const INSUFFICIENT_BUFFER_SAFETY_FACTOR = 0.5;\n\n    const context = this.context;\n    const log = Debug(context).getInstance().log;\n\n    const eventBus = EventBus(context).getInstance();\n    const metricsModel = config.metricsModel;\n    const dashMetrics = config.dashMetrics;\n\n    let instance,\n        bufferStateDict;\n\n    function setup() {\n        resetInitialSettings();\n        eventBus.on(Events.PLAYBACK_SEEKING, onPlaybackSeeking, instance);\n    }\n\n    function checkConfig() {\n        if (!metricsModel || !metricsModel.hasOwnProperty('getReadOnlyMetricsFor') || !dashMetrics || !dashMetrics.hasOwnProperty('getCurrentBufferLevel')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n    /*\n     * InsufficientBufferRule does not kick in before the first BUFFER_LOADED event happens. This is reset at every seek.\n     *\n     * If a BUFFER_EMPTY event happens, then InsufficientBufferRule returns switchRequest.quality=0 until BUFFER_LOADED happens.\n     *\n     * Otherwise InsufficientBufferRule gives a maximum bitrate depending on throughput and bufferLevel such that\n     * a whole fragment can be downloaded before the buffer runs out, subject to a conservative safety factor of 0.5.\n     * If the bufferLevel is low, then InsufficientBufferRule avoids rebuffering risk.\n     * If the bufferLevel is high, then InsufficientBufferRule give a high MaxIndex allowing other rules to take over.\n     */\n    function getMaxIndex (rulesContext) {\n        const switchRequest = SwitchRequest(context).create();\n\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaType')) {\n            return switchRequest;\n        }\n\n        checkConfig();\n\n        const mediaType = rulesContext.getMediaType();\n        const metrics = metricsModel.getReadOnlyMetricsFor(mediaType);\n        const lastBufferStateVO = (metrics.BufferState.length > 0) ? metrics.BufferState[metrics.BufferState.length - 1] : null;\n        const representationInfo = rulesContext.getRepresentationInfo();\n        const fragmentDuration = representationInfo.fragmentDuration;\n\n        // Don't ask for a bitrate change if there is not info about buffer state or if fragmentDuration is not defined\n        if (!lastBufferStateVO || !wasFirstBufferLoadedEventTriggered(mediaType, lastBufferStateVO) || !fragmentDuration) {\n            return switchRequest;\n        }\n\n        if (lastBufferStateVO.state === BufferController.BUFFER_EMPTY) {\n            log('Switch to index 0; buffer is empty.');\n            switchRequest.quality = 0;\n            switchRequest.reason = 'InsufficientBufferRule: Buffer is empty';\n        } else {\n            const mediaInfo = rulesContext.getMediaInfo();\n            const abrController = rulesContext.getAbrController();\n            const throughputHistory = abrController.getThroughputHistory();\n\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(metrics);\n            const throughput = throughputHistory.getAverageThroughput(mediaType);\n            const latency = throughputHistory.getAverageLatency(mediaType);\n            const bitrate = throughput * (bufferLevel / fragmentDuration) * INSUFFICIENT_BUFFER_SAFETY_FACTOR;\n\n            switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, bitrate, latency);\n            switchRequest.reason = 'InsufficientBufferRule: being conservative to avoid immediate rebuffering';\n        }\n\n        return switchRequest;\n    }\n\n    function wasFirstBufferLoadedEventTriggered(mediaType, currentBufferState) {\n        bufferStateDict[mediaType] = bufferStateDict[mediaType] || {};\n\n        let wasTriggered = false;\n        if (bufferStateDict[mediaType].firstBufferLoadedEvent) {\n            wasTriggered = true;\n        } else if (currentBufferState && currentBufferState.state === BufferController.BUFFER_LOADED) {\n            bufferStateDict[mediaType].firstBufferLoadedEvent = true;\n            wasTriggered = true;\n        }\n        return wasTriggered;\n    }\n\n    function resetInitialSettings() {\n        bufferStateDict = {};\n    }\n\n    function onPlaybackSeeking() {\n        resetInitialSettings();\n    }\n\n    function reset() {\n        resetInitialSettings();\n        eventBus.off(Events.PLAYBACK_SEEKING, onPlaybackSeeking, instance);\n    }\n\n    instance = {\n        getMaxIndex: getMaxIndex,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nInsufficientBufferRule.__dashjs_factory_name = 'InsufficientBufferRule';\nexport default FactoryMaker.getClassFactory(InsufficientBufferRule);\n"]}