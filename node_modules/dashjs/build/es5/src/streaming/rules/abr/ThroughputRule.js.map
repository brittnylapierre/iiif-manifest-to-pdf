{"version":3,"sources":["../../../../../../src/streaming/rules/abr/ThroughputRule.js"],"names":[],"mappings":"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","file":"ThroughputRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport BufferController from '../../controllers/BufferController';\nimport AbrController from '../../controllers/AbrController';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Debug from '../../../core/Debug';\nimport SwitchRequest from '../SwitchRequest';\n\nfunction ThroughputRule(config) {\n\n    config = config || {};\n    const context = this.context;\n    const log = Debug(context).getInstance().log;\n\n    const metricsModel = config.metricsModel;\n\n    function checkConfig() {\n        if (!metricsModel || !metricsModel.hasOwnProperty('getReadOnlyMetricsFor')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getMaxIndex(rulesContext) {\n        const switchRequest = SwitchRequest(context).create();\n\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('useBufferOccupancyABR') ||\n            !rulesContext.hasOwnProperty('getAbrController') || !rulesContext.hasOwnProperty('getStreamProcessor')) {\n            return switchRequest;\n        }\n\n        checkConfig();\n\n        const mediaInfo = rulesContext.getMediaInfo();\n        const mediaType = rulesContext.getMediaType();\n        const metrics = metricsModel.getReadOnlyMetricsFor(mediaType);\n        const streamProcessor = rulesContext.getStreamProcessor();\n        const abrController = rulesContext.getAbrController();\n        const streamInfo = rulesContext.getStreamInfo();\n        const isDynamic = streamInfo && streamInfo.manifestInfo ? streamInfo.manifestInfo.isDynamic : null;\n        const throughputHistory = abrController.getThroughputHistory();\n        const throughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic);\n        const latency = throughputHistory.getAverageLatency(mediaType);\n        const bufferStateVO = (metrics.BufferState.length > 0) ? metrics.BufferState[metrics.BufferState.length - 1] : null;\n        const useBufferOccupancyABR = rulesContext.useBufferOccupancyABR();\n\n        if (!metrics || isNaN(throughput) || !bufferStateVO || useBufferOccupancyABR) {\n            return switchRequest;\n        }\n\n        if (abrController.getAbandonmentStateFor(mediaType) !== AbrController.ABANDON_LOAD) {\n            if (bufferStateVO.state === BufferController.BUFFER_LOADED || isDynamic) {\n                switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, throughput, latency);\n                streamProcessor.getScheduleController().setTimeToLoadDelay(0);\n                log('ThroughputRule requesting switch to index: ', switchRequest.quality, 'type: ',mediaType, 'Average throughput', Math.round(throughput), 'kbps');\n                switchRequest.reason = {throughput: throughput, latency: latency};\n            }\n        }\n\n        return switchRequest;\n    }\n\n    function reset() {\n        // no persistent information to reset\n    }\n\n    const instance = {\n        getMaxIndex: getMaxIndex,\n        reset: reset\n    };\n\n    return instance;\n}\n\nThroughputRule.__dashjs_factory_name = 'ThroughputRule';\nexport default FactoryMaker.getClassFactory(ThroughputRule);\n"]}