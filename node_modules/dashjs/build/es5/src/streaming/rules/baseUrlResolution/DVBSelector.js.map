{"version":3,"sources":["../../../../../../src/streaming/rules/baseUrlResolution/DVBSelector.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCA8ByB,4BAA4B;;;;AAErD,SAAS,WAAW,CAAC,MAAM,EAAE;;AAEzB,QAAI,QAAQ,YAAA,CAAC;;AAEb,QAAM,mBAAmB,GAAG,MAAM,CAAC,mBAAmB,CAAC;;AAEvD,aAAS,yBAAyB,CAAC,IAAI,EAAE;AACrC,YAAI,iBAAiB,GAAG,EAAE,CAAC;;AAE3B,YAAM,oBAAoB,GAAG,SAAvB,oBAAoB,CAAa,EAAE,EAAE;AACvC,gBAAI,iBAAiB,CAAC,MAAM,EAAE;AAC1B,oBAAI,AAAC,EAAE,CAAC,YAAY,IACX,iBAAiB,CAAC,OAAO,CAAC,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,AAAC,EAAE;AACzD,2BAAO,KAAK,CAAC;iBAChB;aACJ;;AAED,mBAAO,IAAI,CAAC;SACf,CAAC;;AAEF,YAAM,qBAAqB,GAAG,SAAxB,qBAAqB,CAAa,OAAO,EAAE;AAC7C,gBAAI,mBAAmB,CAAC,QAAQ,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;;;;AAIvD,oBAAI,OAAO,CAAC,YAAY,EAAE;AACtB,qCAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;iBAChD;;;;;AAKD,uBAAO,KAAK,CAAC;aAChB;;AAED,mBAAO,IAAI,CAAC;SACf,CAAC;;AAEF,eAAO,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;KAC1E;;AAED,aAAS,cAAc,CAAC,aAAa,EAAE;AACnC,YAAM,cAAc,GAAG,SAAjB,cAAc,CAAa,CAAC,EAAE,CAAC,EAAE;AACnC,gBAAI,IAAI,GAAG,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,YAAY,CAAC;AAC3C,mBAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;SACjC,CAAC;;AAEF,YAAM,iBAAiB,GAAG,SAApB,iBAAiB,CAAa,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE;AACnD,mBAAO,CAAC,GAAG,IACP,AAAC,GAAG,CAAC,CAAC,CAAC,CAAC,YAAY,IAAI,OAAO,CAAC,YAAY,IAC3C,GAAG,CAAC,CAAC,CAAC,CAAC,YAAY,KAAK,OAAO,CAAC,YAAY,AAAC,AACjD,CAAC;SACL,CAAC;;AAEF,YAAI,WAAW,GAAG,CAAC,CAAC;AACpB,YAAI,YAAY,GAAG,EAAE,CAAC;AACtB,YAAI,GAAG,GAAG,CAAC,CAAC;AACZ,YAAI,EAAE,CAAC;AACP,YAAI,IAAI,CAAC;;;;;AAKT,YAAI,GAAG,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;;AAEpE,YAAI,IAAI,CAAC,MAAM,EAAE;AACb,gBAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;;;;;;;;AAQjB,oBAAI,CAAC,OAAO,CAAC,UAAA,OAAO,EAAI;AACpB,+BAAW,IAAI,OAAO,CAAC,UAAU,CAAC;AAClC,gCAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;iBAClC,CAAC,CAAC;;;AAGH,kBAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,WAAW,GAAG,CAAC,CAAA,AAAC,CAAC,CAAC;;;AAGnD,4BAAY,CAAC,KAAK,CAAC,UAAC,KAAK,EAAE,KAAK,EAAK;AACjC,uBAAG,GAAG,KAAK,CAAC;;AAEZ,wBAAI,EAAE,GAAG,KAAK,EAAE;AACZ,+BAAO,KAAK,CAAC;qBAChB;;AAED,2BAAO,IAAI,CAAC;iBACf,CAAC,CAAC;aACN;;AAED,mBAAO,IAAI,CAAC,GAAG,CAAC,CAAC;SACpB;KACJ;;AAED,aAAS,MAAM,CAAC,QAAQ,EAAE;AACtB,eAAO,QAAQ,IAAI,cAAc,CAC7B,yBAAyB,CACrB,QAAQ,CACX,CACJ,CAAC;KACL;;AAED,YAAQ,GAAG;AACP,cAAM,EAAE,MAAM;KACjB,CAAC;;AAEF,WAAO,QAAQ,CAAC;CACnB;;AAED,WAAW,CAAC,qBAAqB,GAAG,aAAa,CAAC;qBACnC,8BAAa,eAAe,CAAC,WAAW,CAAC","file":"DVBSelector.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction DVBSelector(config) {\n\n    let instance;\n\n    const blacklistController = config.blacklistController;\n\n    function getNonBlacklistedBaseUrls(urls) {\n        var removedPriorities = [];\n\n        const samePrioritiesFilter = function (el) {\n            if (removedPriorities.length) {\n                if ((el.dvb_priority) &&\n                        (removedPriorities.indexOf(el.dvb_priority) !== -1)) {\n                    return false;\n                }\n            }\n\n            return true;\n        };\n\n        const serviceLocationFilter = function (baseUrl) {\n            if (blacklistController.contains(baseUrl.serviceLocation)) {\n                // whenever a BaseURL is removed from the available list of\n                // BaseURLs, any other BaseURL with the same @priority\n                // value as the BaseURL being removed shall also be removed\n                if (baseUrl.dvb_priority) {\n                    removedPriorities.push(baseUrl.dvb_priority);\n                }\n\n                // all URLs in the list which have a @serviceLocation\n                // attribute matching an entry in the blacklist shall be\n                // removed from the available list of BaseURLs\n                return false;\n            }\n\n            return true;\n        };\n\n        return urls.filter(serviceLocationFilter).filter(samePrioritiesFilter);\n    }\n\n    function selectByWeight(availableUrls) {\n        const prioritySorter = function (a, b) {\n            var diff = a.dvb_priority - b.dvb_priority;\n            return isNaN(diff) ? 0 : diff;\n        };\n\n        const topPriorityFilter = function (baseUrl, idx, arr) {\n            return !idx || (\n                (arr[0].dvb_priority && baseUrl.dvb_priority) &&\n                (arr[0].dvb_priority === baseUrl.dvb_priority)\n            );\n        };\n\n        var totalWeight = 0;\n        var cumulWeights = [];\n        var idx = 0;\n        var rn;\n        var urls;\n\n        // It shall begin by taking the set of resolved BaseURLs present or inherited at the current\n        // position in the MPD, resolved and filtered as described in 10.8.2.1, that have the lowest\n        // @priority attribute value.\n        urls = availableUrls.sort(prioritySorter).filter(topPriorityFilter);\n\n        if (urls.length) {\n            if (urls.length > 1) {\n                // If there is more than one BaseURL with this lowest @priority attribute value then the Player\n                // shall select one of them at random such that the probability of each BaseURL being chosen\n                // is proportional to the value of its @weight attribute. The method described in RFC 2782\n                // [26] or picking from a number of weighted entries is suitable for this, but there may be other\n                // algorithms which achieve the same effect.\n\n                // add all the weights together, storing the accumulated weight per entry\n                urls.forEach(baseUrl => {\n                    totalWeight += baseUrl.dvb_weight;\n                    cumulWeights.push(totalWeight);\n                });\n\n                // pick a random number between zero and totalWeight\n                rn = Math.floor(Math.random() * (totalWeight - 1));\n\n                // select the index for the range rn falls within\n                cumulWeights.every((limit, index) => {\n                    idx = index;\n\n                    if (rn < limit) {\n                        return false;\n                    }\n\n                    return true;\n                });\n            }\n\n            return urls[idx];\n        }\n    }\n\n    function select(baseUrls) {\n        return baseUrls && selectByWeight(\n            getNonBlacklistedBaseUrls(\n                baseUrls\n            )\n        );\n    }\n\n    instance = {\n        select: select\n    };\n\n    return instance;\n}\n\nDVBSelector.__dashjs_factory_name = 'DVBSelector';\nexport default FactoryMaker.getClassFactory(DVBSelector);\n"]}