{"version":3,"sources":["../../../../../src/streaming/text/NotFragmentedTextBufferController.js"],"names":[],"mappings":"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","file":"NotFragmentedTextBufferController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport InitCache from '../utils/InitCache';\nimport SourceBufferSink from '../SourceBufferSink';\nimport TextController from '../../streaming/text/TextController';\n\nconst BUFFER_CONTROLLER_TYPE = 'NotFragmentedTextBufferController';\nfunction NotFragmentedTextBufferController(config) {\n\n    config = config || {};\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n    const textController = TextController(context).getInstance();\n\n    let errHandler = config.errHandler;\n    let type = config.type;\n    let streamProcessor = config.streamProcessor;\n\n    let instance,\n        isBufferingCompleted,\n        initialized,\n        mediaSource,\n        buffer,\n        representationController,\n        initCache;\n\n    function setup() {\n        initialized = false;\n        mediaSource = null;\n        representationController = null;\n        isBufferingCompleted = false;\n\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\n        eventBus.on(Events.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, instance);\n    }\n\n    function getBufferControllerType() {\n        return BUFFER_CONTROLLER_TYPE;\n    }\n\n    function initialize(source) {\n        setMediaSource(source);\n        representationController = streamProcessor.getRepresentationController();\n        initCache = InitCache(context).getInstance();\n    }\n\n    /**\n     * @param {MediaInfo }mediaInfo\n     * @memberof BufferController#\n     */\n    function createBuffer(mediaInfo) {\n        try {\n            buffer = SourceBufferSink(context).create(mediaSource, mediaInfo);\n            if (!initialized) {\n                const textBuffer = buffer.getBuffer();\n                if (textBuffer.hasOwnProperty(Constants.INITIALIZE)) {\n                    textBuffer.initialize(type, streamProcessor);\n                }\n                initialized = true;\n            }\n\n        } catch (e) {\n            if ((mediaInfo.isText) || (mediaInfo.codec.indexOf('codecs=\"stpp') !== -1) || (mediaInfo.codec.indexOf('codecs=\"wvtt') !== -1)) {\n                try {\n                    buffer = textController.getTextSourceBuffer();\n                } catch (e) {\n                    errHandler.mediaSourceError('Error creating ' + type + ' source buffer.');\n                }\n            } else {\n                errHandler.mediaSourceError('Error creating ' + type + ' source buffer.');\n            }\n        }\n    }\n\n    function getType() {\n        return type;\n    }\n\n    function getBuffer() {\n        return buffer;\n    }\n\n    function setMediaSource(value) {\n        mediaSource = value;\n    }\n\n    function getMediaSource() {\n        return mediaSource;\n    }\n\n    function getStreamProcessor() {\n        return streamProcessor;\n    }\n\n    function getIsPruningInProgress() {\n        return false;\n    }\n\n    function dischargePreBuffer() {\n    }\n\n    function setSeekStartTime() { //Unused - TODO Remove need for stub function\n    }\n\n    function getBufferLevel() {\n        return 0;\n    }\n\n    function getIsBufferingCompleted() {\n        return isBufferingCompleted;\n    }\n\n    function reset(errored) {\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\n        eventBus.off(Events.INIT_FRAGMENT_LOADED, onInitFragmentLoaded, instance);\n\n        if (!errored && buffer) {\n            buffer.abort();\n            buffer.reset();\n            buffer = null;\n        }\n    }\n\n    function onDataUpdateCompleted(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        eventBus.trigger(Events.TIMED_TEXT_REQUESTED, {\n            index: 0,\n            sender: e.sender\n        }); //TODO make index dynamic if referring to MP?\n    }\n\n    function onInitFragmentLoaded(e) {\n        if (e.fragmentModel !== streamProcessor.getFragmentModel() || (!e.chunk.bytes)) {\n            return;\n        }\n        initCache.save(e.chunk);\n        buffer.append(e.chunk);\n    }\n\n    function switchInitData(streamId, representationId) {\n        const chunk = initCache.extract(streamId, representationId);\n        if (chunk) {\n            buffer.append(chunk);\n        } else {\n            eventBus.trigger(Events.INIT_REQUESTED, {\n                sender: instance\n            });\n        }\n    }\n\n    function getRangeAt() {\n        return null;\n    }\n\n    instance = {\n        getBufferControllerType: getBufferControllerType,\n        initialize: initialize,\n        createBuffer: createBuffer,\n        getType: getType,\n        getStreamProcessor: getStreamProcessor,\n        setSeekStartTime: setSeekStartTime,\n        getBuffer: getBuffer,\n        getBufferLevel: getBufferLevel,\n        setMediaSource: setMediaSource,\n        getMediaSource: getMediaSource,\n        getIsBufferingCompleted: getIsBufferingCompleted,\n        getIsPruningInProgress: getIsPruningInProgress,\n        dischargePreBuffer: dischargePreBuffer,\n        switchInitData: switchInitData,\n        getRangeAt: getRangeAt,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nNotFragmentedTextBufferController.__dashjs_factory_name = BUFFER_CONTROLLER_TYPE;\nexport default FactoryMaker.getClassFactory(NotFragmentedTextBufferController);\n"]}