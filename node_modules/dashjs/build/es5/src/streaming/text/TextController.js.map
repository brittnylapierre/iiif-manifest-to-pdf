{"version":3,"sources":["../../../../../src/streaming/text/TextController.js"],"names":[],"mappings":"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","file":"TextController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport TextSourceBuffer from './TextSourceBuffer';\nimport TextTracks from './TextTracks';\nimport VTTParser from '../utils/VTTParser';\nimport TTMLParser from '../utils/TTMLParser';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\n\nfunction TextController() {\n\n    let context = this.context;\n    let instance;\n    let textSourceBuffer;\n\n    let errHandler,\n        dashManifestModel,\n        manifestModel,\n        mediaController,\n        videoModel,\n        streamController,\n        textTracks,\n        vttParser,\n        ttmlParser,\n        eventBus,\n        defaultLanguage,\n        lastEnabledIndex,\n        textDefaultEnabled, // this is used for default settings (each time a file is loaded, we check value of this settings )\n        allTracksAreDisabled; // this is used for one session (when a file has been loaded, we use this settings to enable/disable text)\n\n    function setup() {\n\n        defaultLanguage = '';\n        lastEnabledIndex = -1;\n        textDefaultEnabled = true;\n        textTracks = TextTracks(context).getInstance();\n        vttParser = VTTParser(context).getInstance();\n        ttmlParser = TTMLParser(context).getInstance();\n        textSourceBuffer = TextSourceBuffer(context).getInstance();\n        eventBus = EventBus(context).getInstance();\n\n        textTracks.initialize();\n        eventBus.on(Events.TEXT_TRACKS_QUEUE_INITIALIZED, onTextTracksAdded, instance);\n\n        resetInitialSettings();\n    }\n\n    function setConfig(config) {\n        if (!config) {\n            return;\n        }\n        if (config.errHandler) {\n            errHandler = config.errHandler;\n        }\n        if (config.dashManifestModel) {\n            dashManifestModel = config.dashManifestModel;\n        }\n        if (config.manifestModel) {\n            manifestModel = config.manifestModel;\n        }\n        if (config.mediaController) {\n            mediaController = config.mediaController;\n        }\n        if (config.videoModel) {\n            videoModel = config.videoModel;\n        }\n        if (config.streamController) {\n            streamController = config.streamController;\n        }\n        if (config.textTracks) {\n            textTracks = config.textTracks;\n        }\n        if (config.vttParser) {\n            vttParser = config.vttParser;\n        }\n        if (config.ttmlParser) {\n            ttmlParser = config.ttmlParser;\n        }\n\n        // create config for source buffer\n        textSourceBuffer.setConfig({\n            errHandler: errHandler,\n            dashManifestModel: dashManifestModel,\n            manifestModel: manifestModel,\n            mediaController: mediaController,\n            videoModel: videoModel,\n            streamController: streamController,\n            textTracks: textTracks,\n            vttParser: vttParser,\n            ttmlParser: ttmlParser\n        });\n    }\n\n    function getTextSourceBuffer() {\n        return textSourceBuffer;\n    }\n\n    function getAllTracksAreDisabled() {\n        return allTracksAreDisabled;\n    }\n\n    function addEmbeddedTrack(mediaInfo) {\n        textSourceBuffer.addEmbeddedTrack(mediaInfo);\n    }\n\n    function setTextDefaultLanguage(lang) {\n        if (typeof lang !== 'string') {\n            return;\n        }\n\n        defaultLanguage = lang;\n    }\n\n    function getTextDefaultLanguage() {\n        return defaultLanguage;\n    }\n\n    function onTextTracksAdded(e) {\n        let tracks = e.tracks;\n        let index = e.index;\n        // find track corresponding to default subtitle and apply it\n        let defaultLanguageIndex = tracks.findIndex((item) => {\n            return (item.lang === defaultLanguage);\n        });\n\n        if (defaultLanguageIndex !== -1) {\n            this.setTextTrack(defaultLanguageIndex);\n            index = defaultLanguageIndex;\n        }\n\n        if (!textDefaultEnabled) {\n            // disable text at startup\n            this.setTextTrack(-1);\n        }\n\n        lastEnabledIndex = index;\n        eventBus.trigger(Events.TEXT_TRACKS_ADDED, {\n            enabled: !allTracksAreDisabled,\n            index: index,\n            tracks: tracks\n        });\n    }\n\n    function setTextDefaultEnabled(enable) {\n        if (typeof enable !== 'boolean') {\n            return;\n        }\n        textDefaultEnabled = enable;\n    }\n\n    function getTextDefaultEnabled() {\n        return textDefaultEnabled;\n    }\n\n    function enableText(enable) {\n        if (typeof enable !== 'boolean') {\n            return;\n        }\n        let isTextEnabled = (!allTracksAreDisabled);\n        if (isTextEnabled !== enable) {\n            // change track selection\n            if (enable) {\n                // apply last enabled tractk\n                this.setTextTrack(lastEnabledIndex);\n            }\n\n            if (!enable) {\n                // keep last index and disable text track\n                lastEnabledIndex = this.getCurrentTrackIdx();\n                this.setTextTrack(-1);\n            }\n        }\n    }\n\n    function isTextEnabled() {\n        return !allTracksAreDisabled;\n    }\n\n    function setTextTrack(idx) {\n        //For external time text file,  the only action needed to change a track is marking the track mode to showing.\n        // Fragmented text tracks need the additional step of calling TextController.setTextTrack();\n\n        let config = textSourceBuffer.getConfig();\n        let fragmentModel = config.fragmentModel;\n        let fragmentedTracks = config.fragmentedTracks;\n\n        let oldTrackIdx = textTracks.getCurrentTrackIdx();\n        if (oldTrackIdx !== idx) {\n            textTracks.setModeForTrackIdx(oldTrackIdx, Constants.TEXT_HIDDEN);\n            textTracks.setCurrentTrackIdx(idx);\n            textTracks.setModeForTrackIdx(idx, Constants.TEXT_SHOWING);\n\n            let currentTrackInfo = textTracks.getCurrentTrackInfo();\n\n            if (currentTrackInfo && currentTrackInfo.isFragmented && !currentTrackInfo.isEmbedded) {\n                for (let i = 0; i < fragmentedTracks.length; i++) {\n                    let mediaInfo = fragmentedTracks[i];\n                    if (currentTrackInfo.lang === mediaInfo.lang && currentTrackInfo.index === mediaInfo.index &&\n                        (currentTrackInfo.label ? currentTrackInfo.label === mediaInfo.id : true)) {\n                        let currentFragTrack = mediaController.getCurrentTrackFor(Constants.FRAGMENTED_TEXT, streamController.getActiveStreamInfo());\n                        if (mediaInfo !== currentFragTrack) {\n                            fragmentModel.abortRequests();\n                            fragmentModel.removeExecutedRequestsBeforeTime();\n                            textSourceBuffer.remove();\n                            textTracks.deleteCuesFromTrackIdx(oldTrackIdx);\n                            mediaController.setTrack(mediaInfo);\n                            textSourceBuffer.setCurrentFragmentedTrackIdx(i);\n                        }\n                    }\n                }\n            }\n        }\n\n        allTracksAreDisabled = idx === -1 ? true : false;\n    }\n\n    function getCurrentTrackIdx() {\n        return textTracks.getCurrentTrackIdx();\n    }\n\n    function resetInitialSettings() {\n        allTracksAreDisabled = false;\n    }\n\n    function reset() {\n        resetInitialSettings();\n        textSourceBuffer.resetEmbedded();\n    }\n\n    instance = {\n        setConfig: setConfig,\n        getTextSourceBuffer: getTextSourceBuffer,\n        getAllTracksAreDisabled: getAllTracksAreDisabled,\n        addEmbeddedTrack: addEmbeddedTrack,\n        getTextDefaultLanguage: getTextDefaultLanguage,\n        setTextDefaultLanguage: setTextDefaultLanguage,\n        setTextDefaultEnabled: setTextDefaultEnabled,\n        getTextDefaultEnabled: getTextDefaultEnabled,\n        enableText: enableText,\n        isTextEnabled: isTextEnabled,\n        setTextTrack: setTextTrack,\n        getCurrentTrackIdx: getCurrentTrackIdx,\n        reset: reset\n    };\n    setup();\n    return instance;\n}\n\nTextController.__dashjs_factory_name = 'TextController';\nexport default FactoryMaker.getSingletonFactory(TextController);\n"]}