{"version":3,"sources":["../../../../../src/streaming/thumbnail/ThumbnailTracks.js"],"names":[],"mappings":"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","file":"ThumbnailTracks.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport DashConstants from '../../dash/constants/DashConstants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport ThumbnailTrackInfo from '../vo/ThumbnailTrackInfo';\nimport URLUtils from '../../streaming/utils/URLUtils';\nimport {replaceIDForTemplate} from '../../dash/utils/SegmentsUtils';\n\nconst THUMBNAILS_SCHEME_ID_URI = 'http://dashif.org/thumbnail_tile';\n\nfunction ThumbnailTracks(config) {\n\n    const context = this.context;\n    const dashManifestModel = config.dashManifestModel;\n    const adapter = config.adapter;\n    const baseURLController = config.baseURLController;\n    const stream = config.stream;\n    const urlUtils = URLUtils(context).getInstance();\n    let instance,\n        tracks,\n        currentTrackIndex;\n\n    function initialize() {\n        reset();\n\n        // parse representation and create tracks\n        addTracks();\n    }\n\n    function addTracks() {\n        if (!stream || !dashManifestModel || !adapter) {\n            return;\n        }\n\n        const streamInfo = stream ? stream.getStreamInfo() : null;\n        if (!streamInfo) {\n            return;\n        }\n\n        // Extract thumbnail tracks\n        const mediaInfo = adapter.getMediaInfoForType(streamInfo, Constants.IMAGE);\n        if (!mediaInfo) {\n            return;\n        }\n\n        const voAdaptation = adapter.getDataForMedia(mediaInfo);\n        if (!voAdaptation) {\n            return;\n        }\n\n        const voReps = dashManifestModel.getRepresentationsForAdaptation(voAdaptation);\n        if (voReps && voReps.length > 0) {\n            voReps.forEach((rep) => {\n                if (rep.segmentInfoType === DashConstants.SEGMENT_TEMPLATE && rep.segmentDuration > 0 && rep.media)\n                createTrack(rep);\n            });\n        }\n\n        if (tracks.length > 0) {\n            // Sort bitrates and select the lowest bitrate rendition\n            tracks.sort((a, b) => a.bitrate - b.bitrate);\n            currentTrackIndex = tracks.length - 1;\n        }\n    }\n\n    function createTrack(representation) {\n        const track = new ThumbnailTrackInfo();\n        track.id = representation.id;\n        track.bitrate = representation.bandwidth;\n        track.width = representation.width;\n        track.height = representation.height;\n        track.tilesHor = 1;\n        track.tilesVert = 1;\n        track.startNumber = representation.startNumber;\n        track.segmentDuration = representation.segmentDuration;\n        track.timescale = representation.timescale;\n        track.templateUrl = buildTemplateUrl(representation);\n\n        if (representation.essentialProperties) {\n            representation.essentialProperties.forEach((p) => {\n                if (p.schemeIdUri === THUMBNAILS_SCHEME_ID_URI && p.value) {\n                    const vars = p.value.split('x');\n                    if (vars.length === 2 && !isNaN(vars[0]) && !isNaN(vars[1])) {\n                        track.tilesHor = parseInt(vars[0], 10);\n                        track.tilesVert = parseInt(vars[1], 10);\n                    }\n                }\n            });\n        }\n        if (track.tilesHor > 0 && track.tilesVert > 0) {\n            // Precalculate width and heigth per tile for perf reasons\n            track.widthPerTile = track.width / track.tilesHor;\n            track.heightPerTile = track.height / track.tilesVert;\n            tracks.push(track);\n        }\n    }\n\n    function buildTemplateUrl(representation) {\n        const templateUrl = urlUtils.isRelative(representation.media) ?\n            urlUtils.resolve(representation.media, baseURLController.resolve(representation.path).url) : representation.media;\n\n        if (!templateUrl) {\n            return '';\n        }\n\n        return replaceIDForTemplate(templateUrl, representation.id);\n    }\n\n    function getTracks() {\n        return tracks;\n    }\n\n    function getCurrentTrackIndex() {\n        return currentTrackIndex;\n    }\n\n    function getCurrentTrack() {\n        if (currentTrackIndex < 0) {\n            return null;\n        }\n        return tracks[currentTrackIndex];\n    }\n\n    function setTrackByIndex(index) {\n        if (!tracks || tracks.length === 0) {\n            return;\n        }\n        // select highest bitrate in case selected index is higher than bitrate list length\n        if (index >= tracks.length) {\n            index = tracks.length - 1;\n        }\n        currentTrackIndex = index;\n    }\n\n    function reset() {\n        tracks = [];\n        currentTrackIndex = -1;\n    }\n\n    instance = {\n        initialize: initialize,\n        getTracks: getTracks,\n        reset: reset,\n        setTrackByIndex: setTrackByIndex,\n        getCurrentTrack: getCurrentTrack,\n        getCurrentTrackIndex: getCurrentTrackIndex\n    };\n\n    initialize();\n\n    return instance;\n}\n\nThumbnailTracks.__dashjs_factory_name = 'ThumbnailTracks';\nexport default FactoryMaker.getClassFactory(ThumbnailTracks);\n"]}