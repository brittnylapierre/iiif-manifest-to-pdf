{"version":3,"sources":["../../../../../src/streaming/utils/EBMLParser.js"],"names":[],"mappings":"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","file":"EBMLParser.js","sourcesContent":["import FactoryMaker from '../../core/FactoryMaker';\n\n/**\n * Creates an instance of an EBMLParser class which implements a large subset\n * of the functionality required to parse Matroska EBML\n *\n * @param {Object} config object with data member which is the buffer to parse\n */\nfunction EBMLParser(config) {\n\n    config = config || {};\n    let instance;\n\n    let data = new DataView(config.data);\n    let pos = 0;\n\n    function getPos() {\n        return pos;\n    }\n\n    function setPos(value) {\n        pos = value;\n    }\n\n    /**\n     * Consumes an EBML tag from the data stream.\n     *\n     * @param {Object} tag to parse, A tag is an object with at least a {number} tag and\n     * {boolean} required flag.\n     * @param {boolean} test whether or not the function should throw if a required\n     * tag is not found\n     * @return {boolean} whether or not the tag was found\n     * @throws will throw an exception if a required tag is not found and test\n     * param is false or undefined, or if the stream is malformed.\n     * @memberof EBMLParser\n     */\n    function consumeTag(tag, test) {\n        let found = true;\n        let bytesConsumed = 0;\n        let p1,\n            p2;\n\n        if (test === undefined) {\n            test = false;\n        }\n\n        if (tag.tag > 0xFFFFFF) {\n            if (data.getUint32(pos) !== tag.tag) {\n                found = false;\n            }\n            bytesConsumed = 4;\n        } else if (tag.tag > 0xFFFF) {\n            // 3 bytes\n            p1 = data.getUint16(pos);\n            p2 = data.getUint8(pos + 2);\n\n            // shift p1 over a byte and add p2\n            if (p1 * 256 + p2 !== tag.tag) {\n                found = false;\n            }\n            bytesConsumed = 3;\n        } else if (tag.tag > 0xFF) {\n            if (data.getUint16(pos) !== tag.tag) {\n                found = false;\n            }\n            bytesConsumed = 2;\n        } else {\n            if (data.getUint8(pos) !== tag.tag) {\n                found = false;\n            }\n            bytesConsumed = 1;\n        }\n\n        if (!found && tag.required && !test) {\n            throw new Error('required tag not found');\n        }\n\n        if (found) {\n            pos += bytesConsumed;\n        }\n\n        return found;\n    }\n\n    /**\n     * Consumes an EBML tag from the data stream.   If the tag is found then this\n     * function will also remove the size field which follows the tag from the\n     * data stream.\n     *\n     * @param {Object} tag to parse, A tag is an object with at least a {number} tag and\n     * {boolean} required flag.\n     * @param {boolean} test whether or not the function should throw if a required\n     * tag is not found\n     * @return {boolean} whether or not the tag was found\n     * @throws will throw an exception if a required tag is not found and test\n     * param is false or undefined, or if the stream is malformedata.\n     * @memberof EBMLParser\n     */\n    function consumeTagAndSize(tag, test) {\n        let found = consumeTag(tag, test);\n\n        if (found) {\n            getMatroskaCodedNum();\n        }\n\n        return found;\n    }\n\n    /**\n     * Consumes an EBML tag from the data stream.   If the tag is found then this\n     * function will also remove the size field which follows the tag from the\n     * data stream.  It will use the value of the size field to parse a binary\n     * field, using a parser defined in the tag itself\n     *\n     * @param {Object} tag to parse, A tag is an object with at least a {number} tag,\n     * {boolean} required flag, and a parse function which takes a size parameter\n     * @return {boolean} whether or not the tag was found\n     * @throws will throw an exception if a required tag is not found,\n     * or if the stream is malformed\n     * @memberof EBMLParser\n     */\n    function parseTag(tag) {\n        let size;\n\n        consumeTag(tag);\n        size = getMatroskaCodedNum();\n        return instance[tag.parse](size);\n    }\n\n    /**\n     * Consumes an EBML tag from the data stream.   If the tag is found then this\n     * function will also remove the size field which follows the tag from the\n     * data stream.  It will use the value of the size field to skip over the\n     * entire section of EBML encapsulated by the tag.\n     *\n     * @param {Object} tag to parse, A tag is an object with at least a {number} tag, and\n     * {boolean} required flag\n     * @param {boolean} test a flag to indicate if an exception should be thrown\n     * if a required tag is not found\n     * @return {boolean} whether or not the tag was found\n     * @throws will throw an exception if a required tag is not found and test is\n     * false or undefined or if the stream is malformed\n     * @memberof EBMLParser\n     */\n    function skipOverElement(tag, test) {\n        let found = consumeTag(tag, test);\n        let headerSize;\n\n        if (found) {\n            headerSize = getMatroskaCodedNum();\n            pos += headerSize;\n        }\n\n        return found;\n    }\n\n    /**\n     * Returns and consumes a number encoded according to the Matroska EBML\n     * specification from the bitstream.\n     *\n     * @param {boolean} retainMSB whether or not to retain the Most Significant Bit (the\n     * first 1). this is usually true when reading Tag IDs.\n     * @return {number} the decoded number\n     * @throws will throw an exception if the bit stream is malformed or there is\n     * not enough data\n     * @memberof EBMLParser\n     */\n    function getMatroskaCodedNum(retainMSB) {\n        let bytesUsed = 1;\n        let mask = 0x80;\n        let maxBytes = 8;\n        let extraBytes = -1;\n        let num = 0;\n        let ch = data.getUint8(pos);\n        let i = 0;\n\n        for (i = 0; i < maxBytes; i += 1) {\n            if ((ch & mask) === mask) {\n                num = (retainMSB === undefined) ? ch & ~mask : ch;\n                extraBytes = i;\n                break;\n            }\n            mask >>= 1;\n        }\n\n        for (i = 0; i < extraBytes; i += 1, bytesUsed += 1) {\n            num = (num << 8) | (0xff & data.getUint8(pos + bytesUsed));\n        }\n\n        pos += bytesUsed;\n\n        return num;\n    }\n\n    /**\n     * Returns and consumes a float from the bitstream.\n     *\n     * @param {number} size 4 or 8 byte floats are supported\n     * @return {number} the decoded number\n     * @throws will throw an exception if the bit stream is malformed or there is\n     * not enough data\n     * @memberof EBMLParser\n     */\n    function getMatroskaFloat(size) {\n        let outFloat;\n\n        switch (size) {\n        case 4:\n            outFloat = data.getFloat32(pos);\n            pos += 4;\n            break;\n        case 8:\n            outFloat = data.getFloat64(pos);\n            pos += 8;\n            break;\n        }\n        return outFloat;\n    }\n\n    /**\n     * Consumes and returns an unsigned int from the bitstream.\n     *\n     * @param {number} size 1 to 8 bytes\n     * @return {number} the decoded number\n     * @throws will throw an exception if the bit stream is malformed or there is\n     * not enough data\n     * @memberof EBMLParser\n     */\n    function getMatroskaUint(size) {\n        let val = 0;\n\n        for (let i = 0; i < size; i += 1) {\n            val <<= 8;\n            val |= data.getUint8(pos + i) & 0xff;\n        }\n\n        pos += size;\n        return val;\n    }\n\n    /**\n     * Tests whether there is more data in the bitstream for parsing\n     *\n     * @return {boolean} whether there is more data to parse\n     * @memberof EBMLParser\n     */\n    function moreData() {\n        return pos < data.byteLength;\n    }\n\n    instance = {\n        getPos: getPos,\n        setPos: setPos,\n        consumeTag: consumeTag,\n        consumeTagAndSize: consumeTagAndSize,\n        parseTag: parseTag,\n        skipOverElement: skipOverElement,\n        getMatroskaCodedNum: getMatroskaCodedNum,\n        getMatroskaFloat: getMatroskaFloat,\n        getMatroskaUint: getMatroskaUint,\n        moreData: moreData\n    };\n\n    return instance;\n}\n\nEBMLParser.__dashjs_factory_name = 'EBMLParser';\nexport default FactoryMaker.getClassFactory(EBMLParser);"]}