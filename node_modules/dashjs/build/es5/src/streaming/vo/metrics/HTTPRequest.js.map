{"version":3,"sources":["../../../../../../src/streaming/vo/metrics/HTTPRequest.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8NAmCM,WAAW;;OAIF,SAJT,WAAW,EAIC,sBAJZ,WAAW;;;WAST,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;;;;;;;;;;;WAalB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;;WAKjB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;;;WAKhB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;;;WAKtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;;;WAKlB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;;;WAKrB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;;;WAKtB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;;;WAKzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;;;WAKrB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;;;WAMhB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;;;WAKpB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;;;WAKrB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;;;WAK3B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;;;WAK7B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,CAChC;;QAMC,gBAAgB;;MAIP,SAJT,gBAAgB,EAIJ,sBAJZ,gBAAgB;;;WASd,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC;;;WAKd,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC;;;WAKd,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,CACf,CAGL,WAAW,CAAC,GAAG,GAAG,KAAK,CAAC,AACxB,WAAW,CAAC,IAAI,GAAG,MAAM,CAAC,AAC1B,WAAW,CAAC,QAAQ,GAAG,KAAK,CAAC,AAC7B,WAAW,CAAC,oBAAoB,GAAG,gBAAgB,CAAC,AACpD,WAAW,CAAC,iBAAiB,GAAG,uBAAuB,CAAC,AACxD,WAAW,CAAC,kBAAkB,GAAG,cAAc,CAAC,AAChD,WAAW,CAAC,kBAAkB,GAAG,cAAc,CAAC,AAChD,WAAW,CAAC,gCAAgC,GAAG,2BAA2B,CAAC,AAC3E,WAAW,CAAC,UAAU,GAAG,OAAO,CAAC,QAExB,WAAW,GAAX,WAAW,SAAE,gBAAgB,GAAhB,gBAAgB","file":"HTTPRequest.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @classdesc This Object holds reference to the HTTPRequest for manifest, fragment and xlink loading.\n * Members which are not defined in ISO23009-1 Annex D should be prefixed by a _ so that they are ignored\n * by Metrics Reporting code.\n */\nclass HTTPRequest {\n    /**\n     * @class\n     */\n    constructor() {\n        /**\n         * Identifier of the TCP connection on which the HTTP request was sent.\n         * @public\n         */\n        this.tcpid = null;\n        /**\n         * This is an optional parameter and should not be included in HTTP request/response transactions for progressive download.\n         * The type of the request:\n         * - MPD\n         * - XLink expansion\n         * - Initialization Fragment\n         * - Index Fragment\n         * - Media Fragment\n         * - Bitstream Switching Fragment\n         * - other\n         * @public\n         */\n        this.type = null;\n        /**\n         * The original URL (before any redirects or failures)\n         * @public\n         */\n        this.url = null;\n        /**\n         * The actual URL requested, if different from above\n         * @public\n         */\n        this.actualurl = null;\n        /**\n         * The contents of the byte-range-spec part of the HTTP Range header.\n         * @public\n         */\n        this.range = null;\n        /**\n         * Real-Time | The real time at which the request was sent.\n         * @public\n         */\n        this.trequest = null;\n        /**\n         * Real-Time | The real time at which the first byte of the response was received.\n         * @public\n         */\n        this.tresponse = null;\n        /**\n         * The HTTP response code.\n         * @public\n         */\n        this.responsecode = null;\n        /**\n         * The duration of the throughput trace intervals (ms), for successful requests only.\n         * @public\n         */\n        this.interval = null;\n        /**\n         * Throughput traces, for successful requests only.\n         * @public\n         */\n        this.trace = [];\n\n        /**\n         * Type of stream (\"audio\" | \"video\" etc..)\n         * @public\n         */\n        this._stream = null;\n        /**\n         * Real-Time | The real time at which the request finished.\n         * @public\n         */\n        this._tfinish = null;\n        /**\n         * The duration of the media requests, if available, in milliseconds.\n         * @public\n         */\n        this._mediaduration = null;\n        /**\n         * all the response headers from request.\n         * @public\n         */\n        this._responseHeaders = null;\n        /**\n         * The selected service location for the request. string.\n         * @public\n         */\n        this._serviceLocation = null;\n    }\n}\n\n/**\n * @classdesc This Object holds reference to the progress of the HTTPRequest.\n */\nclass HTTPRequestTrace {\n    /**\n    * @class\n    */\n    constructor() {\n        /**\n         * Real-Time | Measurement stream start.\n         * @public\n         */\n        this.s = null;\n        /**\n         * Measurement stream duration (ms).\n         * @public\n         */\n        this.d = null;\n        /**\n         * List of integers counting the bytes received in each trace interval within the measurement stream.\n         * @public\n         */\n        this.b = [];\n    }\n}\n\nHTTPRequest.GET = 'GET';\nHTTPRequest.HEAD = 'HEAD';\nHTTPRequest.MPD_TYPE = 'MPD';\nHTTPRequest.XLINK_EXPANSION_TYPE = 'XLinkExpansion';\nHTTPRequest.INIT_SEGMENT_TYPE = 'InitializationSegment';\nHTTPRequest.INDEX_SEGMENT_TYPE = 'IndexSegment';\nHTTPRequest.MEDIA_SEGMENT_TYPE = 'MediaSegment';\nHTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE = 'BitstreamSwitchingSegment';\nHTTPRequest.OTHER_TYPE = 'other';\n\nexport { HTTPRequest, HTTPRequestTrace };\n"]}