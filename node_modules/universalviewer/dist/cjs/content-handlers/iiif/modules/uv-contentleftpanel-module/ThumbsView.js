"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThumbsView = void 0;
var $ = require("jquery");
var ThumbsView_1 = require("../uv-shared-module/ThumbsView");
var Events_1 = require("../../extensions/uv-openseadragon-extension/Events");
var Mode_1 = require("../../extensions/uv-openseadragon-extension/Mode");
var ThumbsView = /** @class */ (function (_super) {
    __extends(ThumbsView, _super);
    function ThumbsView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThumbsView.prototype.create = function () {
        var _this = this;
        this.setConfig("contentLeftPanel");
        _super.prototype.create.call(this);
        // todo: this should be a setting
        this.extensionHost.subscribe(Events_1.OpenSeadragonExtensionEvents.MODE_CHANGE, function () {
            _this.setLabel();
        });
        this.extensionHost.subscribe(Events_1.OpenSeadragonExtensionEvents.SEARCH_PREVIEW_START, function (canvasIndex) {
            _this.searchPreviewStart(canvasIndex);
        });
        this.extensionHost.subscribe(Events_1.OpenSeadragonExtensionEvents.SEARCH_PREVIEW_FINISH, function () {
            _this.searchPreviewFinish();
        });
        if (this.extension.helper.isPaged()) {
            this.$thumbs.addClass("paged");
        }
        var that = this;
        $.views.helpers({
            separator: function () {
                // two thumbs per line
                if (that.extension.helper.isPaged()) {
                    return (this.data.index - 1) % 2 == 0 ? false : true;
                }
                return true; // default to one thumbnail per row
            },
        });
    };
    ThumbsView.prototype.addSelectedClassToThumbs = function (index) {
        var indices = this.extension.getPagedIndices(index);
        for (var i = 0; i < indices.length; i++) {
            this.getThumbByIndex(indices[i]).addClass("selected");
        }
    };
    ThumbsView.prototype.isPageModeEnabled = function () {
        // todo: move getMode to BaseExtension. call it getIndexingMode which can be Label or Index
        if (typeof this.extension.getMode === "function") {
            return (this.config.options.pageModeEnabled &&
                this.extension.getMode().toString() ===
                    Mode_1.Mode.page.toString());
        }
        return this.config.options.pageModeEnabled;
    };
    ThumbsView.prototype.searchPreviewStart = function (canvasIndex) {
        this.scrollToThumb(canvasIndex);
        var $thumb = this.getThumbByIndex(canvasIndex);
        $thumb.addClass("searchpreview");
    };
    ThumbsView.prototype.searchPreviewFinish = function () {
        this.scrollToThumb(this.extension.helper.canvasIndex);
        this.getAllThumbs().removeClass("searchpreview");
    };
    ThumbsView.prototype.setLabel = function () {
        if (this.isPDF()) {
            $(this.$thumbs)
                .find("span.index")
                .hide();
            $(this.$thumbs)
                .find("span.label")
                .hide();
        }
        else {
            if (this.isPageModeEnabled()) {
                $(this.$thumbs)
                    .find("span.index")
                    .hide();
                $(this.$thumbs)
                    .find("span.label")
                    .show();
            }
            else {
                $(this.$thumbs)
                    .find("span.index")
                    .show();
                $(this.$thumbs)
                    .find("span.label")
                    .hide();
            }
        }
    };
    return ThumbsView;
}(ThumbsView_1.ThumbsView));
exports.ThumbsView = ThumbsView;
//# sourceMappingURL=ThumbsView.js.map